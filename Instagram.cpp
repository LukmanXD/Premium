/* Generated by Cython 0.29.28 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_28"
#define CYTHON_HEX_VERSION 0x001D1CF0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030B00A1)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__Instagram
#define __PYX_HAVE_API__Instagram
/* Early includes */
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "Instagram.py",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* PyExec.proto */
static PyObject* __Pyx_PyExec3(PyObject*, PyObject*, PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyExec2(PyObject*, PyObject*);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* Globals.proto */
static PyObject* __Pyx_Globals(void);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'Instagram' */
#define __Pyx_MODULE_NAME "Instagram"
extern int __pyx_module_is_main_Instagram;
int __pyx_module_is_main_Instagram = 0;

/* Implementation of 'Instagram' */
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_base64[] = "base64";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_builtins[] = "__builtins__";
static const char __pyx_k_b64decode[] = "b64decode";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwpp[] = "IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwppbXBvcnQgcmVxdWVzdHMgLHJhbmRvbSAsdGltZSAsanNvbiAscmUgLG9zICNsaW5lOjIKZnJvbSBjb25jdXJyZW50IC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3IgI2xpbmU6Mwpmcm9tIHJlcXVlc3RzIC5leGNlcHRpb25zIGltcG9ydCBDb25uZWN0aW9uRXJyb3IgI2xpbmU6NApmcm9tIHV1aWQgaW1wb3J0IHV1aWQ0ICNsaW5lOjUKIiIiCkhhcmdhaSBQZW1idWF0IEF0YXUgQXV0aG9yLi4uClBsZWFzZSBKYW5nYW4gRGkgSnVhbCBCZWxpa2FuIExhZ2khClJlY29kZSBCdWF0IFByaWJhZGkgRW5nZ2FrIE1hc2FsYWgKIiIiI2xpbmU6MTAKSSA9KCdceDFiWzE7OTBtJykjbGluZToxMgpNID0oJ1x4MWJbMTs5MW0nKSNsaW5lOjEzCkggPSgnXHgxYlsxOzkybScpI2xpbmU6MTQKSyA9KCdceDFiWzE7OTNtJykjbGluZToxNQpUID0oJ1x4MWJbMTs5NG0nKSNsaW5lOjE2ClUgPSgnXHgxYlsxOzk1bScpI2xpbmU6MTcKQiA9KCdceDFiWzE7OTZtJykjbGluZToxOApQID0oJ1x4MWJbMTs5N20nKSNsaW5lOjE5Cl9fbG9nb19fID0oZiIiIntIfSBfX18gX19fIF9fXyBfXyAgX18gX19fIF8gICBfIF9fICBfXwp7SH18IF8gXCBfIFwgX198ICBcLyAgfF8gX3wgfCB8IHwgIFwvICB8CntQfXwgIF8vICAgLyBffHwgfFwvfCB8fCB8fCB8X3wgfCB8XC98IHwKe1B9fF98IHxffF9cX19ffF98ICB8X3xfX198XF9fXy98X3wgIHxffAp7UH1be0t9I3tQfV17S33igJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJQKe0h9W3tQfSp7SH1de1B9IEF1dGhvciA6IFJvemhhawp7SH1be1B9KntIfV17UH0gRmFjZWJvb2sgOiBAcm96aGFrLnh5egp7SH1be1B9KntIfV17UH0gSW5zdGFncmFtIDogQHJvemhha19vZmZpY2lhbAp7UH1be0t9I3tQfV17S33igJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJQiIiIpI2xpbmU6MjkKdXNlcmFnZW50ID0oJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA2LjA7IEhVQVdFSSBWTlMtTDMxIEJ1aWxkL0hVQVdFSVZOUy1MMzE7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvNjUuMC4zMzI1LjEwOSBNb2JpbGUgU2FmYXJpLzUzNy4zNiBJbnN0YWdyYW0gMzcuMC4wLjIxLjk3IEFuZHJvaWQgKDIzLzYuMDsgNDgwZHBpOyAxMDgweDE4MTI7IEhVQVdFSTsgSFVBV0VJIFZOUy1MMzE7IEhXVk5TLUg7IGhpNjI1MDsgcHRfUFQ7IDk4Mjg4MjQyKScpI2xpbmU6MzEKZGVmIF9fYXBpa2V5X18gKCk6I2xpbmU6MzMKICB0cnkgOiNsaW5lOjM0CiAgICBvcyAuc3lzdGVtICgnY2xlYXInKTtwcmludCAoZiJ7SH0gXyAgICAgXyAgICAgICAgICAgICAgICAgICAgX1xue0h9fCB8ICAgKF8pX19fICBf""X18gXyBfXyAgX19fKF8pXG57SH18IHwgICB8IC8gX198LyBfIFwgJ18gXC8gX198IHxcbntQfXwgfF9fX3wgXF9fIFwgIF9fLyB8IHwgXF9fIFwgfFxue1B9fF9fX19ffF98X19fL1xfX198X3wgfF98X19fL198XG5cbntLfVt7UH0je0t9XXtQfSBTaWxhaGthbiBNYXN1a2FuIEFwaWtleSBBbmRhIEppa2EgQW5kYSBCZWx1bSBNZW1wdW55YWkgQXBpa2V5IEtldGlrIHtLfVt7SH1HZXR7S31de1B9IFVudHVrIE1lbmRhcGF0a2FuIEFwaWtleS4uLlxuIikjbGluZTozNQogICAgTzBPME8wMDBPT08wMDAwME8gPWlucHV0IChmIntIfVt7UH0/e0h9XXtQfSBBcGlrZXkgOntUfSAiKSNsaW5lOjM2CiAgICBpZiBPME8wTzAwME9PTzAwMDAwTyBpbiBbJ2dldCcsJ0dldCcsJ0dFVCddOiNsaW5lOjM3CiAgICAgIHByaW50IChmIntNfVt7UH0qe019XXtQfSBBbmRhIEJpc2EgTWVuZ2h1YnVuZ2kgU2F5YSBTZWNhcmEgTWFudWFsIFdoYXRzQXBwIDogNjI4Mzg0NzkyMTQ4MCIpO3RpbWUgLnNsZWVwICgzICk7b3MgLnN5c3RlbSAoJ3hkZy1vcGVuIGh0dHBzOi8vd2EubWUvNjI4Mzg0NzkyMTQ4MD90ZXh0PVNheWElMjBpbmdpbiUyMG1lbWJlbGklMjBsaXNlbnNpJTIwY3JhY2slMjBpbnN0YWdyYW0nKTtleGl0ICgpI2xpbmU6MzgKICAgIGVsc2UgOiNsaW5lOjM5CiAgICAgIE9PT09PME8wT09PMDAwME9PID17J3Rva2VuJzonV3lJeE5UQXpNVEl3TkNJc0luTndTalI0YmtKWlFURjVSamhTT1N0YVIxUnZiWFYxVFZOTmFGVkhjVXBPZWxkRWREWnhWRUlpWFE9PScsJ3Byb2R1Y3RpZCc6JzE0MzQ2Jywna2V5JzpPME8wTzAwME9PTzAwMDAwTyAsJ3NpZ2luJzpUcnVlIH0jbGluZTo0NQogICAgICB3aXRoIHJlcXVlc3RzIC5TZXNzaW9uICgpYXMgT08wMDAwT08wME8wME9PME8gOiNsaW5lOjQ2CiAgICAgICAgTzAwTzAwMDAwMDAwT09PT08gPU9PMDAwME9PMDBPMDBPTzBPIC5nZXQgKCdodHRwczovL2FwcC5jcnlwdG9sZW5zLmlvL2FwaS9rZXkvYWN0aXZhdGU/JyxwYXJhbXMgPU9PT09PME8wT09PMDAwME9PICkuanNvbiAoKVsnbGljZW5zZUtleSddO29wZW4gKCdEYXRhL2FwaWtleS50eHQnLCd3Jykud3JpdGUgKE8wTzBPMDAwT09PMDAwMDBPICkjbGluZTo0NwogICAgICAgIE9PT08wMDAwME9PMDAwME9PID1PMDBPMDAwMDAwMDBPT09PTyBbJ2V4cGlyZXMnXS5zcGxpdCAoJ1QnKVswIF0uc3BsaXQgKCctJykjbGluZTo0OAogICAgICAgIE9PTzBPME8wME8wT09PT08wID1PMDBPMDAwMDAwMDBPT09PTyBbJ2V4cGlyZXMnXS5zcGxpdCAoJ1QnKVsxIF0uc3BsaXQgKCc6JykjbGluZTo0OQogICAgICAgIHByaW50IChmIntIfVt7UH0qe0h9XXtQfSBFeHBpcmVkIDp7S30ge09PT08wMDAwME9PMDAwME9PWzJdfS97T09PTzAwMDAwT08wMDAwT09bMV19L3tPT09PMDAwMDBPTzAwMDBPT1swXX0ge09PTzBPME8wME8wT09PT08wWzBdfS57T09PME8wTzAwTzBPT09PTzBbMV19Iik7dGltZSAuc2xlZXAgKDMgKTtfX21lbnVfXyAoKSNsaW5lOjUwCiAgZXhj""ZXB0IChLZXlFcnJvciApOiNsaW5lOjUxCiAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBBcGlrZXkgSW52YWxpZCIpI2xpbmU6NTIKICBleGNlcHQgRXhjZXB0aW9uIGFzIE8wT09PTzAwT09PTzBPTzBPIDojbGluZTo1MwogICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0ge08wT09PTzAwT09PTzBPTzBPfSIpI2xpbmU6NTQKZGVmIF9fbG9naW5fXyAoKTojbGluZTo1NgogIHRyeSA6I2xpbmU6NTcKICAgIG9zIC5zeXN0ZW0gKCdjbGVhcicpI2xpbmU6NTgKICAgIHByaW50IChmIntfX2xvZ29fX31cblxue0t9W3tQfSN7S31de1B9IFNpbGFoa2FuIE1hc3VrYW4gQ29va2llIEFrdW4gSW5zdGFncmFtIEFuZGEsIFBhc3Rpa2FuIEphbmdhbiBHdW5ha2FuIEFrdW4gQmFydSwgSmlrYSBBbmRhIEJlbHVtIE1lbmdldGFodWkgQ29va2llIEtldGlrIHtLfVt7SH1HZXR7S31de0h9XG4iKSNsaW5lOjU5CiAgICBPT09PMDBPTzAwTzBPTzAwTyA9aW5wdXQgKGYie0h9W3tQfT97SH1de1B9IENvb2tpZSA6e1R9ICIpI2xpbmU6NjAKICAgIGlmIE9PT08wME9PMDBPME9PMDBPIFs6MyBdaW4gWydnZXQnLCdHZXQnLCdHRVQnXTojbGluZTo2MQogICAgICBwcmludCAoZiJ7TX1be1B9IXtNfV17UH0gQW5kYSBBa2FuIERpYXJhaGthbiBLZSBZb3V0dWJlLi4uIik7dGltZSAuc2xlZXAgKDMgKTtvcyAuc3lzdGVtICgneGRnLW9wZW4gaHR0cHM6Ly95b3V0dS5iZS91MTdaUWdTczNhWScpO2V4aXQgKCkjbGluZTo2MgogICAgZWxpZiBPT09PMDBPTzAwTzBPTzAwTyBbOjQgXWluIFsnbWlkPSddOiNsaW5lOjYzCiAgICAgIE8wME9PTzAwMDAwTzBPT08wID1yZSAuc2VhcmNoICgnZHNfdXNlcl9pZD0oLio/KTsnLE9PT08wME9PMDBPME9PMDBPICkuZ3JvdXAgKDEgKTtvcGVuICgnRGF0YS91c2VyaWQudHh0JywndycpLndyaXRlIChPMDBPT08wMDAwME8wT09PMCApI2xpbmU6NjQKICAgICAgTzBPMDAwME9PT08wTzAwMDAgPXJlcXVlc3RzIC5nZXQgKGYnaHR0cHM6Ly9pLmluc3RhZ3JhbS5jb20vYXBpL3YxL3VzZXJzL3tPMDBPT08wMDAwME8wT09PMH0vaW5mby8nLGhlYWRlcnMgPXsndXNlci1hZ2VudCc6dXNlcmFnZW50ICwnY29va2llJzpPT09PMDBPTzAwTzBPTzAwTyB9KS5qc29uICgpWyd1c2VyJ107b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3cnKS53cml0ZSAoT09PTzAwT08wME8wT08wME8gKSNsaW5lOjY1CiAgICAgIHByaW50IChmIntIfVt7UH0qe0h9XXtQfSBXZWxjb21lIDp7VH0ge08wTzAwMDBPT09PME8wMDAwWydmdWxsX25hbWUnXX0iKTt0aW1lIC5zbGVlcCAoMiApO19fZm9sbG93X18gKCkjbGluZTo2NgogICAgZWxzZSA6I2xpbmU6NjcKICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gQXdhbGFuIENvb2tpZSBNaWQ9IikjbGluZTo2OAogIGV4Y2VwdCAoVmFsdWVFcnJvciAsS2V5RXJyb3IgKTojbGluZTo2OQogICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gQ29va2llIFNhbGFoIikjbGluZTo3MAogIGV4Y2VwdCAoQ29ubmVj""dGlvbkVycm9yICk6I2xpbmU6NzEKICAgIGV4aXQgKGYie1B9W3tLfSF7UH1de0t9IEtvbmVrc2kgRXJyb3IiKSNsaW5lOjcyCmRlZiBfX2ZvbGxvd19fICgpOiNsaW5lOjc0CiAgdHJ5IDojbGluZTo3NQogICAgTzAwME8wT09PTzBPTzAwMDAgPW9wZW4gKCdEYXRhL2Nvb2tpZS50eHQnLCdyJykucmVhZCAoKSNsaW5lOjc2CiAgZXhjZXB0IChJT0Vycm9yICk6I2xpbmU6NzcKICAgIHByaW50IChmIntQfVt7TX0he1B9XXtNfSBDb29raWUgSW52YWxpZCIpO3RpbWUgLnNsZWVwICgzICk7X19sb2dpbl9fICgpI2xpbmU6NzgKICB0cnkgOiNsaW5lOjc5CiAgICBPTzBPT09PME8wTzBPMDBPMCA9cmUgLnNlYXJjaCAoJ3Nlc3Npb25pZD0oLio/KTsnLE8wMDBPME9PT08wT08wMDAwICkuZ3JvdXAgKDEgKSNsaW5lOjgwCiAgICBPMDAwT09PT09PMDBPTzAwTyA9cmFuZG9tIC5jaG9pY2UgKFsnSGFsbG8gQmFuZyDwn5iNJywnSGFpIEJhbmcgQXBhIEthYmFyIPCfmI4nLCdJemluIFBha2UgU2NyaXB0bnlhIPCfmIEnLCdNYW50YXAgQmFuZyDwn5iYJywnUHJvZ3JhbW1lciBCYW5nIPCfpJQnLCdTYWxhbSBLZW5hbCBCYW5nIPCfpJcnLCdJIExvdmUgWW91IOKdpO+4jyddKSNsaW5lOjgxCiAgICBPTzAwTzAwMDBPMDBPMDAwMCA9eydhY2NlcHQnOicqLyonLCdhY2NlcHQtZW5jb2RpbmcnOidnemlwLCBkZWZsYXRlLCBicicsJ2FjY2VwdC1sYW5ndWFnZSc6J2VuLVVTLGVuO3E9MC45JywnY29udGVudC1sZW5ndGgnOicwJywnY29udGVudC10eXBlJzonYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywnY29va2llJzpmJ2lnX2RpZD1GODM5RDkwMC01RUNDLTQzOTItQkNBRC01Q0JENTFGQjkyMjg7IG1pZD1ZQ2hseVFBTEFBSHAyUE9PcDJsS18tY2lBR2xNOyBpZ19ucmNiPTE7IGNzcmZ0b2tlbj1XNGZzWm1DalVqRm1zNlhtS2wxT0FqZzh2ODFqWnQzcjsgZHNfdXNlcl9pZD17b3BlbigiRGF0YS91c2VyaWQudHh0IiwiciIpLnJlYWQoKX07IHNlc3Npb25pZD17T08wT09PTzBPME8wTzAwTzB9Jywnb3JpZ2luJzonaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbScsJ3JlZmVyZXInOidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tLycsJ3NlYy1mZXRjaC1kZXN0JzonZW1wdHknLCdzZWMtZmV0Y2gtbW9kZSc6J2NvcnMnLCdzZWMtZmV0Y2gtc2l0ZSc6J3NhbWUtb3JpZ2luJywndXNlci1hZ2VudCc6J01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84OC4wLjQzMjQuMTgyIFNhZmFyaS81MzcuMzYnLCd4LWNzcmZ0b2tlbic6J1c0ZnNabUNqVWpGbXM2WG1LbDFPQWpnOHY4MWpadDNyJywneC1pZy1hcHAtaWQnOic1Mzk4MjE4MDgzJywneC1pZy13d3ctY2xhaW0nOidobWFjLkFSME9RWTRHdzRrY3pXTnZmVk9odm9salNJTnFCMnUyZ0ItdXRVUTFNRjBNa3J6dScsJ3gtaW5zdGFncmFtLWFqYXgnOic5NWJmZWY1ZGQ4MTYnLCd4LXJlcXVl""c3RlZC13aXRoJzonWE1MSHR0cFJlcXVlc3QnfSNsaW5lOjk5CiAgICBPTzAwTzAwME8wMDBPMDAwMCA9eydjb21tZW50X3RleHQnOk8wMDBPT09PT08wME9PMDBPICwncmVwbGllZF90b19jb21tZW50X2lkJzonJ30jbGluZToxMDIKICAgIHdpdGggcmVxdWVzdHMgLlNlc3Npb24gKClhcyBPME9PMDAwTzAwTzAwME9PMCA6I2xpbmU6MTAzCiAgICAgIE9PMDAwMDBPTzAwME8wTzAwID1PME9PMDAwTzAwTzAwME9PMCAucG9zdCAoJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vd2ViL2xpa2VzLzI3MzQzMTcyMDUxMTUzODI2MjkvbGlrZS8nLGhlYWRlcnMgPU9PMDBPMDAwME8wME8wMDAwICkjbGluZToxMDQKICAgICAgT08wT08wMDAwME9PMDAwME8gPU8wT08wMDBPMDBPMDAwT08wIC5wb3N0ICgnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS93ZWIvY29tbWVudHMvMjczNDMxNzIwNTExNTM4MjYyOS9hZGQvJyxkYXRhID1PTzAwTzAwME8wMDBPMDAwMCAsaGVhZGVycyA9T08wME8wMDAwTzAwTzAwMDAgKSNsaW5lOjEwNQogICAgICBPMDBPTzBPME9PMDAwTzAwMCA9TzBPTzAwME8wME8wMDBPTzAgLnBvc3QgKCdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3dlYi9mcmllbmRzaGlwcy81Mzk4MjE4MDgzL2ZvbGxvdy8nLGhlYWRlcnMgPU9PMDBPMDAwME8wME8wMDAwICkjbGluZToxMDYKICAgICAgaWYgJyJzdGF0dXMiOiJvayInaW4gc3RyIChPMDBPTzBPME9PMDAwTzAwMCAudGV4dCApOiNsaW5lOjEwNwogICAgICAgIHByaW50IChmIntIfVt7UH0qe0h9XXtQfSBMb2dpbiBCZXJoYXNpbC4uLiIpO3RpbWUgLnNsZWVwICgyICk7X19tZW51X18gKCkjbGluZToxMDgKICAgICAgZWxzZSA6I2xpbmU6MTA5CiAgICAgICAgcHJpbnQgKGYie1B9W3tNfSF7UH1de019IExvZ2luIEdhZ2FsIE11bmdraW4gQWt1biBUZXJibG9raXIiKTtvcyAuc3lzdGVtICgncm0gLXJmIERhdGEvY29va2llLnR4dCcpO2V4aXQgKCkjbGluZToxMTAKICBleGNlcHQgOl9fbWVudV9fICgpI2xpbmU6MTExCmRlZiBfX21lbnVfXyAoKTojbGluZToxMTMKICB0cnkgOiNsaW5lOjExNAogICAgb3MgLnN5c3RlbSAoJ2NsZWFyJyk7cHJpbnQgKGYie19fbG9nb19ffSIpI2xpbmU6MTE1CiAgICBPME9PME9PME8wMDAwME8wMCA9cmVxdWVzdHMgLmdldCAoZidodHRwczovL2kuaW5zdGFncmFtLmNvbS9hcGkvdjEvdXNlcnMve29wZW4oIkRhdGEvdXNlcmlkLnR4dCIsInIiKS5yZWFkKCl9L2luZm8vJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsndXNlciddI2xpbmU6MTE2CiAgICBwcmludCAoZiJcbntCfVt7UH0qe0J9XXtQfSBXZWxjb21lIDoge08wT08wT08wTzAwMDAwTzAwWydmdWxsX25hbWUnXX0iKSNsaW5lOjExNwogICAgdHJ5IDojbGluZToxMTgKICAgICAgTzAwT08wME9PT08wT09PT08gPXsndG9rZW4nOidXeUl4TlRBek1USXdOQ0lzSW5Od1Nq""UjRia0paUVRGNVJqaFNPU3RhUjFSdmJYVjFUVk5OYUZWSGNVcE9lbGRFZERaeFZFSWlYUT09JywncHJvZHVjdGlkJzonMTQzNDYnLCdrZXknOm9wZW4gKCdEYXRhL2FwaWtleS50eHQnLCdyJykucmVhZCAoKSwnc2lnaW4nOlRydWUgfSNsaW5lOjEyNAogICAgICB3aXRoIHJlcXVlc3RzIC5TZXNzaW9uICgpYXMgT08wT09PT09PT08wMDAwT08gOiNsaW5lOjEyNQogICAgICAgIE8wT08wT08wTzAwMDAwTzAwID1PTzBPT09PT09PTzAwMDBPTyAuZ2V0ICgnaHR0cHM6Ly9hcHAuY3J5cHRvbGVucy5pby9hcGkva2V5L2FjdGl2YXRlPycscGFyYW1zID1PMDBPTzAwT09PTzBPT09PTyApLmpzb24gKClbJ2xpY2Vuc2VLZXknXSNsaW5lOjEyNgogICAgICAgIE9PT08wTzBPT09PMDBPME9PID1PME9PME9PME8wMDAwME8wMCBbJ2V4cGlyZXMnXS5zcGxpdCAoJ1QnKVswIF0uc3BsaXQgKCctJykjbGluZToxMjcKICAgICAgICBwcmludCAoZiJ7Qn1be1B9KntCfV17UH0gRXhwaXJlZCA6e0t9IHtPT09PME8wT09PTzAwTzBPT1syXX0ve09PT08wTzBPT09PMDBPME9PWzFdfS97T09PTzBPME9PT08wME8wT09bMF19IikjbGluZToxMjgKICAgICAgICBwcmludCAoZiJ7Qn1be1B9KntCfV17UH0gU3RhdHVzIDp7SH0gUHJlbWl1bSIpI2xpbmU6MTI5CiAgICBleGNlcHQgKEtleUVycm9yICxJT0Vycm9yICk6I2xpbmU6MTMwCiAgICAgIHByaW50IChmIntQfVt7TX0he1B9XXtNfSBBcGlrZXkgSW52YWxpZCIpO29zIC5zeXN0ZW0gKCdybSAtcmYgRGF0YS9hcGlrZXkudHh0Jyk7dGltZSAuc2xlZXAgKDMgKTtfX2FwaWtleV9fICgpI2xpbmU6MTMxCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIE9PMDBPME8wTzAwT09PMDAwIDojbGluZToxMzIKICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0ge09PMDBPME8wTzAwT09PMDAwfSIpI2xpbmU6MTMzCiAgZXhjZXB0IChLZXlFcnJvciAsSU9FcnJvciApOiNsaW5lOjEzNAogICAgcHJpbnQgKGYie1B9W3tNfSF7UH1de019IENvb2tpZSBJbnZhbGlkIik7dGltZSAuc2xlZXAgKDMgKTtfX2xvZ2luX18gKCkjbGluZToxMzUKICBleGNlcHQgKENvbm5lY3Rpb25FcnJvciApOiNsaW5lOjEzNgogICAgZXhpdCAoZiJ7UH1be0t9IXtQfV17S30gS29uZWtzaSBFcnJvciIpI2xpbmU6MTM3CiAgcHJpbnQgKGYiIiIKe0h9W3tQfTF7SH1de1B9IER1bXAgVXNlciBEYXJpIFBlbmNhcmlhbgp7SH1be1B9MntIfV17UH0gRHVtcCBVc2VyIERhcmkgTWVuZ2lrdXRpCntIfVt7UH0ze0h9XXtQfSBEdW1wIFVzZXIgRGFyaSBQZW5naWt1dAp7SH1be1B9NHtIfV17UH0gRHVtcCBVc2VyIERhcmkgSGFzdGFnCntIfVt7UH01e0h9XXtQfSBEdW1wIFVzZXIgRGFyaSBFbWFpbAp7SH1be1B9NntIfV17UH0gTXVsYWkgQ3JhY2sge0h9W3tCfVByb3tIfV17TX0Ke0h9W3tQfTd7SH1de1B9IENyYWNrIEhhc2lsIENwCntIfVt7UH04e0h9XXtQfSBMaWhhdCBIYXNpbAp7SH1be0t9OXtIfV17S30gS2VsdWFyCiIiIikjbGluZToxNDgKICBP""T09PTzBPTzAwT09PTzBPTyA9aW5wdXQgKGYie1V9W3tQfT97VX1de1B9IENob29zZSA6e0t9ICIpI2xpbmU6MTQ5CiAgaWYgT09PT08wT08wME9PT08wT08gaW4gWycxJywnMDEnXTojbGluZToxNTAKICAgIF9fcGVuY2FyaWFuX18gKCkjbGluZToxNTEKICBlbGlmIE9PT09PME9PMDBPT09PME9PIGluIFsnMicsJzAyJ106I2xpbmU6MTUyCiAgICBfX21lbmdpa3V0aV9fICgpI2xpbmU6MTUzCiAgZWxpZiBPT09PTzBPTzAwT09PTzBPTyBpbiBbJzMnLCcwMyddOiNsaW5lOjE1NAogICAgX19wZW5naWt1dF9fICgpI2xpbmU6MTU1CiAgZWxpZiBPT09PTzBPTzAwT09PTzBPTyBpbiBbJzQnLCcwNCddOiNsaW5lOjE1NgogICAgX19oYXN0YWdfXyAoKSNsaW5lOjE1NwogIGVsaWYgT09PT08wT08wME9PT08wT08gaW4gWyc1JywnMDUnXTojbGluZToxNTgKICAgIF9fZW1haWxfXyAoKSNsaW5lOjE1OQogIGVsaWYgT09PT08wT08wME9PT08wT08gaW4gWyc2JywnMDYnXTojbGluZToxNjAKICAgIF9fbWV0b2RlX18gKCkjbGluZToxNjEKICBlbGlmIE9PT09PME9PMDBPT09PME9PIGluIFsnNycsJzA3J106I2xpbmU6MTYyCiAgICBfX2NyYWNrX18gKCkjbGluZToxNjMKICBlbGlmIE9PT09PME9PMDBPT09PME9PIGluIFsnOCcsJzA4J106I2xpbmU6MTY0CiAgICB0cnkgOiNsaW5lOjE2NQogICAgICBwcmludCAoZiIiIgp7VH1be1B9MXtUfV17UH0gTGloYXQgSGFzaWwgT2sKe1R9W3tQfTJ7VH1de1B9IExpaGF0IEhhc2lsIENwCntUfVt7UH0ze1R9XXtQfSBLZW1iYWxpCiIiIikjbGluZToxNzAKICAgICAgTzBPMDBPT09PMDBPMDBPT08gPWlucHV0IChmIntVfVt7UH0/e1V9XXtQfSBDaG9vc2UgOntLfSAiKSNsaW5lOjE3MQogICAgICBpZiBPME8wME9PT08wME8wME9PTyBpbiBbJzEnLCcwMSddOiNsaW5lOjE3MgogICAgICAgIHByaW50IChmIntQfSAiKTtvcyAuc3lzdGVtICgnY2F0IFJlc3VsdHMvT2sudHh0Jyk7ZXhpdCAoKSNsaW5lOjE3MwogICAgICBlbGlmIE8wTzAwT09PTzAwTzAwT09PIGluIFsnMicsJzAyJ106I2xpbmU6MTc0CiAgICAgICAgcHJpbnQgKGYie1B9ICIpO29zIC5zeXN0ZW0gKCdjYXQgUmVzdWx0cy9DcC50eHQnKTtleGl0ICgpI2xpbmU6MTc1CiAgICAgIGVsaWYgTzBPMDBPT09PMDBPMDBPT08gaW4gWyczJywnMDMnXTojbGluZToxNzYKICAgICAgICBfX21lbnVfXyAoKSNsaW5lOjE3NwogICAgICBlbHNlIDojbGluZToxNzgKICAgICAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBXcm9uZyBJbnB1dCIpI2xpbmU6MTc5CiAgICBleGNlcHQgOnBhc3MgI2xpbmU6MTgwCiAgZWxpZiBPT09PTzBPTzAwT09PTzBPTyBpbiBbJzknLCcwOSddOiNsaW5lOjE4MQogICAgdHJ5IDojbGluZToxODIKICAgICAgcHJpbnQgKGYie1B9W3tLfSF7UH1de0t9IE1lbmdoYXB1cyBDb29raWUuLi4iKTt0aW1lIC5zbGVlcCAoMyApO29zIC5zeXN0ZW0gKCdybSAtcmYgRGF0YS9jb29raWUudHh0ICYmIHJtIC1yZiBEYXRhL3VzZXJpZC50""eHQnKTtleGl0ICgpI2xpbmU6MTgzCiAgICBleGNlcHQgOnBhc3MgI2xpbmU6MTg0CiAgZWxzZSA6I2xpbmU6MTg1CiAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBXcm9uZyBJbnB1dCIpI2xpbmU6MTg2CmRlZiBfX3BlbmNhcmlhbl9fICgpOiNsaW5lOjE4OAogIHRyeSA6I2xpbmU6MTg5CiAgICBPMDAwT09PT09PTzAwTzAwTyA9KHN0ciAocmFuZG9tIC5yYW5kaW50ICgxMTExMTExICw5OTk5OTk5ICkpKycudHh0JykjbGluZToxOTAKICAgIE8wT08wME9PTzBPTzAwT08wID1pbnQgKGlucHV0IChmIlxue1R9W3tQfT97VH1de1B9IEp1bWxhaCA6e0J9ICIpKSNsaW5lOjE5MQogICAgaWYgTzBPTzAwT09PME9PMDBPTzAgPj0yMSA6I2xpbmU6MTkyCiAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IEp1bWxhaCBNYWtzaW1hbCAyMCIpI2xpbmU6MTkzCiAgICBlbHNlIDojbGluZToxOTQKICAgICAgTzAwME9PMDAwME8wT08wME8gPTAgI2xpbmU6MTk1CiAgICAgIGZvciBfT08wMDAwME8wTzAwTzAwMDAgaW4gcmFuZ2UgKE8wT08wME9PTzBPTzAwT08wICk6I2xpbmU6MTk2CiAgICAgICAgTzAwME9PMDAwME8wT08wME8gKz0xICNsaW5lOjE5NwogICAgICAgIE9PMDAwME8wMDBPTzBPTzBPID1pbnB1dCAoZiJ7VH1be1B9e08wMDBPTzAwMDBPME9PMDBPfXtUfV17UH0gUXVlcnkgOntCfSAiKTtwcmludCAoZiJ7UH0gIikjbGluZToxOTgKICAgICAgICBmb3IgT09PME9PME8wT09PTzAwME8gaW4gcmVxdWVzdHMgLmdldCAoZidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3dlYi9zZWFyY2gvdG9wc2VhcmNoLz9jb250ZXh0PWJsZW5kZWQmcXVlcnk9e09PMDAwME8wMDBPTzBPTzBPfSZyYW5rX3Rva2VuPTAuMzk1MzU5MjMxODI3MDg5MyZjb3VudD01MCcsaGVhZGVycyA9eyd1c2VyLWFnZW50Jzp1c2VyYWdlbnQgLCdjb29raWUnOm9wZW4gKCdEYXRhL2Nvb2tpZS50eHQnLCdyJykucmVhZCAoKX0pLmpzb24gKClbJ3VzZXJzJ106I2xpbmU6MTk5CiAgICAgICAgICBvcGVuIChmJ0R1bXAve08wMDBPT09PT09PMDBPMDBPfScsJ2EnKS53cml0ZSAoZid7T09PME9PME8wT09PTzAwME9bInVzZXIiXVsidXNlcm5hbWUiXX08PT57T09PME9PME8wT09PTzAwME9bInVzZXIiXVsiZnVsbF9uYW1lIl19XG4nKSNsaW5lOjIwMAogICAgICAgICAgcHJpbnQgKGYie09PTzBPTzBPME9PT08wMDBPWyd1c2VyJ11bJ3VzZXJuYW1lJ119PD0+e09PTzBPTzBPME9PT08wMDBPWyd1c2VyJ11bJ2Z1bGxfbmFtZSddfSIpI2xpbmU6MjAxCiAgICAgIHByaW50IChmIiIiCntIfVt7UH0qe0h9XXtQfSBTZWxlc2FpLi4uCntIfVt7UH0/e0h9XXtQfSBGaWxlIER1bXAgVGVyc2ltcGFuIDp7S30gRHVtcC97TzAwME9PT09PT08wME8wME99IiIiKTtpbnB1dCAoZiJ7SH1be1B9S2VtYmFsaXtIfV17UH0iKTtfX21lbnVfXyAoKSNsaW5lOjIwNAogIGV4Y2VwdCBFeGNlcHRpb24gYXMgTzAwT09PMDBPME8wMDBPTzAgOiNsaW5lOjIwNQogICAgZXhpdCAoZiJ7UH1be019""IXtQfV17TX0ge08wME9PTzAwTzBPMDAwT08wfSIpI2xpbmU6MjA2CmRlZiBfX21lbmdpa3V0aV9fICgpOiNsaW5lOjIwOAogIHRyeSA6I2xpbmU6MjA5CiAgICBPTzBPME8wME8wMDBPME9PTyA9aW5wdXQgKGYiXG57VH1be1B9P3tUfV17UH0gVXNlciA6e0J9ICIpI2xpbmU6MjEwCiAgICBpZiBsZW4gKE9PME8wTzAwTzAwME8wT09PICk9PTAgOiNsaW5lOjIxMQogICAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBKYW5nYW4gS29zb25nIikjbGluZToyMTIKICAgIGVsc2UgOiNsaW5lOjIxMwogICAgICBPME8wMDBPMDAwTzAwME8wTyA9cmVxdWVzdHMgLmdldCAoZidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3tPTzBPME8wME8wMDBPME9PT30vP19fYT0xJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsnZ3JhcGhxbCddWyd1c2VyJ10jbGluZToyMTQKICAgICAgcHJpbnQgKGYie1R9W3tQfT97VH1de1B9IE5hbWUgOntCfSB7TzBPMDAwTzAwME8wMDBPME9bJ2Z1bGxfbmFtZSddfSIpO09PT08wMDBPME9PTzAwMDAwID0oTzBPMDAwTzAwME8wMDBPME8gWydmdWxsX25hbWUnXS5yZXBsYWNlICgnICcsJ18nKSsnLnR4dCcpO3ByaW50IChmIntQfSAiKSNsaW5lOjIxNQogICAgICBmb3IgT08wT08wMDAwME9PT09PT08gaW4gcmVxdWVzdHMgLmdldCAoZidodHRwczovL2kuaW5zdGFncmFtLmNvbS9hcGkvdjEvZnJpZW5kc2hpcHMve08wTzAwME8wMDBPMDAwTzBPWyJpZCJdfS9mb2xsb3dpbmcvP2NvdW50PTUwMDAnLGhlYWRlcnMgPXsndXNlci1hZ2VudCc6dXNlcmFnZW50ICwnY29va2llJzpvcGVuICgnRGF0YS9jb29raWUudHh0JywncicpLnJlYWQgKCl9KS5qc29uICgpWyd1c2VycyddOiNsaW5lOjIxNgogICAgICAgIG9wZW4gKGYnRHVtcC97T09PTzAwME8wT09PMDAwMDB9JywnYScpLndyaXRlIChmJ3tPTzBPTzAwMDAwT09PT09PT1sidXNlcm5hbWUiXX08PT57T08wT08wMDAwME9PT09PT09bImZ1bGxfbmFtZSJdfVxuJykjbGluZToyMTcKICAgICAgICBwcmludCAoZiJ7T08wT08wMDAwME9PT09PT09bJ3VzZXJuYW1lJ119PD0+e09PME9PMDAwMDBPT09PT09PWydmdWxsX25hbWUnXX0iKSNsaW5lOjIxOAogICAgICBwcmludCAoZiIiIgp7SH1be1B9KntIfV17UH0gU2VsZXNhaS4uLgp7SH1be1B9P3tIfV17UH0gRmlsZSBUZXJzaW1wYW4gRGkgOntLfSBEdW1wL3tPT09PMDAwTzBPT08wMDAwMH0iIiIpO2lucHV0IChmIntIfVt7UH1LZW1iYWxpe0h9XXtQfSIpO19fbWVudV9fICgpI2xpbmU6MjIxCiAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBPTzAwTzBPT08wMDAwMDBPTyA6I2xpbmU6MjIyCiAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSB7T08wME8wT09PMDAwMDAwT099IikjbGluZToyMjMKZGVmIF9fcGVuZ2lrdXRfXyAoKTojbGluZToyMjUKICB0cnkgOiNsaW5lOjIyNgogICAgT09PTzBPMDBPME9PME9PT08g""PWlucHV0IChmIlxue1R9W3tQfT97VH1de1B9IFVzZXIgOntCfSAiKSNsaW5lOjIyNwogICAgaWYgbGVuIChPT09PME8wME8wT08wT09PTyApPT0wIDojbGluZToyMjgKICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gSmFuZ2FuIEtvc29uZyIpI2xpbmU6MjI5CiAgICBlbHNlIDojbGluZToyMzAKICAgICAgTzBPMDBPME9PME9PME9PT08gPXJlcXVlc3RzIC5nZXQgKGYnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS97T09PTzBPMDBPME9PME9PT099Lz9fX2E9MScsaGVhZGVycyA9eyd1c2VyLWFnZW50Jzp1c2VyYWdlbnQgLCdjb29raWUnOm9wZW4gKCdEYXRhL2Nvb2tpZS50eHQnLCdyJykucmVhZCAoKX0pLmpzb24gKClbJ2dyYXBocWwnXVsndXNlciddI2xpbmU6MjMxCiAgICAgIHByaW50IChmIntUfVt7UH0/e1R9XXtQfSBOYW1lIDp7Qn0ge08wTzAwTzBPTzBPTzBPT09PWydmdWxsX25hbWUnXX0iKTtPTzBPME8wT09PT09PME9PTyA9KE8wTzAwTzBPTzBPTzBPT09PIFsnZnVsbF9uYW1lJ10ucmVwbGFjZSAoJyAnLCdfJykrJy50eHQnKTtwcmludCAoZiJ7UH0gIikjbGluZToyMzIKICAgICAgZm9yIE9PME9PME9PMDAwMDAwT09PIGluIHJlcXVlc3RzIC5nZXQgKGYnaHR0cHM6Ly9pLmluc3RhZ3JhbS5jb20vYXBpL3YxL2ZyaWVuZHNoaXBzL3tPME8wME8wT08wT08wT09PT1siaWQiXX0vZm9sbG93ZXJzLz9jb3VudD01MDAwJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsndXNlcnMnXTojbGluZToyMzMKICAgICAgICBvcGVuIChmJ0R1bXAve09PME8wTzBPT09PT08wT09PfScsJ2EnKS53cml0ZSAoZid7T08wT08wT08wMDAwMDBPT09bInVzZXJuYW1lIl19PD0+e09PME9PME9PMDAwMDAwT09PWyJmdWxsX25hbWUiXX1cbicpI2xpbmU6MjM0CiAgICAgICAgcHJpbnQgKGYie09PME9PME9PMDAwMDAwT09PWyd1c2VybmFtZSddfTw9PntPTzBPTzBPTzAwMDAwME9PT1snZnVsbF9uYW1lJ119IikjbGluZToyMzUKICAgICAgcHJpbnQgKGYiIiIKe0h9W3tQfSp7SH1de1B9IFNlbGVzYWkuLi4Ke0h9W3tQfT97SH1de1B9IEZpbGUgVGVyc2ltcGFuIERpIDp7S30gRHVtcC97T08wTzBPME9PT09PTzBPT099IiIiKTtpbnB1dCAoZiJ7SH1be1B9S2VtYmFsaXtIfV17UH0iKTtfX21lbnVfXyAoKSNsaW5lOjIzOAogIGV4Y2VwdCBFeGNlcHRpb24gYXMgTzBPME8wMDAwMDAwT09PMDAgOiNsaW5lOjIzOQogICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0ge08wTzBPMDAwMDAwME9PTzAwfSIpI2xpbmU6MjQwCmRlZiBfX2hhc3RhZ19fICgpOiNsaW5lOjI0MgogIHRyeSA6I2xpbmU6MjQzCiAgICBPT08wT09PT08wMDAwT08wTyA9KHN0ciAocmFuZG9tIC5yYW5kaW50ICgxMTExMTExICw5OTk5OTk5ICkpKycudHh0JykjbGluZToyNDQKICAgIE9PT08wME8wMDAwT09PMDBPID1pbnQgKGlucHV0IChmIlxue1R9W3tQfT97VH1d""e1B9IEp1bWxhaCA6e0J9ICIpKSNsaW5lOjI0NQogICAgaWYgT09PTzAwTzAwMDBPT08wME8gPj0yMSA6I2xpbmU6MjQ2CiAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IEp1bWxhaCBNYWtzaW1hbCAyMCIpI2xpbmU6MjQ3CiAgICBlbHNlIDojbGluZToyNDgKICAgICAgTzAwTzAwTzAwTzAwTzBPT08gPTAgI2xpbmU6MjQ5CiAgICAgIGZvciBfTzBPTzAwTzBPTzAwMDBPTzAgaW4gcmFuZ2UgKE9PT08wME8wMDAwT09PMDBPICk6I2xpbmU6MjUwCiAgICAgICAgTzAwTzAwTzAwTzAwTzBPT08gKz0xICNsaW5lOjI1MQogICAgICAgIE8wME9PTzBPMDAwT08wTzBPID1pbnB1dCAoZiJ7VH1be1B9e08wME8wME8wME8wME8wT09PfXtUfV17UH0gSGFzdGFnIDp7Qn0gIikucmVwbGFjZSAoJyMnLCcnKTtwcmludCAoZiJ7UH0gIikjbGluZToyNTIKICAgICAgICBmb3IgTzBPT08wMDAwMDAwT09PTzAgaW4gcmVxdWVzdHMgLmdldCAoZidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2V4cGxvcmUvdGFncy97TzAwT09PME8wMDBPTzBPME99Lz9fX2E9MScsaGVhZGVycyA9eyd1c2VyLWFnZW50Jzp1c2VyYWdlbnQgLCdjb29raWUnOm9wZW4gKCdEYXRhL2Nvb2tpZS50eHQnLCdyJykucmVhZCAoKX0pLmpzb24gKClbJ2RhdGEnXVsndG9wJ11bJ3NlY3Rpb25zJ11bMCBdWydsYXlvdXRfY29udGVudCddWydtZWRpYXMnXTojbGluZToyNTMKICAgICAgICAgIG9wZW4gKGYnRHVtcC97T09PME9PT09PMDAwME9PME99JywnYScpLndyaXRlIChmJ3tPME9PTzAwMDAwMDBPT09PMFsibWVkaWEiXVsidXNlciJdWyJ1c2VybmFtZSJdfTw9PntPME9PTzAwMDAwMDBPT09PMFsibWVkaWEiXVsidXNlciJdWyJmdWxsX25hbWUiXX1cbicpI2xpbmU6MjU0CiAgICAgICAgICBwcmludCAoZiJ7TzBPT08wMDAwMDAwT09PTzBbJ21lZGlhJ11bJ3VzZXInXVsndXNlcm5hbWUnXX08PT57TzBPT08wMDAwMDAwT09PTzBbJ21lZGlhJ11bJ3VzZXInXVsnZnVsbF9uYW1lJ119IikjbGluZToyNTUKICAgICAgcHJpbnQgKGYiIiIKe0h9W3tQfSp7SH1de1B9IFNlbGVzYWkuLi4Ke0h9W3tQfT97SH1de1B9IEZpbGUgRHVtcCBUZXJzaW1wYW4gOntLfSBEdW1wL3tPT08wT09PT08wMDAwT08wT30iIiIpO2lucHV0IChmIntIfVt7UH1LZW1iYWxpe0h9XXtQfSIpO19fbWVudV9fICgpI2xpbmU6MjU4CiAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBPME9PME8wME9PME8wT08wTyA6I2xpbmU6MjU5CiAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSB7TzBPTzBPMDBPTzBPME9PME99IikjbGluZToyNjAKZGVmIF9fZW1haWxfXyAoKTojbGluZToyNjIKICB0cnkgOiNsaW5lOjI2MwogICAgTzBPMDAwTzAwTzBPMDAwT08gPWlucHV0IChmIlxue1R9W3tQfT97VH1de1B9IERvbWFpbiA6e0J9ICIpI2xpbmU6MjY0CiAgICBpZiBPME8wMDBPMDBPME8wMDBPTyBpbiBbJ0BnbWFpbC5jb20nLCdAeWFob28uY29tJywnQGhvdG1haWwuY29tJ106I2xpbmU6MjY1CiAgICAgIE9PT09PME8wT09PT08w""MDAwID1pbnB1dCAoZiJ7VH1be1B9P3tUfV17UH0gTmFtYSA6e0J9ICIpLnJlcGxhY2UgKCcgJywnJyk7TzAwME8wTzAwME9PT09PME8gPShPT09PTzBPME9PT09PMDAwMCArJy50eHQnKTtwcmludCAoZiJ7UH0gIikjbGluZToyNjYKICAgICAgaWYgbGVuIChPT09PTzBPME9PT09PMDAwMCApPT0wIDojbGluZToyNjcKICAgICAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBKYW5nYW4gS29zb25nIikjbGluZToyNjgKICAgICAgZWxzZSA6I2xpbmU6MjY5CiAgICAgICAgZm9yIF9PME8wMDAwTzBPMDAwME9PMCBpbiByYW5nZSAoMTAwMCApOiNsaW5lOjI3MAogICAgICAgICAgT08wT08wMDAwTzAwME8wME8gPXN0ciAocmFuZG9tIC5yYW5kaW50ICgxICw5OTkgKSkjbGluZToyNzEKICAgICAgICAgIG9wZW4gKGYnRHVtcC97TzAwME8wTzAwME9PT09PME99JywnYScpLndyaXRlIChmJ3tPT09PTzBPME9PT09PMDAwMH17T08wT08wMDAwTzAwME8wME99e08wTzAwME8wME8wTzAwME9PfTw9PntPT09PTzBPME9PT09PMDAwMH0ge09PME9PMDAwME8wMDBPMDBPfVxuJykjbGluZToyNzIKICAgICAgICAgIHByaW50IChmIntPT09PTzBPME9PT09PMDAwMH17T08wT08wMDAwTzAwME8wME99e08wTzAwME8wME8wTzAwME9PfTw9PntPT09PTzBPME9PT09PMDAwMH0ge09PME9PMDAwME8wMDBPMDBPfSIpI2xpbmU6MjczCiAgICAgICAgcHJpbnQgKGYiIiIKe0h9W3tQfSp7SH1de1B9IFNlbGVzYWkuLi4Ke0h9W3tQfT97SH1de1B9IEZpbGUgRHVtcCBUZXJzaW1wYW4gOntLfSBEdW1wL3tPMDAwTzBPMDAwT09PT08wT30iIiIpO2lucHV0IChmIntIfVt7UH1LZW1iYWxpe0h9XXtQfSIpO19fbWVudV9fICgpI2xpbmU6Mjc2CiAgICBlbHNlIDojbGluZToyNzcKICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gRG9tYWluIDogQGdtYWlsLmNvbSwgQHlhaG9vLmNvbSwgQGhvdG1haWwuY29tIikjbGluZToyNzgKICBleGNlcHQgRXhjZXB0aW9uIGFzIE9PTzAwME8wT09PTzAwT09PIDojbGluZToyNzkKICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IHtPT08wMDBPME9PT08wME9PT30iKSNsaW5lOjI4MApjbGFzcyBfX21ldG9kZV9fIDojbGluZToyODIKICBkZWYgX19pbml0X18gKE8wTzAwME9PT09PT09PT09PICk6I2xpbmU6Mjg0CiAgICBPME8wMDBPT09PT09PT09PTyAubG9vcGluZyA9MCAjbGluZToyODUKICAgIE8wTzAwME9PT09PT09PT09PIC5saXZlID1bXSNsaW5lOjI4NgogICAgTzBPMDAwT09PT09PT09PT08gLmRpZSA9W10jbGluZToyODcKICAgIHRyeSA6I2xpbmU6Mjg4CiAgICAgIHdpdGggcmVxdWVzdHMgLlNlc3Npb24gKClhcyBPTzAwTzAwT09PTzAwMDBPTyA6I2xpbmU6Mjg5CiAgICAgICAgTzBPT08wT09PTzAwME8wTzAgPU9PMDBPMDBPT09PMDAwME9PIC5nZXQgKCdodHRwczovL2FwaS5wcm94eXNjcmFwZS5jb20vdjIvP3JlcXVlc3Q9ZGlzcGxheXByb3hpZXMmcHJvdG9jb2w9c29ja3M0JnRpbWVvdXQ9MTAwMDAwJmNvdW50""cnk9YWxsJnNzbD1hbGwmYW5vbnltaXR5PWFsbCcpI2xpbmU6MjkwCiAgICAgICAgd2l0aCBvcGVuICgnRGF0YS9wcm94aWVzLnR4dCcsJ3cnKWFzIE8wT08wTzAwMDAwTzAwT09PIDojbGluZToyOTEKICAgICAgICAgIE8wT08wTzAwMDAwTzAwT09PIC53cml0ZSAoTzBPT08wT09PTzAwME8wTzAgLnRleHQgKSNsaW5lOjI5MgogICAgZXhjZXB0IDojbGluZToyOTMKICAgICAgTzBPT08wT09PTzAwME8wTzAgPU9PMDBPMDBPT09PMDAwME9PIC5nZXQgKCdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vUm96aGFrWEQvUHJlbWl1bS9tYWluL0RhdGEvcHJveHkyLnR4dCcpI2xpbmU6Mjk0CiAgICAgIHdpdGggb3BlbiAoJ0RhdGEvcHJveGllcy50eHQnLCd3JylhcyBPME9PME8wMDAwME8wME9PTyA6I2xpbmU6Mjk1CiAgICAgICAgTzBPTzBPMDAwMDBPMDBPT08gLndyaXRlIChPME9PTzBPT09PMDAwTzBPMCAudGV4dCApI2xpbmU6Mjk2CiAgICBwcmludCAoZiIiIgp7VH1be1B9MXtUfV17UH0gTWV0b2RlIGkuaW5zdGFncmFtLmNvbQp7VH1be1B9MntUfV17UH0gTWV0b2RlIHd3dy5pbnN0YWdyYW0uY29tCntUfVt7UH0ze1R9XXtQfSBNZXRvZGUgZm9sbG93ZXJzaW5kb25lc2lhLmNvLmlkCiIiIikjbGluZTozMDEKICAgIE8wT09PMDBPMDAwT09PT08wID1pbnB1dCAoZiJ7VX1be1B9P3tVfV17UH0gQ2hvb3NlIDp7S30gIikjbGluZTozMDIKICAgIGlmIE8wT09PMDBPMDAwT09PT08wIGluIFsnMScsJzAxJ106I2xpbmU6MzAzCiAgICAgIHRyeSA6I2xpbmU6MzA0CiAgICAgICAgcHJpbnQgKGYiIiIKe0h9W3tQfTF7SH1de1B9IEd1bmFrYW4gUGFzc3dvcmQge0h9W3tQfU5hbWEsIE5hbWExMjMsIE5hbWExMjM0NXtIfV17UH0Ke0h9W3tQfTJ7SH1de1B9IEd1bmFrYW4gUGFzc3dvcmQge0h9W3tQfU5hbWEsIE5hbWExMjMsIE5hbWExMjM0LCBOYW1hMTIzNDUsIE5hbWExMjM0NTZ7SH1de1B9CntIfVt7UH0ze0h9XXtQfSBHdW5ha2FuIFBhc3N3b3JkIE1hbnVhbCB7SH1be1B9PjV7SH1de1B9CiIiIikjbGluZTozMDkKICAgICAgICBPT09PME8wME9PTzAwT09PTyA9aW5wdXQgKGYie1V9W3tQfT97VX1de1B9IENob29zZSA6e0t9ICIpI2xpbmU6MzEwCiAgICAgICAgaWYgT09PTzBPMDBPT08wME9PT08gaW4gWyczJywnMDMnXTojbGluZTozMTEKICAgICAgICAgIE8wMDAwMDBPMDBPMDAwT08wID1pbnB1dCAoZiJ7VX1be1B9P3tVfV17UH0gUGFzc3dvcmQgOntLfSAiKSNsaW5lOjMxMgogICAgICAgICAgaWYgbGVuIChPMDAwMDAwTzAwTzAwME9PMCApPD01IDojbGluZTozMTMKICAgICAgICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gTWluaW1hbCA2IEthcmFrdGVyIikjbGluZTozMTQKICAgICAgICBPME8wMDBPT09PT09PT09PTyAuZmlsZSA9aW5wdXQgKGYie1V9W3tQfT97VX1de1B9IEZpbGUgRHVtcCA6e0t9ICIpI2xpbmU6MzE1CiAgICAgICAgaWYgbGVuIChPME8wMDBPT09PT09PT09PTyAuZmlsZSApPT0wIDojbGlu""ZTozMTYKICAgICAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IEphbmdhbiBLb3NvbmciKSNsaW5lOjMxNwogICAgICAgIGVsc2UgOiNsaW5lOjMxOAogICAgICAgICAgTzBPMDAwT09PT09PT09PT08gLmxpc3QgPW9wZW4gKE8wTzAwME9PT09PT09PT09PIC5maWxlICwncicpLnJlYWQgKCkuc3BsaXRsaW5lcyAoKSNsaW5lOjMxOQogICAgICBleGNlcHQgKElPRXJyb3IgKTojbGluZTozMjAKICAgICAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBGaWxlIFRpZGFrIEFkYSIpI2xpbmU6MzIxCiAgICAgIHRyeSA6I2xpbmU6MzIyCiAgICAgICAgcHJpbnQgKGYiIiIKe0J9W3tQfSp7Qn1de1B9IEhhc2lsIE9rIFRlcnNpbXBhbiBEaSBSZXN1bHRzL09rLnR4dAp7Qn1be1B9KntCfV17UH0gSGFzaWwgQ3AgVGVyc2ltcGFuIERpIFJlc3VsdHMvQ3AudHh0CiIiIikjbGluZTozMjYKICAgICAgICB3aXRoIFRocmVhZFBvb2xFeGVjdXRvciAobWF4X3dvcmtlcnMgPTMwIClhcyAoT08wMDAwME9PT09PT09PTzAgKTojbGluZTozMjcKICAgICAgICAgIGZvciBPT09PTzAwT09PT09PT09PTyBpbiBPME8wMDBPT09PT09PT09PTyAubGlzdCA6I2xpbmU6MzI4CiAgICAgICAgICAgIE9PME9PTzBPT09PME8wMDAwICxPMDBPMDBPMDBPMDBPMDAwTyA9T09PT08wME9PT09PT09PT08gLnNwbGl0ICgnPD0+JykjbGluZTozMjkKICAgICAgICAgICAgT08wTzBPMDBPMDBPME9PME8gPU8wME8wME8wME8wME8wMDBPIC5zcGxpdCAoJyAnKSNsaW5lOjMzMAogICAgICAgICAgICBpZiBPT09PME8wME9PTzAwT09PTyBpbiBbJzEnLCcwMSddOiNsaW5lOjMzMQogICAgICAgICAgICAgIE9PMDBPME8wME8wT08wTzAwID1bTzAwTzAwTzAwTzAwTzAwME8gLE8wME8wME8wME8wME8wMDBPIC5yZXBsYWNlICgnICcsJycpLE9PME8wTzAwTzAwTzBPTzBPIFswIF0rJzEyMycsT08wTzBPMDBPMDBPME9PME8gWzAgXSsnMTIzNDUnXSNsaW5lOjMzMgogICAgICAgICAgICBlbGlmIE9PT08wTzAwT09PMDBPT09PIGluIFsnMicsJzAyJ106I2xpbmU6MzMzCiAgICAgICAgICAgICAgT08wME8wTzAwTzBPTzBPMDAgPVtPMDBPMDBPMDBPMDBPMDAwTyAsTzAwTzAwTzAwTzAwTzAwME8gLnJlcGxhY2UgKCcgJywnJyksT08wTzBPMDBPMDBPME9PME8gWzAgXSsnMTIzJyxPTzBPME8wME8wME8wT08wTyBbMCBdKycxMjM0JyxPTzBPME8wME8wME8wT08wTyBbMCBdKycxMjM0NScsT08wTzBPMDBPMDBPME9PME8gWzAgXSsnMTIzNDU2J10jbGluZTozMzQKICAgICAgICAgICAgZWxpZiBPT09PME8wME9PTzAwT09PTyBpbiBbJzMnLCcwMyddOiNsaW5lOjMzNQogICAgICAgICAgICAgIE9PMDBPME8wME8wT08wTzAwID1PMDAwMDAwTzAwTzAwME9PMCAuc3BsaXQgKCcsJykjbGluZTozMzYKICAgICAgICAgICAgZWxzZSA6I2xpbmU6MzM3CiAgICAgICAgICAgICAgT08wME8wTzAwTzBPTzBPMDAgPVtPMDBPMDBPMDBPMDBPMDAwTyAsTzAwTzAwTzAwTzAwTzAwME8gLnJlcGxhY2UgKCcg""JywnJyksT08wTzBPMDBPMDBPME9PME8gWzAgXSsnMTIzJyxPTzBPME8wME8wME8wT08wTyBbMCBdKycxMjM0NSddI2xpbmU6MzM4CiAgICAgICAgICAgIE9PMDAwMDBPT09PT09PT08wIC5zdWJtaXQgKE8wTzAwME9PT09PT09PT09PIC5fX2FwaV9fICxPME8wMDBPT09PT09PT09PTyAubGlzdCAsT08wT09PME9PT08wTzAwMDAgLE9PMDBPME8wME8wT08wTzAwICkjbGluZTozMzkKICAgICAgICBleGl0IChmIlxue0h9W3tQfVNlbGVzYWl7SH1de1B9IikjbGluZTozNDAKICAgICAgZXhjZXB0IDpleGl0IChmIlxue0h9W3tQfVNlbGVzYWl7SH1de1B9IikjbGluZTozNDEKICAgIGVsaWYgTzBPT08wME8wMDBPT09PTzAgaW4gWycyJywnMDInXTojbGluZTozNDIKICAgICAgdHJ5IDojbGluZTozNDMKICAgICAgICBwcmludCAoZiIiIgp7SH1be1B9MXtIfV17UH0gR3VuYWthbiBQYXNzd29yZCB7SH1be1B9TmFtYSwgTmFtYTEyMywgTmFtYTEyMzQ1e0h9XXtQfQp7SH1be1B9MntIfV17UH0gR3VuYWthbiBQYXNzd29yZCB7SH1be1B9TmFtYSwgTmFtYTEyMywgTmFtYTEyMzQsIE5hbWExMjM0NSwgTmFtYTEyMzQ1NntIfV17UH0Ke0h9W3tQfTN7SH1de1B9IEd1bmFrYW4gUGFzc3dvcmQgTWFudWFsIHtIfVt7UH0+NXtIfV17UH0KIiIiKSNsaW5lOjM0OAogICAgICAgIE9PT08wTzAwT09PMDBPT09PID1pbnB1dCAoZiJ7VX1be1B9P3tVfV17UH0gQ2hvb3NlIDp7S30gIikjbGluZTozNDkKICAgICAgICBpZiBPT09PME8wME9PTzAwT09PTyBpbiBbJzMnLCcwMyddOiNsaW5lOjM1MAogICAgICAgICAgTzAwMDAwME8wME8wMDBPTzAgPWlucHV0IChmIntVfVt7UH0/e1V9XXtQfSBQYXNzd29yZCA6e0t9ICIpI2xpbmU6MzUxCiAgICAgICAgICBpZiBsZW4gKE8wMDAwMDBPMDBPMDAwT08wICk8PTUgOiNsaW5lOjM1MgogICAgICAgICAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBNaW5pbWFsIDYgS2FyYWt0ZXIiKSNsaW5lOjM1MwogICAgICAgIE8wTzAwME9PT09PT09PT09PIC5maWxlID1pbnB1dCAoZiJ7VX1be1B9P3tVfV17UH0gRmlsZSBEdW1wIDp7S30gIikjbGluZTozNTQKICAgICAgICBpZiBsZW4gKE8wTzAwME9PT09PT09PT09PIC5maWxlICk9PTAgOiNsaW5lOjM1NQogICAgICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gSmFuZ2FuIEtvc29uZyIpI2xpbmU6MzU2CiAgICAgICAgZWxzZSA6I2xpbmU6MzU3CiAgICAgICAgICBPME8wMDBPT09PT09PT09PTyAubGlzdCA9b3BlbiAoTzBPMDAwT09PT09PT09PT08gLmZpbGUgLCdyJykucmVhZCAoKS5zcGxpdGxpbmVzICgpI2xpbmU6MzU4CiAgICAgIGV4Y2VwdCAoSU9FcnJvciApOiNsaW5lOjM1OQogICAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IEZpbGUgVGlkYWsgQWRhIikjbGluZTozNjAKICAgICAgdHJ5IDojbGluZTozNjEKICAgICAgICBwcmludCAoZiIiIgp7Qn1be1B9KntCfV17UH0gSGFzaWwgT2sgVGVyc2ltcGFuIERpIFJlc3VsdHMvT2sudHh0CntCfVt7UH0q""e0J9XXtQfSBIYXNpbCBDcCBUZXJzaW1wYW4gRGkgUmVzdWx0cy9DcC50eHQKIiIiKSNsaW5lOjM2NQogICAgICAgIHdpdGggVGhyZWFkUG9vbEV4ZWN1dG9yIChtYXhfd29ya2VycyA9MzAgKWFzIChPTzAwMDAwT09PT09PT09PMCApOiNsaW5lOjM2NgogICAgICAgICAgZm9yIE9PT09PMDBPT09PT09PT09PIGluIE8wTzAwME9PT09PT09PT09PIC5saXN0IDojbGluZTozNjcKICAgICAgICAgICAgT08wT09PME9PT08wTzAwMDAgLE8wME8wME8wME8wME8wMDBPID1PT09PTzAwT09PT09PT09PTyAuc3BsaXQgKCc8PT4nKSNsaW5lOjM2OAogICAgICAgICAgICBPTzBPME8wME8wME8wT08wTyA9TzAwTzAwTzAwTzAwTzAwME8gLnNwbGl0ICgnICcpI2xpbmU6MzY5CiAgICAgICAgICAgIGlmIE9PT08wTzAwT09PMDBPT09PIGluIFsnMScsJzAxJ106I2xpbmU6MzcwCiAgICAgICAgICAgICAgT08wME8wTzAwTzBPTzBPMDAgPVtPMDBPMDBPMDBPMDBPMDAwTyAsTzAwTzAwTzAwTzAwTzAwME8gLnJlcGxhY2UgKCcgJywnJyksT08wTzBPMDBPMDBPME9PME8gWzAgXSsnMTIzJyxPTzBPME8wME8wME8wT08wTyBbMCBdKycxMjM0NSddI2xpbmU6MzcxCiAgICAgICAgICAgIGVsaWYgT09PTzBPMDBPT08wME9PT08gaW4gWycyJywnMDInXTojbGluZTozNzIKICAgICAgICAgICAgICBPTzAwTzBPMDBPME9PME8wMCA9W08wME8wME8wME8wME8wMDBPICxPMDBPMDBPMDBPMDBPMDAwTyAucmVwbGFjZSAoJyAnLCcnKSxPTzBPME8wME8wME8wT08wTyBbMCBdKycxMjMnLE9PME8wTzAwTzAwTzBPTzBPIFswIF0rJzEyMzQnLE9PME8wTzAwTzAwTzBPTzBPIFswIF0rJzEyMzQ1JyxPTzBPME8wME8wME8wT08wTyBbMCBdKycxMjM0NTYnXSNsaW5lOjM3MwogICAgICAgICAgICBlbGlmIE9PT08wTzAwT09PMDBPT09PIGluIFsnMycsJzAzJ106I2xpbmU6Mzc0CiAgICAgICAgICAgICAgT08wME8wTzAwTzBPTzBPMDAgPU8wMDAwMDBPMDBPMDAwT08wIC5zcGxpdCAoJywnKSNsaW5lOjM3NQogICAgICAgICAgICBlbHNlIDojbGluZTozNzYKICAgICAgICAgICAgICBPTzAwTzBPMDBPME9PME8wMCA9W08wME8wME8wME8wME8wMDBPICxPMDBPMDBPMDBPMDBPMDAwTyAucmVwbGFjZSAoJyAnLCcnKSxPTzBPME8wME8wME8wT08wTyBbMCBdKycxMjMnLE9PME8wTzAwTzAwTzBPTzBPIFswIF0rJzEyMzQ1J10jbGluZTozNzcKICAgICAgICAgICAgT08wMDAwME9PT09PT09PTzAgLnN1Ym1pdCAoTzBPMDAwT09PT09PT09PT08gLl9fd3d3X18gLE8wTzAwME9PT09PT09PT09PIC5saXN0ICxPTzBPT08wT09PTzBPMDAwMCAsT08wME8wTzAwTzBPTzBPMDAgKSNsaW5lOjM3OAogICAgICAgIGV4aXQgKGYiXG57SH1be1B9U2VsZXNhaXtIfV17UH0iKSNsaW5lOjM3OQogICAgICBleGNlcHQgOmV4aXQgKGYiXG57SH1be1B9U2VsZXNhaXtIfV17UH0iKSNsaW5lOjM4MAogICAgZWxpZiBPME9PTzAwTzAwME9PT09PMCBpbiBbJzMnLCcwMyddOiNsaW5lOjM4MQogICAgICB0cnkg""OiNsaW5lOjM4MgogICAgICAgIHByaW50IChmIiIiCntIfVt7UH0xe0h9XXtQfSBHdW5ha2FuIFBhc3N3b3JkIHtIfVt7UH1OYW1hLCBOYW1hMTIzLCBOYW1hMTIzNDV7SH1de1B9CntIfVt7UH0ye0h9XXtQfSBHdW5ha2FuIFBhc3N3b3JkIHtIfVt7UH1OYW1hLCBOYW1hMTIzLCBOYW1hMTIzNCwgTmFtYTEyMzQ1LCBOYW1hMTIzNDU2e0h9XXtQfQp7SH1be1B9M3tIfV17UH0gR3VuYWthbiBQYXNzd29yZCBNYW51YWwge0h9W3tQfT41e0h9XXtQfQoiIiIpI2xpbmU6Mzg3CiAgICAgICAgT09PTzBPMDBPT08wME9PT08gPWlucHV0IChmIntVfVt7UH0/e1V9XXtQfSBDaG9vc2UgOntLfSAiKSNsaW5lOjM4OAogICAgICAgIGlmIE9PT08wTzAwT09PMDBPT09PIGluIFsnMycsJzAzJ106I2xpbmU6Mzg5CiAgICAgICAgICBPMDAwMDAwTzAwTzAwME9PMCA9aW5wdXQgKGYie1V9W3tQfT97VX1de1B9IFBhc3N3b3JkIDp7S30gIikjbGluZTozOTAKICAgICAgICAgIGlmIGxlbiAoTzAwMDAwME8wME8wMDBPTzAgKTw9NSA6I2xpbmU6MzkxCiAgICAgICAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IE1pbmltYWwgNiBLYXJha3RlciIpI2xpbmU6MzkyCiAgICAgICAgTzBPMDAwT09PT09PT09PT08gLmZpbGUgPWlucHV0IChmIntVfVt7UH0/e1V9XXtQfSBGaWxlIER1bXAgOntLfSAiKSNsaW5lOjM5MwogICAgICAgIGlmIGxlbiAoTzBPMDAwT09PT09PT09PT08gLmZpbGUgKT09MCA6I2xpbmU6Mzk0CiAgICAgICAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBKYW5nYW4gS29zb25nIikjbGluZTozOTUKICAgICAgICBlbHNlIDojbGluZTozOTYKICAgICAgICAgIE8wTzAwME9PT09PT09PT09PIC5saXN0ID1vcGVuIChPME8wMDBPT09PT09PT09PTyAuZmlsZSAsJ3InKS5yZWFkICgpLnNwbGl0bGluZXMgKCkjbGluZTozOTcKICAgICAgZXhjZXB0IChJT0Vycm9yICk6I2xpbmU6Mzk4CiAgICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gRmlsZSBUaWRhayBBZGEiKSNsaW5lOjM5OQogICAgICB0cnkgOiNsaW5lOjQwMAogICAgICAgIHByaW50IChmIiIiCntCfVt7UH0qe0J9XXtQfSBIYXNpbCBPayBUZXJzaW1wYW4gRGkgUmVzdWx0cy9Pay50eHQKe0J9W3tQfSp7Qn1de1B9IEhhc2lsIENwIFRlcnNpbXBhbiBEaSBSZXN1bHRzL0NwLnR4dAoiIiIpI2xpbmU6NDA0CiAgICAgICAgd2l0aCBUaHJlYWRQb29sRXhlY3V0b3IgKG1heF93b3JrZXJzID0zMCApYXMgKE9PMDAwMDBPT09PT09PT08wICk6I2xpbmU6NDA1CiAgICAgICAgICBmb3IgT09PT08wME9PT09PT09PT08gaW4gTzBPMDAwT09PT09PT09PT08gLmxpc3QgOiNsaW5lOjQwNgogICAgICAgICAgICBPTzBPT08wT09PTzBPMDAwMCAsTzAwTzAwTzAwTzAwTzAwME8gPU9PT09PMDBPT09PT09PT09PIC5zcGxpdCAoJzw9PicpI2xpbmU6NDA3CiAgICAgICAgICAgIE9PME8wTzAwTzAwTzBPTzBPID1PMDBPMDBPMDBPMDBPMDAwTyAuc3BsaXQgKCcgJykjbGluZTo0MDgKICAgICAgICAg""ICAgaWYgT09PTzBPMDBPT08wME9PT08gaW4gWycxJywnMDEnXTojbGluZTo0MDkKICAgICAgICAgICAgICBPTzAwTzBPMDBPME9PME8wMCA9W08wME8wME8wME8wME8wMDBPICxPMDBPMDBPMDBPMDBPMDAwTyAucmVwbGFjZSAoJyAnLCcnKSxPTzBPME8wME8wME8wT08wTyBbMCBdKycxMjMnLE9PME8wTzAwTzAwTzBPTzBPIFswIF0rJzEyMzQ1J10jbGluZTo0MTAKICAgICAgICAgICAgZWxpZiBPT09PME8wME9PTzAwT09PTyBpbiBbJzInLCcwMiddOiNsaW5lOjQxMQogICAgICAgICAgICAgIE9PMDBPME8wME8wT08wTzAwID1bTzAwTzAwTzAwTzAwTzAwME8gLE8wME8wME8wME8wME8wMDBPIC5yZXBsYWNlICgnICcsJycpLE9PME8wTzAwTzAwTzBPTzBPIFswIF0rJzEyMycsT08wTzBPMDBPMDBPME9PME8gWzAgXSsnMTIzNCcsT08wTzBPMDBPMDBPME9PME8gWzAgXSsnMTIzNDUnLE9PME8wTzAwTzAwTzBPTzBPIFswIF0rJzEyMzQ1NiddI2xpbmU6NDEyCiAgICAgICAgICAgIGVsaWYgT09PTzBPMDBPT08wME9PT08gaW4gWyczJywnMDMnXTojbGluZTo0MTMKICAgICAgICAgICAgICBPTzAwTzBPMDBPME9PME8wMCA9TzAwMDAwME8wME8wMDBPTzAgLnNwbGl0ICgnLCcpI2xpbmU6NDE0CiAgICAgICAgICAgIGVsc2UgOiNsaW5lOjQxNQogICAgICAgICAgICAgIE9PMDBPME8wME8wT08wTzAwID1bTzAwTzAwTzAwTzAwTzAwME8gLE8wME8wME8wME8wME8wMDBPIC5yZXBsYWNlICgnICcsJycpLE9PME8wTzAwTzAwTzBPTzBPIFswIF0rJzEyMycsT08wTzBPMDBPMDBPME9PME8gWzAgXSsnMTIzNDUnXSNsaW5lOjQxNgogICAgICAgICAgICBPTzAwMDAwT09PT09PT09PMCAuc3VibWl0IChPME8wMDBPT09PT09PT09PTyAuX19jb2lkX18gLE8wTzAwME9PT09PT09PT09PIC5saXN0ICxPTzBPT08wT09PTzBPMDAwMCAsT08wME8wTzAwTzBPTzBPMDAgKSNsaW5lOjQxNwogICAgICAgIGV4aXQgKGYiXG57SH1be1B9U2VsZXNhaXtIfV17UH0iKSNsaW5lOjQxOAogICAgICBleGNlcHQgOmV4aXQgKGYiXG57SH1be1B9U2VsZXNhaXtIfV17UH0iKSNsaW5lOjQxOQogICAgZWxzZSA6I2xpbmU6NDIwCiAgICAgIGV4aXQgKGYie1B9W3tNfSF7UH1de019IFdyb25nIElucHV0IikjbGluZTo0MjEKICBkZWYgX19hcGlfXyAoT08wTzAwMDBPMDBPTzAwT08gLE8wME9PMDBPMDAwT09PMDAwICxPT09PT09PME8wME9PMDBPTyAsT09PME8wT09PMDAwME9PME8gKTojbGluZTo0MjIKICAgIHRyeSA6I2xpbmU6NDIzCiAgICAgIGZvciBPTzBPME9PTzBPT09PTzAwMCBpbiBPT08wTzBPT08wMDAwT08wTyA6I2xpbmU6NDI0CiAgICAgICAgT08wTzBPT08wT09PT08wMDAgPU9PME8wT09PME9PT09PMDAwIC5sb3dlciAoKSNsaW5lOjQyNQogICAgICAgIE9PME9PME8wMDAwTzAwMDAwID17J1VzZXItQWdlbnQnOidJbnN0YWdyYW0gMTEzLjAuMC4zOS4xMjIgQW5kcm9pZCAoMjQvNS4wOyA1MTVkcGk7IDE0NDB4MjQxNjsgaHVhd2VpL2dvb2dsZTsgTmV4dXMgNlA7""IGFuZ2xlcjsgYW5nbGVyOyBlbl9VUyknLCdBY2NlcHQnOicqLyonLCdDb29raWUnOidtaXNzaW5nJywnQWNjZXB0LUVuY29kaW5nJzonZ3ppcCwgZGVmbGF0ZScsJ0FjY2VwdC1MYW5ndWFnZSc6J2VuLVVTJywnWC1JRy1DYXBhYmlsaXRpZXMnOiczYnJUdnc9PScsJ1gtSUctQ29ubmVjdGlvbi1UeXBlJzonV0lGSScsJ0NvbnRlbnQtVHlwZSc6J2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOCcsJ0hvc3QnOidpLmluc3RhZ3JhbS5jb20nfSNsaW5lOjQzNgogICAgICAgIE8wMDAwME8wMDBPT09PME8wID17J3V1aWQnOnN0ciAodXVpZDQgKCkpLCdwYXNzd29yZCc6T08wTzBPT08wT09PT08wMDAgLCd1c2VybmFtZSc6T09PT09PTzBPMDBPTzAwT08gLCdkZXZpY2VfaWQnOnN0ciAodXVpZDQgKCkpLCdmcm9tX3JlZyc6J2ZhbHNlJywnX2NzcmZ0b2tlbic6J21pc3NpbmcnLCdsb2dpbl9hdHRlbXB0X2NvdW50bic6JzAnfSNsaW5lOjQ0NQogICAgICAgIHdpdGggcmVxdWVzdHMgLlNlc3Npb24gKClhcyBPT08wMDAwME8wMDBPME8wTyA6I2xpbmU6NDQ2CiAgICAgICAgICBPT09PME9PT09PT09PT09PMCA9T09PMDAwMDBPMDAwTzBPME8gLnBvc3QgKCdodHRwczovL2kuaW5zdGFncmFtLmNvbS9hcGkvdjEvYWNjb3VudHMvbG9naW4vJyxoZWFkZXJzID1PTzBPTzBPMDAwME8wMDAwMCAsZGF0YSA9TzAwMDAwTzAwME9PT08wTzAgLGFsbG93X3JlZGlyZWN0cyA9VHJ1ZSApI2xpbmU6NDQ3CiAgICAgICAgICBpZiAnbG9nZ2VkX2luX3VzZXInaW4gc3RyIChPT09PME9PT09PT09PT09PMCAudGV4dCApOiNsaW5lOjQ0OAogICAgICAgICAgICB0cnkgOiNsaW5lOjQ0OQogICAgICAgICAgICAgIE9PT09PT09PTzBPTzBPMDAwID1yZXF1ZXN0cyAuZ2V0IChmJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20ve09PT09PT08wTzAwT08wME9PfS8/X19hPTEnLGhlYWRlcnMgPXsndXNlci1hZ2VudCc6dXNlcmFnZW50ICwnY29va2llJzpvcGVuICgnRGF0YS9jb29raWUudHh0JywncicpLnJlYWQgKCl9KS5qc29uICgpWydncmFwaHFsJ11bJ3VzZXInXSNsaW5lOjQ1MAogICAgICAgICAgICAgIE9PTzAwT08wME9PME9PTzAwID0oT09PT09PT09PME9PME8wMDAgWydlZGdlX2ZvbGxvd2VkX2J5J11bJ2NvdW50J10pI2xpbmU6NDUxCiAgICAgICAgICAgICAgTzBPT08wTzBPT09PME8wT08gPShPT09PT09PT08wT08wTzAwMCBbJ2VkZ2VfZm9sbG93J11bJ2NvdW50J10pI2xpbmU6NDUyCiAgICAgICAgICAgIGV4Y2VwdCAoSU9FcnJvciAsS2V5RXJyb3IgKTojbGluZTo0NTMKICAgICAgICAgICAgICBPT08wME9PMDBPTzBPT08wMCA9KCctJykjbGluZTo0NTQKICAgICAgICAgICAgICBPME9PTzBPME9PT08wTzBPTyA9KCctJykjbGluZTo0NTUKICAgICAgICAgICAgZXhjZXB0IDpwYXNzICNsaW5lOjQ1NgogICAgICAgICAgICBwcmludCAoZiJccntIfVt7UH3inJR7SH1de1B9IFN0YXR1cyA6IFN1Y2Nlc3MgICAgICAgICAg""IikjbGluZTo0NTcKICAgICAgICAgICAgcHJpbnQgKGYie0h9W3tQfT57SH1de1B9IFVzZXJuYW1lIDoge09PT09PT08wTzAwT08wME9PfSIpI2xpbmU6NDU4CiAgICAgICAgICAgIHByaW50IChmIntIfVt7UH0+e0h9XXtQfSBQYXNzd29yZCA6IHtPTzBPME9PTzBPT09PTzAwMH0iKSNsaW5lOjQ1OQogICAgICAgICAgICBwcmludCAoZiJ7SH1be1B9PntIfV17UH0gUGVuZ2lrdXQgOiB7T09PMDBPTzAwT08wT09PMDB9IikjbGluZTo0NjAKICAgICAgICAgICAgcHJpbnQgKGYie0h9W3tQfT57SH1de1B9IE1lbmdpa3V0aSA6IHtPME9PTzBPME9PT08wTzBPT31cbiIpI2xpbmU6NDYxCiAgICAgICAgICAgIE9PME8wMDAwTzAwT08wME9PIC5saXZlIC5hcHBlbmQgKGYne09PT09PT08wTzAwT08wME9PfXx7T08wTzBPT08wT09PT08wMDB9JykjbGluZTo0NjIKICAgICAgICAgICAgd2l0aCBvcGVuICgnUmVzdWx0cy9Pay50eHQnLCdhJylhcyBPMDAwME8wTzAwTzAwME8wMCA6I2xpbmU6NDYzCiAgICAgICAgICAgICAgTzAwMDBPME8wME8wMDBPMDAgLndyaXRlIChmJ3tPT09PT09PME8wME9PMDBPT318e09PME8wT09PME9PT09PMDAwfVxuJykjbGluZTo0NjQKICAgICAgICAgICAgYnJlYWsgI2xpbmU6NDY1CiAgICAgICAgICBlbGlmICdjaGFsbGVuZ2VfcmVxdWlyZWQnaW4gc3RyIChPT09PME9PT09PT09PT09PMCAudGV4dCApOiNsaW5lOjQ2NgogICAgICAgICAgICB0cnkgOiNsaW5lOjQ2NwogICAgICAgICAgICAgIE9PT09PT09PTzBPTzBPMDAwID1yZXF1ZXN0cyAuZ2V0IChmJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20ve09PT09PT08wTzAwT08wME9PfS8/X19hPTEnLGhlYWRlcnMgPXsndXNlci1hZ2VudCc6dXNlcmFnZW50ICwnY29va2llJzpvcGVuICgnRGF0YS9jb29raWUudHh0JywncicpLnJlYWQgKCl9KS5qc29uICgpWydncmFwaHFsJ11bJ3VzZXInXSNsaW5lOjQ2OAogICAgICAgICAgICAgIE9PTzAwT08wME9PME9PTzAwID0oT09PT09PT09PME9PME8wMDAgWydlZGdlX2ZvbGxvd2VkX2J5J11bJ2NvdW50J10pI2xpbmU6NDY5CiAgICAgICAgICAgICAgTzBPT08wTzBPT09PME8wT08gPShPT09PT09PT08wT08wTzAwMCBbJ2VkZ2VfZm9sbG93J11bJ2NvdW50J10pI2xpbmU6NDcwCiAgICAgICAgICAgIGV4Y2VwdCAoSU9FcnJvciAsS2V5RXJyb3IgKTojbGluZTo0NzEKICAgICAgICAgICAgICBPT08wME9PMDBPTzBPT08wMCA9KCctJykjbGluZTo0NzIKICAgICAgICAgICAgICBPME9PTzBPME9PT08wTzBPTyA9KCctJykjbGluZTo0NzMKICAgICAgICAgICAgZXhjZXB0IDpwYXNzICNsaW5lOjQ3NAogICAgICAgICAgICBwcmludCAoZiJccntLfVt7UH3inJh7S31de1B9IFN0YXR1cyA6IENoZWtwb2ludCAgICAgICAgICAiKSNsaW5lOjQ3NQogICAgICAgICAgICBwcmludCAoZiJ7S31be1B9PntLfV17UH0gVXNlcm5hbWUgOiB7T09PT09PTzBPMDBPTzAwT099IikjbGluZTo0NzYKICAgICAgICAgICAgcHJpbnQgKGYie0t9""W3tQfT57S31de1B9IFBhc3N3b3JkIDoge09PME8wT09PME9PT09PMDAwfSIpI2xpbmU6NDc3CiAgICAgICAgICAgIHByaW50IChmIntLfVt7UH0+e0t9XXtQfSBQZW5naWt1dCA6IHtPT08wME9PMDBPTzBPT08wMH0iKSNsaW5lOjQ3OAogICAgICAgICAgICBwcmludCAoZiJ7S31be1B9PntLfV17UH0gTWVuZ2lrdXRpIDoge08wT09PME8wT09PTzBPME9PfVxuIikjbGluZTo0NzkKICAgICAgICAgICAgT08wTzAwMDBPMDBPTzAwT08gLmRpZSAuYXBwZW5kIChmJ3tPT09PT09PME8wME9PMDBPT318e09PME8wT09PME9PT09PMDAwfScpI2xpbmU6NDgwCiAgICAgICAgICAgIHdpdGggb3BlbiAoJ1Jlc3VsdHMvQ3AudHh0JywnYScpYXMgTzAwMDBPME8wME8wMDBPMDAgOiNsaW5lOjQ4MQogICAgICAgICAgICAgIE8wMDAwTzBPMDBPMDAwTzAwIC53cml0ZSAoZid7T09PT09PTzBPMDBPTzAwT099fHtPTzBPME9PTzBPT09PTzAwMH1cbicpI2xpbmU6NDgyCiAgICAgICAgICAgIGJyZWFrICNsaW5lOjQ4MwogICAgICAgICAgZWxpZiAnUGxlYXNlIHdhaXQnaW4gc3RyIChPT09PME9PT09PT09PT09PMCAudGV4dCApb3IgJ2lwX2Jsb2NrJ2luIHN0ciAoT09PTzBPT09PT09PT09PTzAgLnRleHQgKTojbGluZTo0ODQKICAgICAgICAgICAgcHJpbnQgKGYie1B9W3tNfSF7UH1de019IEhpZHVwa2FuIE1vZGUgUGVzYXdhdCAyIERldGlrLi4uIixlbmQgPSdccicpO3RpbWUgLnNsZWVwICgxMCApO09PME8wMDAwTzAwT08wME9PIC5fX2FwaV9fIChPMDBPTzAwTzAwME9PTzAwMCAsT09PT09PTzBPMDBPTzAwT08gLE9PTzBPME9PTzAwMDBPTzBPICkjbGluZTo0ODUKICAgICAgICAgIGVsc2UgOiNsaW5lOjQ4NgogICAgICAgICAgICBjb250aW51ZSAjbGluZTo0ODcKICAgICAgT08wTzAwMDBPMDBPTzAwT08gLmxvb3BpbmcgKz0xICNsaW5lOjQ4OAogICAgICBwcmludCAoZiJ7VH1be1B9Q3JhY2t7VH1de1B9IHtzdHIobGVuKE8wME9PMDBPMDAwT09PMDAwKSl9L3tPTzBPMDAwME8wME9PMDBPTy5sb29waW5nfSBDcC06LXtsZW4oT08wTzAwMDBPMDBPTzAwT08uZGllKX0gT2stOi17bGVuKE9PME8wMDAwTzAwT08wME9PLmxpdmUpfSAgICAgICAgICIsZW5kID0nXHInKSNsaW5lOjQ4OQogICAgZXhjZXB0IChDb25uZWN0aW9uRXJyb3IgKTojbGluZTo0OTAKICAgICAgcHJpbnQgKGYie1B9W3tVfSF7UH1de1V9IEtvbmVrc2kgRXJyb3IgICAgICAgICAgICAgICAgICAgICAgIixlbmQgPSdccicpO3RpbWUgLnNsZWVwICg1ICk7T08wTzAwMDBPMDBPTzAwT08gLl9fYXBpX18gKE8wME9PMDBPMDAwT09PMDAwICxPT09PT09PME8wME9PMDBPTyAsT09PME8wT09PMDAwME9PME8gKSNsaW5lOjQ5MQogICAgZXhjZXB0IDpPTzBPMDAwME8wME9PMDBPTyAuX19hcGlfXyAoTzAwT08wME8wMDBPT08wMDAgLE9PT09PT08wTzAwT08wME9PICxPT08wTzBPT08wMDAwT08wTyApI2xpbmU6NDkyCiAgZGVmIF9fd3d3X18gKE8wT09PT09PTzAwME8wMDBPICxPT09PT09P""MDBPTzAwMDBPTyAsT09PME9PME9PMDAwTzBPT08gLE9PME8wTzBPMDAwMDAwT09PICk6I2xpbmU6NDkzCiAgICB0cnkgOiNsaW5lOjQ5NAogICAgICBmb3IgTzAwT08wTzBPTzBPMDAwT08gaW4gT08wTzBPME8wMDAwMDBPT08gOiNsaW5lOjQ5NQogICAgICAgIE8wME9PME8wT08wTzAwME9PID1PMDBPTzBPME9PME8wMDBPTyAubG93ZXIgKCkjbGluZTo0OTYKICAgICAgICBPMDAwT08wTzBPT09PME9PMCA9eydodHRwJzonc29ja3M0Oi8vJXMnJShyYW5kb20gLmNob2ljZSAob3BlbiAoIkRhdGEvcHJveGllcy50eHQiLCJyIikucmVhZCAoKS5zcGxpdGxpbmVzICgpKSl9I2xpbmU6NDk5CiAgICAgICAgT09PT08wMDAwT08wT09PMDAgPXJlcXVlc3RzIC5nZXQgKCdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tLycpLmNvb2tpZXMgWydjc3JmdG9rZW4nXSNsaW5lOjUwMAogICAgICAgIE9PT09PT09PME8wT08wMDAwID17J1VzZXItQWdlbnQnOnJhbmRvbSAuY2hvaWNlIChvcGVuICgiRGF0YS91c2VyYWdlbnQudHh0IiwiciIpLnJlYWQgKCkuc3BsaXRsaW5lcyAoKSksJ1gtUmVxdWVzdGVkLVdpdGgnOidYTUxIdHRwUmVxdWVzdCcsJ1JlZmVyZXInOidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2FjY291bnRzL2xvZ2luLycsJ3gtY3NyZnRva2VuJzpPT09PTzAwMDBPTzBPT08wMCB9I2xpbmU6NTA2CiAgICAgICAgTzAwTzAwTzAwT09PT09PTzAgPXsndXNlcm5hbWUnOk9PTzBPTzBPTzAwME8wT09PICwnZW5jX3Bhc3N3b3JkJzpmJyNQV0RfSU5TVEFHUkFNX0JST1dTRVI6MDp7dGltZX06e08wME9PME8wT08wTzAwME9PfScsJ3F1ZXJ5UGFyYW1zJzp7fSwnb3B0SW50b09uZVRhcCc6J2ZhbHNlJ30jbGluZTo1MTIKICAgICAgICB3aXRoIHJlcXVlc3RzIC5TZXNzaW9uICgpYXMgT09PME8wMDBPMDAwT09PMDAgOiNsaW5lOjUxMwogICAgICAgICAgTzBPTzBPME9PME8wT09PTzAgPU9PTzBPMDAwTzAwME9PTzAwIC5wb3N0ICgnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9hY2NvdW50cy9sb2dpbi9hamF4LycsZGF0YSA9TzAwTzAwTzAwT09PT09PTzAgLGhlYWRlcnMgPU9PT09PT09PME8wT08wMDAwICxwcm94aWVzID1PMDAwT08wTzBPT09PME9PMCApI2xpbmU6NTE0CiAgICAgICAgICBpZiAndXNlcklkJ2luIHN0ciAoTzBPTzBPME9PME8wT09PTzAgLnRleHQgKTojbGluZTo1MTUKICAgICAgICAgICAgdHJ5IDojbGluZTo1MTYKICAgICAgICAgICAgICBPTzBPT09PME8wTzAwTzAwMCA9cmVxdWVzdHMgLmdldCAoZidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3tPT08wT08wT08wMDBPME9PT30vP19fYT0xJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsnZ3JhcGhxbCddWyd1c2VyJ10jbGluZTo1MTcKICAgICAgICAgICAgICBPMDAwMDBPMDBPTzAwMDBPMCA9KE9PME9PT08wTzBPMDBPMDAwIFsnZWRnZV9mb2xsb3dl""ZF9ieSddWydjb3VudCddKSNsaW5lOjUxOAogICAgICAgICAgICAgIE9PT09PME8wMDBPMDBPME9PID0oT08wT09PTzBPME8wME8wMDAgWydlZGdlX2ZvbGxvdyddWydjb3VudCddKSNsaW5lOjUxOQogICAgICAgICAgICBleGNlcHQgKElPRXJyb3IgLEtleUVycm9yICk6I2xpbmU6NTIwCiAgICAgICAgICAgICAgTzAwMDAwTzAwT08wMDAwTzAgPSgnLScpI2xpbmU6NTIxCiAgICAgICAgICAgICAgT09PT08wTzAwME8wME8wT08gPSgnLScpI2xpbmU6NTIyCiAgICAgICAgICAgIGV4Y2VwdCA6cGFzcyAjbGluZTo1MjMKICAgICAgICAgICAgcHJpbnQgKGYiXHJ7SH1be1B94pyUe0h9XXtQfSBTdGF0dXMgOiBTdWNjZXNzICAgICAgICAgICIpI2xpbmU6NTI0CiAgICAgICAgICAgIHByaW50IChmIntIfVt7UH0+e0h9XXtQfSBVc2VybmFtZSA6IHtPT08wT08wT08wMDBPME9PT30iKSNsaW5lOjUyNQogICAgICAgICAgICBwcmludCAoZiJ7SH1be1B9PntIfV17UH0gUGFzc3dvcmQgOiB7TzAwT08wTzBPTzBPMDAwT099IikjbGluZTo1MjYKICAgICAgICAgICAgcHJpbnQgKGYie0h9W3tQfT57SH1de1B9IFBlbmdpa3V0IDoge08wMDAwME8wME9PMDAwME8wfSIpI2xpbmU6NTI3CiAgICAgICAgICAgIHByaW50IChmIntIfVt7UH0+e0h9XXtQfSBNZW5naWt1dGkgOiB7T09PT08wTzAwME8wME8wT099XG4iKSNsaW5lOjUyOAogICAgICAgICAgICBPME9PT09PT08wMDBPMDAwTyAubGl2ZSAuYXBwZW5kIChmJ3tPT08wT08wT08wMDBPME9PT318e08wME9PME8wT08wTzAwME9PfScpI2xpbmU6NTI5CiAgICAgICAgICAgIHdpdGggb3BlbiAoJ1Jlc3VsdHMvT2sudHh0JywnYScpYXMgTzAwT08wT08wT09PTzBPTzAgOiNsaW5lOjUzMAogICAgICAgICAgICAgIE8wME9PME9PME9PT08wT08wIC53cml0ZSAoZid7T09PME9PME9PMDAwTzBPT099fHtPMDBPTzBPME9PME8wMDBPT31cbicpI2xpbmU6NTMxCiAgICAgICAgICAgIGJyZWFrICNsaW5lOjUzMgogICAgICAgICAgZWxpZiAnY2hlY2twb2ludF9yZXF1aXJlZCdpbiBzdHIgKE8wT08wTzBPTzBPME9PT08wIC50ZXh0ICk6I2xpbmU6NTMzCiAgICAgICAgICAgIHRyeSA6I2xpbmU6NTM0CiAgICAgICAgICAgICAgT08wT09PTzBPME8wME8wMDAgPXJlcXVlc3RzIC5nZXQgKGYnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS97T09PME9PME9PMDAwTzBPT099Lz9fX2E9MScsaGVhZGVycyA9eyd1c2VyLWFnZW50Jzp1c2VyYWdlbnQgLCdjb29raWUnOm9wZW4gKCdEYXRhL2Nvb2tpZS50eHQnLCdyJykucmVhZCAoKX0pLmpzb24gKClbJ2dyYXBocWwnXVsndXNlciddI2xpbmU6NTM1CiAgICAgICAgICAgICAgTzAwMDAwTzAwT08wMDAwTzAgPShPTzBPT09PME8wTzAwTzAwMCBbJ2VkZ2VfZm9sbG93ZWRfYnknXVsnY291bnQnXSkjbGluZTo1MzYKICAgICAgICAgICAgICBPT09PTzBPMDAwTzAwTzBPTyA9KE9PME9PT08wTzBPMDBPMDAwIFsnZWRnZV9mb2xsb3cnXVsnY291bnQnXSkjbGluZTo1MzcKICAg""ICAgICAgICAgZXhjZXB0IChJT0Vycm9yICxLZXlFcnJvciApOiNsaW5lOjUzOAogICAgICAgICAgICAgIE8wMDAwME8wME9PMDAwME8wID0oJy0nKSNsaW5lOjUzOQogICAgICAgICAgICAgIE9PT09PME8wMDBPMDBPME9PID0oJy0nKSNsaW5lOjU0MAogICAgICAgICAgICBleGNlcHQgOnBhc3MgI2xpbmU6NTQxCiAgICAgICAgICAgIHByaW50IChmIlxye0t9W3tQfeKcmHtLfV17UH0gU3RhdHVzIDogQ2hla3BvaW50ICAgICAgICAgICIpI2xpbmU6NTQyCiAgICAgICAgICAgIHByaW50IChmIntLfVt7UH0+e0t9XXtQfSBVc2VybmFtZSA6IHtPT08wT08wT08wMDBPME9PT30iKSNsaW5lOjU0MwogICAgICAgICAgICBwcmludCAoZiJ7S31be1B9PntLfV17UH0gUGFzc3dvcmQgOiB7TzAwT08wTzBPTzBPMDAwT099IikjbGluZTo1NDQKICAgICAgICAgICAgcHJpbnQgKGYie0t9W3tQfT57S31de1B9IFBlbmdpa3V0IDoge08wMDAwME8wME9PMDAwME8wfSIpI2xpbmU6NTQ1CiAgICAgICAgICAgIHByaW50IChmIntLfVt7UH0+e0t9XXtQfSBNZW5naWt1dGkgOiB7T09PT08wTzAwME8wME8wT099XG4iKSNsaW5lOjU0NgogICAgICAgICAgICBPME9PT09PT08wMDBPMDAwTyAuZGllIC5hcHBlbmQgKGYne09PTzBPTzBPTzAwME8wT09PfXx7TzAwT08wTzBPTzBPMDAwT099JykjbGluZTo1NDcKICAgICAgICAgICAgd2l0aCBvcGVuICgnUmVzdWx0cy9DcC50eHQnLCdhJylhcyBPMDBPTzBPTzBPT09PME9PMCA6I2xpbmU6NTQ4CiAgICAgICAgICAgICAgTzAwT08wT08wT09PTzBPTzAgLndyaXRlIChmJ3tPT08wT08wT08wMDBPME9PT318e08wME9PME8wT08wTzAwME9PfVxuJykjbGluZTo1NDkKICAgICAgICAgICAgYnJlYWsgI2xpbmU6NTUwCiAgICAgICAgICBlbGlmICdQbGVhc2Ugd2FpdCdpbiBzdHIgKE8wT08wTzBPTzBPME9PT08wIC50ZXh0ICk6I2xpbmU6NTUxCiAgICAgICAgICAgIHByaW50IChmIntQfVt7TX0he1B9XXtNfSBIaWR1cGthbiBNb2RlIFBlc2F3YXQgMiBEZXRpay4uLiIsZW5kID0nXHInKTt0aW1lIC5zbGVlcCAoMTAgKTtPME9PT09PT08wMDBPMDAwTyAuX193d3dfXyAoT09PT09PTzAwT08wMDAwT08gLE9PTzBPTzBPTzAwME8wT09PICxPTzBPME8wTzAwMDAwME9PTyApI2xpbmU6NTUyCiAgICAgICAgICBlbHNlIDojbGluZTo1NTMKICAgICAgICAgICAgY29udGludWUgI2xpbmU6NTU0CiAgICAgIE8wT09PT09PTzAwME8wMDBPIC5sb29waW5nICs9MSAjbGluZTo1NTUKICAgICAgcHJpbnQgKGYie1R9W3tQfUNyYWNre1R9XXtQfSB7c3RyKGxlbihPT09PT09PMDBPTzAwMDBPTykpfS97TzBPT09PT09PMDAwTzAwME8ubG9vcGluZ30gQ3AtOi17bGVuKE8wT09PT09PTzAwME8wMDBPLmRpZSl9IE9rLTote2xlbihPME9PT09PT08wMDBPMDAwTy5saXZlKX0gICAgICAgICAiLGVuZCA9J1xyJykjbGluZTo1NTYKICAgIGV4Y2VwdCAoQ29ubmVjdGlvbkVycm9yICk6I2xpbmU6NTU3CiAgICAgIHByaW50IChmIntQfVt7VX0h""e1B9XXtVfSBLb25la3NpIEVycm9yICAgICAgICAgICAgICAgICAgICAgIixlbmQgPSdccicpO3RpbWUgLnNsZWVwICg1ICk7TzBPT09PT09PMDAwTzAwME8gLl9fd3d3X18gKE9PT09PT08wME9PMDAwME9PICxPT08wT08wT08wMDBPME9PTyAsT08wTzBPME8wMDAwMDBPT08gKSNsaW5lOjU1OAogICAgZXhjZXB0IDpPME9PT09PT08wMDBPMDAwTyAuX193d3dfXyAoT09PT09PTzAwT08wMDAwT08gLE9PTzBPTzBPTzAwME8wT09PICxPTzBPME8wTzAwMDAwME9PTyApI2xpbmU6NTU5CiAgZGVmIF9fY29pZF9fIChPT08wTzAwT09PTzBPME8wTyAsTzAwT09PMDAwT09PMDAwMDAgLE8wMDAwTzAwMDBPTzBPT09PICxPTzAwMDAwME8wME9PMDAwTyApOiNsaW5lOjU2MAogICAgdHJ5IDojbGluZTo1NjEKICAgICAgZm9yIE9PME9PT09PMDAwME8wME9PIGluIE9PMDAwMDAwTzAwT08wMDBPIDojbGluZTo1NjIKICAgICAgICBPTzBPT09PTzAwMDBPMDBPTyA9T08wT09PT08wMDAwTzAwT08gLmxvd2VyICgpI2xpbmU6NTYzCiAgICAgICAgd2l0aCByZXF1ZXN0cyAuU2Vzc2lvbiAoKWFzIE8wTzBPMDBPME8wT08wTzBPIDojbGluZTo1NjQKICAgICAgICAgIE8wME9PTzAwME8wMDBPMDAwID17J0hvc3QnOidmb2xsb3dlcnNpbmRvbmVzaWEuY28uaWQnLCdjb250ZW50LWxlbmd0aCc6JzQ0JywnYWNjZXB0JzonYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0LCAqLyo7IHE9MC4wMScsJ3gtcmVxdWVzdGVkLXdpdGgnOidYTUxIdHRwUmVxdWVzdCcsJ3NlYy1jaC11YS1tb2JpbGUnOic/MScsJ3NhdmUtZGF0YSc6J29uJywndXNlci1hZ2VudCc6cmFuZG9tIC5jaG9pY2UgKG9wZW4gKCJEYXRhL3VzZXJhZ2VudC50eHQiLCJyIikucmVhZCAoKS5zcGxpdGxpbmVzICgpKSwnY29udGVudC10eXBlJzonYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04Jywnb3JpZ2luJzonaHR0cHM6Ly9mb2xsb3dlcnNpbmRvbmVzaWEuY28uaWQnLCdzZWMtZmV0Y2gtc2l0ZSc6J3NhbWUtb3JpZ2luJywnc2VjLWZldGNoLW1vZGUnOidjb3JzJywnc2VjLWZldGNoLWRlc3QnOidlbXB0eScsJ3JlZmVyZXInOidodHRwczovL2ZvbGxvd2Vyc2luZG9uZXNpYS5jby5pZC9sb2dpbicsfSNsaW5lOjU3OQogICAgICAgICAgT08wME8wME9PME9PT08wT08gPXsnaWQnOicnLCd1c2VybmFtZSc6TzAwMDBPMDAwME9PME9PT08gLCdwYXNzd29yZCc6T08wT09PT08wMDAwTzAwT08gfSNsaW5lOjU4NAogICAgICAgICAgTzBPTzBPT09PT08wTzAwTzAgPXsnaHR0cCc6J3NvY2tzNDovLyVzJyUocmFuZG9tIC5jaG9pY2UgKG9wZW4gKCJEYXRhL3Byb3hpZXMudHh0IiwiciIpLnJlYWQgKCkuc3BsaXRsaW5lcyAoKSkpfSNsaW5lOjU4NwogICAgICAgICAgTzBPMDAwMDAwTzAwMDAwMDAgPU8wTzBPMDBPME8wT08wTzBPIC5wb3N0ICgnaHR0cHM6Ly9mb2xsb3dlcnNpbmRvbmVzaWEuY28uaWQvYWpheC9sb2dpbicsZGF0YSA9T08wME8wME9PME9P""T08wT08gLGhlYWRlcnMgPU8wME9PTzAwME8wMDBPMDAwICxwcm94aWVzID1PME9PME9PT09PTzBPMDBPMCApI2xpbmU6NTg4CiAgICAgICAgICBpZiAnU3Vrc2VzISdpbiBzdHIgKE8wTzAwMDAwME8wMDAwMDAwIC50ZXh0ICk6I2xpbmU6NTg5CiAgICAgICAgICAgIHRyeSA6I2xpbmU6NTkwCiAgICAgICAgICAgICAgTzBPME9PMDBPTzAwTzAwT08gPXJlcXVlc3RzIC5nZXQgKGYnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS97TzAwMDBPMDAwME9PME9PT099Lz9fX2E9MScsaGVhZGVycyA9eyd1c2VyLWFnZW50Jzp1c2VyYWdlbnQgLCdjb29raWUnOm9wZW4gKCdEYXRhL2Nvb2tpZS50eHQnLCdyJykucmVhZCAoKX0pLmpzb24gKClbJ2dyYXBocWwnXVsndXNlciddI2xpbmU6NTkxCiAgICAgICAgICAgICAgT09PMDBPT08wT08wME8wME8gPShPME8wT08wME9PMDBPMDBPTyBbJ2VkZ2VfZm9sbG93ZWRfYnknXVsnY291bnQnXSkjbGluZTo1OTIKICAgICAgICAgICAgICBPMDAwME8wT09PME8wME9PMCA9KE8wTzBPTzAwT08wME8wME9PIFsnZWRnZV9mb2xsb3cnXVsnY291bnQnXSkjbGluZTo1OTMKICAgICAgICAgICAgZXhjZXB0IChJT0Vycm9yICxLZXlFcnJvciApOiNsaW5lOjU5NAogICAgICAgICAgICAgIE9PTzAwT09PME9PMDBPMDBPID0oJy0nKSNsaW5lOjU5NQogICAgICAgICAgICAgIE8wMDAwTzBPT08wTzAwT08wID0oJy0nKSNsaW5lOjU5NgogICAgICAgICAgICBleGNlcHQgOnBhc3MgI2xpbmU6NTk3CiAgICAgICAgICAgIHByaW50IChmIlxye0h9W3tQfeKclHtIfV17UH0gU3RhdHVzIDogU3VjY2VzcyAgICAgICAgICAiKSNsaW5lOjU5OAogICAgICAgICAgICBwcmludCAoZiJ7SH1be1B9PntIfV17UH0gVXNlcm5hbWUgOiB7TzAwMDBPMDAwME9PME9PT099IikjbGluZTo1OTkKICAgICAgICAgICAgcHJpbnQgKGYie0h9W3tQfT57SH1de1B9IFBhc3N3b3JkIDoge09PME9PT09PMDAwME8wME9PfSIpI2xpbmU6NjAwCiAgICAgICAgICAgIHByaW50IChmIntIfVt7UH0+e0h9XXtQfSBQZW5naWt1dCA6IHtPT08wME9PTzBPTzAwTzAwT30iKSNsaW5lOjYwMQogICAgICAgICAgICBwcmludCAoZiJ7SH1be1B9PntIfV17UH0gTWVuZ2lrdXRpIDoge08wMDAwTzBPT08wTzAwT08wfVxuIikjbGluZTo2MDIKICAgICAgICAgICAgT09PME8wME9PT08wTzBPME8gLmxpdmUgLmFwcGVuZCAoZid7TzAwMDBPMDAwME9PME9PT099fHtPTzBPT09PTzAwMDBPMDBPT30nKSNsaW5lOjYwMwogICAgICAgICAgICB3aXRoIG9wZW4gKCdSZXN1bHRzL09rLnR4dCcsJ2EnKWFzIE8wMDAwTzAwMDAwTzAwMDBPIDojbGluZTo2MDQKICAgICAgICAgICAgICBPMDAwME8wMDAwME8wMDAwTyAud3JpdGUgKGYne08wMDAwTzAwMDBPTzBPT09PfXx7T08wT09PT08wMDAwTzAwT099XG4nKSNsaW5lOjYwNQogICAgICAgICAgICBicmVhayAjbGluZTo2MDYKICAgICAgICAgIGVsaWYgJ0Nla3BvaW50J2luIHN0ciAoTzBPMDAwMDAwTzAwMDAwMDAgLnRleHQg""KTojbGluZTo2MDcKICAgICAgICAgICAgdHJ5IDojbGluZTo2MDgKICAgICAgICAgICAgICBPME8wT08wME9PMDBPMDBPTyA9cmVxdWVzdHMgLmdldCAoZidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3tPMDAwME8wMDAwT08wT09PT30vP19fYT0xJyxoZWFkZXJzID17J3VzZXItYWdlbnQnOnVzZXJhZ2VudCAsJ2Nvb2tpZSc6b3BlbiAoJ0RhdGEvY29va2llLnR4dCcsJ3InKS5yZWFkICgpfSkuanNvbiAoKVsnZ3JhcGhxbCddWyd1c2VyJ10jbGluZTo2MDkKICAgICAgICAgICAgICBPT08wME9PTzBPTzAwTzAwTyA9KE8wTzBPTzAwT08wME8wME9PIFsnZWRnZV9mb2xsb3dlZF9ieSddWydjb3VudCddKSNsaW5lOjYxMAogICAgICAgICAgICAgIE8wMDAwTzBPT08wTzAwT08wID0oTzBPME9PMDBPTzAwTzAwT08gWydlZGdlX2ZvbGxvdyddWydjb3VudCddKSNsaW5lOjYxMQogICAgICAgICAgICBleGNlcHQgKElPRXJyb3IgLEtleUVycm9yICk6I2xpbmU6NjEyCiAgICAgICAgICAgICAgT09PMDBPT08wT08wME8wME8gPSgnLScpI2xpbmU6NjEzCiAgICAgICAgICAgICAgTzAwMDBPME9PTzBPMDBPTzAgPSgnLScpI2xpbmU6NjE0CiAgICAgICAgICAgIGV4Y2VwdCA6cGFzcyAjbGluZTo2MTUKICAgICAgICAgICAgcHJpbnQgKGYiXHJ7S31be1B94pyYe0t9XXtQfSBTdGF0dXMgOiBDaGVrcG9pbnQgICAgICAgICAgIikjbGluZTo2MTYKICAgICAgICAgICAgcHJpbnQgKGYie0t9W3tQfT57S31de1B9IFVzZXJuYW1lIDoge08wMDAwTzAwMDBPTzBPT09PfSIpI2xpbmU6NjE3CiAgICAgICAgICAgIHByaW50IChmIntLfVt7UH0+e0t9XXtQfSBQYXNzd29yZCA6IHtPTzBPT09PTzAwMDBPMDBPT30iKSNsaW5lOjYxOAogICAgICAgICAgICBwcmludCAoZiJ7S31be1B9PntLfV17UH0gUGVuZ2lrdXQgOiB7T09PMDBPT08wT08wME8wME99IikjbGluZTo2MTkKICAgICAgICAgICAgcHJpbnQgKGYie0t9W3tQfT57S31de1B9IE1lbmdpa3V0aSA6IHtPMDAwME8wT09PME8wME9PMH1cbiIpI2xpbmU6NjIwCiAgICAgICAgICAgIE9PTzBPMDBPT09PME8wTzBPIC5kaWUgLmFwcGVuZCAoZid7TzAwMDBPMDAwME9PME9PT099fHtPTzBPT09PTzAwMDBPMDBPT30nKSNsaW5lOjYyMQogICAgICAgICAgICB3aXRoIG9wZW4gKCdSZXN1bHRzL0NwLnR4dCcsJ2EnKWFzIE8wMDAwTzAwMDAwTzAwMDBPIDojbGluZTo2MjIKICAgICAgICAgICAgICBPMDAwME8wMDAwME8wMDAwTyAud3JpdGUgKGYne08wMDAwTzAwMDBPTzBPT09PfXx7T08wT09PT08wMDAwTzAwT099XG4nKSNsaW5lOjYyMwogICAgICAgICAgICBicmVhayAjbGluZTo2MjQKICAgICAgICAgIGVsaWYgJ1BsZWFzZSB3YWl0J2luIHN0ciAoTzBPMDAwMDAwTzAwMDAwMDAgLnRleHQgKTojbGluZTo2MjUKICAgICAgICAgICAgcHJpbnQgKGYie1B9W3tNfSF7UH1de019IFBsZWFzZSB3YWl0IGEgZmV3IG1pbnV0ZXMuLi4iLGVuZCA9J1xyJyk7dGltZSAuc2xlZXAgKDE1ICk7T09PME8wME9PT08wTzBP""ME8gLl9fY29pZF9fIChPMDBPT08wMDBPT08wMDAwMCAsTzAwMDBPMDAwME9PME9PT08gLE9PMDAwMDAwTzAwT08wMDBPICkjbGluZTo2MjYKICAgICAgICAgIGVsc2UgOiNsaW5lOjYyNwogICAgICAgICAgICBjb250aW51ZSAjbGluZTo2MjgKICAgICAgT09PME8wME9PT08wTzBPME8gLmxvb3BpbmcgKz0xICNsaW5lOjYyOQogICAgICBwcmludCAoZiJ7VH1be1B9Q3JhY2t7VH1de1B9IHtzdHIobGVuKE8wME9PTzAwME9PTzAwMDAwKSl9L3tPT08wTzAwT09PTzBPME8wTy5sb29waW5nfSBDcC06LXtsZW4oT09PME8wME9PT08wTzBPME8uZGllKX0gT2stOi17bGVuKE9PTzBPMDBPT09PME8wTzBPLmxpdmUpfSAgICAgICAgICIsZW5kID0nXHInKSNsaW5lOjYzMAogICAgZXhjZXB0IChDb25uZWN0aW9uRXJyb3IgKTojbGluZTo2MzEKICAgICAgcHJpbnQgKGYie1B9W3tVfSF7UH1de1V9IEtvbmVrc2kgRXJyb3IgICAgICAgICAgICAgICAgICAgICAiLGVuZCA9J1xyJyk7dGltZSAuc2xlZXAgKDUgKTtPT08wTzAwT09PTzBPME8wTyAuX19jb2lkX18gKE8wME9PTzAwME9PTzAwMDAwICxPMDAwME8wMDAwT08wT09PTyAsT08wMDAwMDBPMDBPTzAwME8gKSNsaW5lOjYzMgogICAgZXhjZXB0IDpPT08wTzAwT09PTzBPME8wTyAuX19jb2lkX18gKE8wME9PTzAwME9PTzAwMDAwICxPMDAwME8wMDAwT08wT09PTyAsT08wMDAwMDBPMDBPTzAwME8gKSNsaW5lOjYzMwpjbGFzcyBfX2NyYWNrX18gOiNsaW5lOjYzNQogIGRlZiBfX2luaXRfXyAoT09PME8wTzAwTzBPME9PT08gKTojbGluZTo2MzcKICAgIE9PTzBPME8wME8wTzBPT09PIC5sb29waW5nID0wICNsaW5lOjYzOAogICAgT09PME8wTzAwTzBPME9PT08gLmxpdmUgPVtdI2xpbmU6NjM5CiAgICBPT08wTzBPMDBPME8wT09PTyAuZGllID1bXSNsaW5lOjY0MAogICAgdHJ5IDojbGluZTo2NDEKICAgICAgT09PME8wTzAwTzBPME9PT08gLmZpbGUgPWlucHV0IChmIlxue0J9W3tQfSp7Qn1de1B9IENvbnRvaCA6IFJlc3VsdHMvQ3AudHh0XG57Qn1be1B9P3tCfV17UH0gRmlsZSA6ICIpI2xpbmU6NjQyCiAgICAgIGlmIGxlbiAoT09PME8wTzAwTzBPME9PT08gLmZpbGUgKT09MCA6I2xpbmU6NjQzCiAgICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gSmFuZ2FuIEtvc29uZyIpI2xpbmU6NjQ0CiAgICAgIGVsc2UgOiNsaW5lOjY0NQogICAgICAgIE9PTzBPME8wME8wTzBPT09PIC5zcGxpdCA9aW5wdXQgKGYie0J9W3tQfT97Qn1de1B9IFBlbWlzYWggOiAiKTtwcmludCAoIiAiKSNsaW5lOjY0NgogICAgICAgIGlmIGxlbiAoT09PME8wTzAwTzBPME9PT08gLnNwbGl0ICk9PTAgOiNsaW5lOjY0NwogICAgICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0gSmFuZ2FuIEtvc29uZyIpI2xpbmU6NjQ4CiAgICAgICAgZWxzZSA6I2xpbmU6NjQ5CiAgICAgICAgICBPT08wTzBPMDBPME8wT09PTyAubGlzdCA9b3BlbiAoT09PME8wTzAwTzBPME9PT08gLmZpbGUgLCdyJykucmVhZCAoKS5zcGxp""dGxpbmVzICgpI2xpbmU6NjUwCiAgICAgICAgICBpZiBsZW4gKE9PTzBPME8wME8wTzBPT09PIC5saXN0ICk9PTAgOiNsaW5lOjY1MQogICAgICAgICAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBGaWxlIEtvc29uZyIpI2xpbmU6NjUyCiAgICAgICAgICBmb3IgT09PTzBPT08wT09PME9PME8gaW4gT09PME8wTzAwTzBPME9PT08gLmxpc3QgOiNsaW5lOjY1MwogICAgICAgICAgICBPTzAwME9PTzAwME9PME9PTyA9T09PTzBPT08wT09PME9PME8gLnNwbGl0IChPT08wTzBPMDBPME8wT09PTyAuc3BsaXQgKVswIF0jbGluZTo2NTQKICAgICAgICAgICAgTzBPME9PME9PMDBPME8wME8gPU9PT08wT09PME9PTzBPTzBPIC5zcGxpdCAoT09PME8wTzAwTzBPME9PT08gLnNwbGl0IClbMSBdI2xpbmU6NjU1CiAgICAgICAgICAgIE9PTzBPME8wME8wTzBPT09PIC5fX21haW5fXyAoT09PME8wTzAwTzBPME9PT08gLmxpc3QgLE9PMDAwT09PMDAwT08wT09PICxPME8wT08wT08wME8wTzAwTyApI2xpbmU6NjU2CiAgICAgICAgICBleGl0IChmIlxue0h9W3tQfVNlbGVzYWl7SH1de1B9IikjbGluZTo2NTcKICAgIGV4Y2VwdCAoSU9FcnJvciApOiNsaW5lOjY1OAogICAgICBleGl0IChmIntQfVt7TX0he1B9XXtNfSBGaWxlIFRpZGFrIEFkYSIpI2xpbmU6NjU5CiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIE9PMDAwME8wME9PMDAwME8wIDojbGluZTo2NjAKICAgICAgZXhpdCAoZiJ7UH1be019IXtQfV17TX0ge09PMDAwME8wME9PMDAwME8wfSIpI2xpbmU6NjYxCiAgZGVmIF9fbWFpbl9fIChPMDAwT09PTzBPT08wME9PMCAsT09PME8wTzAwTzBPTzAwTzAgLE8wME9PT09PME8wTzAwT09PICxPTzAwME8wME9PMDBPT08wMCApOiNsaW5lOjY2MgogICAgdHJ5IDojbGluZTo2NjMKICAgICAgcHJpbnQgKGYie1R9W3tQfUNyYWNre1R9XXtQfSB7c3RyKGxlbihPT08wTzBPMDBPME9PMDBPMCkpfS97TzAwME9PT08wT09PMDBPTzAubG9vcGluZ30gQ3AtOi17bGVuKE8wMDBPT09PME9PTzAwT08wLmRpZSl9IE9rLTote2xlbihPMDAwT09PTzBPT08wME9PMC5saXZlKX0gICAgICIsZW5kID0nXHInKSNsaW5lOjY2NAogICAgICBPT08wMDBPT09PMDBPMDBPTyA9eydIb3N0JzonaWdmb2xsb3dlci5uZXQnLCdjb250ZW50LWxlbmd0aCc6JzkzJywnYWNjZXB0JzonYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0LCAqLyo7IHE9MC4wMScsJ3gtcmVxdWVzdGVkLXdpdGgnOidYTUxIdHRwUmVxdWVzdCcsJ3VzZXItYWdlbnQnOnJhbmRvbSAuY2hvaWNlIChvcGVuICgiRGF0YS91c2VyYWdlbnQudHh0IiwiciIpLnJlYWQgKCkuc3BsaXRsaW5lcyAoKSksJ2NvbnRlbnQtdHlwZSc6J2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOCcsJ29yaWdpbic6J2h0dHBzOi8vaWdmb2xsb3dlci5uZXQnLCdzZWMtZmV0Y2gtc2l0ZSc6J3NhbWUtb3JpZ2luJywnc2VjLWZldGNoLW1vZGUnOidjb3JzJywnc2VjLWZldGNoLWRlc3Qn""OidlbXB0eScsJ3JlZmVyZXInOidodHRwczovL2lnZm9sbG93ZXIubmV0L2dpcmlzeWFwJywnYWNjZXB0LWxhbmd1YWdlJzonaWQtSUQsaWQ7cT0wLjksZW4tVVM7cT0wLjgsZW47cT0wLjcnfSNsaW5lOjY3OAogICAgICBPMDAwT08wT08wMDAwMDAwMCA9eyd1c2VybmFtZSc6TzAwT09PT08wTzBPMDBPT08gLCdwYXNzd29yZCc6T08wMDBPMDBPTzAwT09PMDAgLCd1c2VyaWQnOicnfSNsaW5lOjY4MwogICAgICBPMDAwT08wME8wME8wME9PMCA9eydodHRwJzonc29ja3M0Oi8vJXMnJShyYW5kb20gLmNob2ljZSAob3BlbiAoIkRhdGEvcHJveGllcy50eHQiLCJyIikucmVhZCAoKS5zcGxpdGxpbmVzICgpKSl9I2xpbmU6Njg2CiAgICAgIHdpdGggcmVxdWVzdHMgLlNlc3Npb24gKClhcyBPMDAwME8wTzBPTzAwTzAwMCA6I2xpbmU6Njg3CiAgICAgICAgTzBPMDBPT08wME9PMDBPMDAgPU8wMDAwTzBPME9PMDBPMDAwIC5wb3N0ICgnaHR0cHM6Ly9pZ2ZvbGxvd2VyLm5ldC9naXJpc3lhcD8nLGRhdGEgPU8wMDBPTzBPTzAwMDAwMDAwICxoZWFkZXJzID1PT08wMDBPT09PMDBPMDBPTyAscHJveGllcyA9TzAwME9PMDBPMDBPMDBPTzAgLHRpbWVvdXQgPU5vbmUgKSNsaW5lOjY4OAogICAgICAgIGlmICdzdWNjZXNzJ2luIHN0ciAoTzBPMDBPT08wME9PMDBPMDAgLmpzb24gKCkpOiNsaW5lOjY4OQogICAgICAgICAgTzAwME9PT08wT09PMDBPTzAgLmxvb3BpbmcgKz0xICNsaW5lOjY5MAogICAgICAgICAgcHJpbnQgKGYiXHJ7SH1be1B9T2t7SH1de1B9IHtPMDBPT09PTzBPME8wME9PT318e09PMDAwTzAwT08wME9PTzAwfSAgICAgIikjbGluZTo2OTEKICAgICAgICAgIE8wMDBPT09PME9PTzAwT08wIC5saXZlIC5hcHBlbmQgKGYne08wME9PT09PME8wTzAwT09PfXx7T08wMDBPMDBPTzAwT09PMDB9JykjbGluZTo2OTIKICAgICAgICBlbGlmICdjaGVja3BvaW50J2luIHN0ciAoTzBPMDBPT08wME9PMDBPMDAgLmpzb24gKCkpOiNsaW5lOjY5MwogICAgICAgICAgTzAwME9PT08wT09PMDBPTzAgLmxvb3BpbmcgKz0xICNsaW5lOjY5NAogICAgICAgICAgcHJpbnQgKGYiXHJ7S31be1B9Q3B7S31de1B9IHtPMDBPT09PTzBPME8wME9PT318e09PMDAwTzAwT08wME9PTzAwfSAgICAgIikjbGluZTo2OTUKICAgICAgICAgIE8wMDBPT09PME9PTzAwT08wIC5kaWUgLmFwcGVuZCAoZid7TzAwT09PT08wTzBPMDBPT099fHtPTzAwME8wME9PMDBPT08wMH0nKSNsaW5lOjY5NgogICAgICAgIGVsc2UgOiNsaW5lOjY5NwogICAgICAgICAgTzAwME9PT08wT09PMDBPTzAgLmxvb3BpbmcgKz0xICNsaW5lOjY5OAogICAgZXhjZXB0IChDb25uZWN0aW9uRXJyb3IgKTojbGluZTo2OTkKICAgICAgcHJpbnQgKGYie1B9W3tVfSF7UH1de1V9IEtvbmVrc2kgRXJyb3IgICAgICAgICAgICAgICAiLGVuZCA9J1xyJyk7dGltZSAuc2xlZXAgKDggKTtPMDAwT09PTzBPT08wME9PMCAuX19tYWluX18gKE9PTzBPME8wME8wT08wME8wICxPMDBPT09PTzBPME8wME9PTyAs""T08wMDBPMDBPTzAwT09PMDAgKSNsaW5lOjcwMAogICAgZXhjZXB0IDpPMDAwT09PTzBPT08wME9PMCAuX19tYWluX18gKE9PTzBPME8wME8wT08wME8wICxPMDBPT09PTzBPME8wME9PTyAsT08wMDBPMDBPTzAwT09PMDAgKSNsaW5lOjcwMQpkZWYgX19tYXN1a19fICgpOiNsaW5lOjcwMwogIHRyeSA6I2xpbmU6NzA0CiAgICBPT09PME9PTzBPT08wTzAwTyA9b3BlbiAoJ0RhdGEvYXBpa2V5LnR4dCcsJ3InKS5yZWFkICgpI2xpbmU6NzA1CiAgZXhjZXB0IChJT0Vycm9yICk6I2xpbmU6NzA2CiAgICBfX2FwaWtleV9fICgpI2xpbmU6NzA3CiAgZWxzZSA6I2xpbmU6NzA4CiAgICBfX21lbnVfXyAoKQ==";
static PyObject *__pyx_kp_b_IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwpp;
static PyObject *__pyx_n_s_b64decode;
static PyObject *__pyx_n_s_base64;
static PyObject *__pyx_n_s_builtins;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_tuple_;
/* Late includes */

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_Instagram(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_Instagram},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "Instagram",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_b_IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwpp, __pyx_k_IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwpp, sizeof(__pyx_k_IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwpp), 0, 0, 0, 0},
  {&__pyx_n_s_b64decode, __pyx_k_b64decode, sizeof(__pyx_k_b64decode), 0, 0, 1, 1},
  {&__pyx_n_s_base64, __pyx_k_base64, sizeof(__pyx_k_base64), 0, 0, 1, 1},
  {&__pyx_n_s_builtins, __pyx_k_builtins, sizeof(__pyx_k_builtins), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  return 0;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "Instagram.py":2
 * import base64
 * exec(base64.b64decode(b''))             # <<<<<<<<<<<<<<
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_b_IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwpp); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initInstagram(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initInstagram(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_Instagram(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_Instagram(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_Instagram(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'Instagram' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_Instagram(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("Instagram", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_Instagram) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "Instagram")) {
      if (unlikely(PyDict_SetItemString(modules, "Instagram", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "Instagram.py":1
 * import base64             # <<<<<<<<<<<<<<
 * exec(base64.b64decode(b''))
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_base64, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_base64, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Instagram.py":2
 * import base64
 * exec(base64.b64decode(b''))             # <<<<<<<<<<<<<<
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_base64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_b64decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_Globals(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyExec3(__pyx_t_1, __pyx_t_2, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "Instagram.py":1
 * import base64             # <<<<<<<<<<<<<<
 * exec(base64.b64decode(b''))
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init Instagram", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init Instagram");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* PyExec */
static CYTHON_INLINE PyObject* __Pyx_PyExec2(PyObject* o, PyObject* globals) {
    return __Pyx_PyExec3(o, globals, NULL);
}
static PyObject* __Pyx_PyExec3(PyObject* o, PyObject* globals, PyObject* locals) {
    PyObject* result;
    PyObject* s = 0;
    char *code = 0;
    if (!globals || globals == Py_None) {
        globals = __pyx_d;
    } else if (!PyDict_Check(globals)) {
        PyErr_Format(PyExc_TypeError, "exec() arg 2 must be a dict, not %.200s",
                     Py_TYPE(globals)->tp_name);
        goto bad;
    }
    if (!locals || locals == Py_None) {
        locals = globals;
    }
    if (__Pyx_PyDict_GetItemStr(globals, __pyx_n_s_builtins) == NULL) {
        if (PyDict_SetItem(globals, __pyx_n_s_builtins, PyEval_GetBuiltins()) < 0)
            goto bad;
    }
    if (PyCode_Check(o)) {
        if (__Pyx_PyCode_HasFreeVars((PyCodeObject *)o)) {
            PyErr_SetString(PyExc_TypeError,
                "code object passed to exec() may not contain free variables");
            goto bad;
        }
        #if PY_VERSION_HEX < 0x030200B1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM < 0x07030400)
        result = PyEval_EvalCode((PyCodeObject *)o, globals, locals);
        #else
        result = PyEval_EvalCode(o, globals, locals);
        #endif
    } else {
        PyCompilerFlags cf;
        cf.cf_flags = 0;
#if PY_VERSION_HEX >= 0x030800A3
        cf.cf_feature_version = PY_MINOR_VERSION;
#endif
        if (PyUnicode_Check(o)) {
            cf.cf_flags = PyCF_SOURCE_IS_UTF8;
            s = PyUnicode_AsUTF8String(o);
            if (!s) goto bad;
            o = s;
        #if PY_MAJOR_VERSION >= 3
        } else if (!PyBytes_Check(o)) {
        #else
        } else if (!PyString_Check(o)) {
        #endif
            PyErr_Format(PyExc_TypeError,
                "exec: arg 1 must be string, bytes or code object, got %.200s",
                Py_TYPE(o)->tp_name);
            goto bad;
        }
        #if PY_MAJOR_VERSION >= 3
        code = PyBytes_AS_STRING(o);
        #else
        code = PyString_AS_STRING(o);
        #endif
        if (PyEval_MergeCompilerFlags(&cf)) {
            result = PyRun_StringFlags(code, Py_file_input, globals, locals, &cf);
        } else {
            result = PyRun_String(code, Py_file_input, globals, locals);
        }
        Py_XDECREF(s);
    }
    return result;
bad:
    Py_XDECREF(s);
    return 0;
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* Globals */
static PyObject* __Pyx_Globals(void) {
    Py_ssize_t i;
    PyObject *names;
    PyObject *globals = __pyx_d;
    Py_INCREF(globals);
    names = PyObject_Dir(__pyx_m);
    if (!names)
        goto bad;
    for (i = PyList_GET_SIZE(names)-1; i >= 0; i--) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject* name = PySequence_ITEM(names, i);
        if (!name)
            goto bad;
#else
        PyObject* name = PyList_GET_ITEM(names, i);
#endif
        if (!PyDict_Contains(globals, name)) {
            PyObject* value = __Pyx_GetAttr(__pyx_m, name);
            if (!value) {
#if CYTHON_COMPILING_IN_PYPY
                Py_DECREF(name);
#endif
                goto bad;
            }
            if (PyDict_SetItem(globals, name, value) < 0) {
#if CYTHON_COMPILING_IN_PYPY
                Py_DECREF(name);
#endif
                Py_DECREF(value);
                goto bad;
            }
        }
#if CYTHON_COMPILING_IN_PYPY
        Py_DECREF(name);
#endif
    }
    Py_DECREF(names);
    return globals;
bad:
    Py_XDECREF(names);
    Py_XDECREF(globals);
    return NULL;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
